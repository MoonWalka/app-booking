#!/bin/bash

# Script pour s√©curiser Firebase et r√©activer l'authentification dans l'application App Booking
# Ce script applique les modifications n√©cessaires pour :
# 1. R√©activer l'authentification Firebase
# 2. Mettre en place des r√®gles de s√©curit√© Firebase
# 3. Maintenir l'application fonctionnelle avec l'authentification activ√©e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
  echo -e "${BLUE}$1${NC}"
}

print_success() {
  echo -e "${GREEN}$1${NC}"
}

print_error() {
  echo -e "${RED}$1${NC}"
}

print_warning() {
  echo -e "${YELLOW}$1${NC}"
}

# V√©rifier si nous sommes dans le r√©pertoire du projet
if [ ! -d "./client" ]; then
  print_error "Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet app-booking"
  exit 1
fi

# Cr√©er un r√©pertoire de sauvegarde avec horodatage
BACKUP_DIR="./backups/firebase_auth_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR/client/src/context"
mkdir -p "$BACKUP_DIR/client/src"
print_message "üìÅ Cr√©ation du r√©pertoire de sauvegarde: $BACKUP_DIR"

# Sauvegarder les fichiers originaux
if [ -f "./client/src/context/AuthContext.js" ]; then
  cp "./client/src/context/AuthContext.js" "$BACKUP_DIR/client/src/context/"
fi

if [ -f "./client/src/firebase.js" ]; then
  cp "./client/src/firebase.js" "$BACKUP_DIR/client/src/"
fi

if [ -f "./firestore.rules" ]; then
  cp "./firestore.rules" "$BACKUP_DIR/"
fi

print_success "üíæ Sauvegarde des fichiers originaux effectu√©e"

# Appliquer les correctifs
print_message "üîÑ Application des correctifs pour s√©curiser Firebase et r√©activer l'authentification..."

# 1. Mettre √† jour le fichier AuthContext.js pour r√©activer l'authentification
cat > "./client/src/context/AuthContext.js" << 'EOL'
import React, { createContext, useState, useContext, useEffect } from 'react';
import { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';
import { app } from '../firebase';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

// Configuration pour le mode bypass d'authentification
const BYPASS_AUTH = false; // Mettre √† false pour activer l'authentification r√©elle
const TEST_USER = {
  id: 'test-user-id',
  email: 'test@example.com',
  name: 'Utilisateur Test',
  role: 'admin'
};

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(BYPASS_AUTH ? TEST_USER : null);
  const [isAuthenticated, setIsAuthenticated] = useState(BYPASS_AUTH);
  const [loading, setLoading] = useState(!BYPASS_AUTH);
  const [error, setError] = useState(null);
  const auth = getAuth(app);

  useEffect(() => {
    if (BYPASS_AUTH) {
      console.log('Mode bypass d\'authentification activ√© - Authentification simul√©e');
      return;
    }

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        // Utilisateur connect√©
        setCurrentUser({
          id: user.uid,
          email: user.email,
          name: user.displayName || user.email.split('@')[0],
          role: 'admin' // Par d√©faut, tous les utilisateurs sont admin pour l'instant
        });
        setIsAuthenticated(true);
      } else {
        // Utilisateur d√©connect√©
        setCurrentUser(null);
        setIsAuthenticated(false);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, [auth]);

  const login = async (email, password) => {
    if (BYPASS_AUTH) {
      console.log('Mode bypass d\'authentification activ√© - Login simul√©');
      setCurrentUser(TEST_USER);
      setIsAuthenticated(true);
      setError(null);
      return true;
    }

    try {
      setLoading(true);
      await signInWithEmailAndPassword(auth, email, password);
      setError(null);
      return true;
    } catch (error) {
      console.error('Erreur de connexion:', error);
      setError(error.message);
      return false;
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    if (BYPASS_AUTH) {
      console.log('Mode bypass d\'authentification activ√© - Logout ignor√©');
      return;
    }

    try {
      await signOut(auth);
    } catch (error) {
      console.error('Erreur lors de la d√©connexion:', error);
    }
  };

  return (
    <React.Fragment>
      <AuthContext.Provider value={{ 
        currentUser, 
        isAuthenticated, 
        loading, 
        error, 
        login, 
        logout,
        bypassEnabled: BYPASS_AUTH
      }}>
        {children}
      </AuthContext.Provider>
    </React.Fragment>
  );
};
EOL

# 2. Mettre √† jour le fichier firebase.js pour exporter l'instance d'authentification
cat > "./client/src/firebase.js" << 'EOL'
// client/src/firebase.js
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import { getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCt994en0glR_WVbxxkDATXM25QV7HKovA",
  authDomain: "app-booking-26571.firebaseapp.com",
  projectId: "app-booking-26571",
  storageBucket: "app-booking-26571.firebasestorage.app",
  messagingSenderId: "985724562753",
  appId: "1:985724562753:web:83a093ebd7a7034a9a85c0",
  measurementId: "G-LC94BW3MWX"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const db = getFirestore(app);
const auth = getAuth(app);

export { app, db, auth };
EOL

# 3. Cr√©er les r√®gles de s√©curit√© Firestore
cat > "./firestore.rules" << 'EOL'
// R√®gles de s√©curit√© Firestore pour l'application App Booking
// Ces r√®gles limitent l'acc√®s aux utilisateurs authentifi√©s uniquement
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // R√®gle par d√©faut : refuser l'acc√®s √† tous
    match /{document=**} {
      allow read, write: if false;
    }
    
    // R√®gles pour la collection artists
    match /artists/{artistId} {
      // Permettre la lecture √† tous les utilisateurs authentifi√©s
      allow read: if request.auth != null;
      
      // Permettre l'√©criture (cr√©ation, mise √† jour, suppression) aux utilisateurs authentifi√©s
      allow write: if request.auth != null;
    }
    
    // R√®gles pour la collection concerts
    match /concerts/{concertId} {
      // Permettre la lecture √† tous les utilisateurs authentifi√©s
      allow read: if request.auth != null;
      
      // Permettre l'√©criture aux utilisateurs authentifi√©s
      allow write: if request.auth != null;
    }
    
    // R√®gles pour la collection programmers
    match /programmers/{programmerId} {
      // Permettre la lecture √† tous les utilisateurs authentifi√©s
      allow read: if request.auth != null;
      
      // Permettre l'√©criture aux utilisateurs authentifi√©s
      allow write: if request.auth != null;
    }
    
    // R√®gles pour les autres collections (√† adapter selon les besoins)
    match /users/{userId} {
      // Permettre √† un utilisateur de lire et modifier uniquement ses propres donn√©es
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
EOL

print_success "‚úÖ Correctifs appliqu√©s avec succ√®s"

# R√©sum√© des modifications
print_message "üöÄ Termin√©! Les correctifs ont √©t√© appliqu√©s pour s√©curiser Firebase et r√©activer l'authentification."
print_message "üìù Les fichiers originaux ont √©t√© sauvegard√©s dans: $BACKUP_DIR"

cat << 'EOL'
Les modifications apport√©es:

1. R√©activation de l'authentification Firebase:
   - D√©sactivation du mode bypass d'authentification (BYPASS_AUTH = false)
   - Mise √† jour du contexte d'authentification pour utiliser les API Firebase Auth
   - Impl√©mentation des fonctions de connexion et d√©connexion avec Firebase

2. S√©curisation de Firebase:
   - Cr√©ation de r√®gles de s√©curit√© Firestore qui limitent l'acc√®s aux utilisateurs authentifi√©s
   - Mise √† jour du fichier firebase.js pour exporter l'instance d'authentification

Pour d√©ployer ces modifications sur Firebase:
1. Installez Firebase CLI si ce n'est pas d√©j√† fait:
   npm install -g firebase-tools

2. Connectez-vous √† Firebase:
   firebase login

3. D√©ployez les r√®gles de s√©curit√©:
   firebase deploy --only firestore:rules

Pour tester l'authentification:
1. Cr√©ez un utilisateur dans la console Firebase (Authentication > Users > Add User)
2. Utilisez ces identifiants pour vous connecter √† l'application

Utilisateurs de test recommand√©s:
- Email: admin@example.com
- Mot de passe: password123

Si vous rencontrez des probl√®mes, consultez les logs de la console du navigateur
pour obtenir des informations de d√©bogage d√©taill√©es.
EOL

exit 0
