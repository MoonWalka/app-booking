#!/bin/bash

# Script pour corriger les probl√®mes d'affichage de la page Concert en production
# Ce script modifie les fichiers n√©cessaires pour r√©soudre l'erreur React #31
# qui emp√™che l'affichage correct du tableau de bord des concerts

echo "D√©but des corrections pour la page Concert en production..."

# V√©rifier que nous sommes √† la racine du projet
if [ ! -d "client" ]; then
  echo "‚ùå Erreur: Ce script doit √™tre ex√©cut√© √† la racine du projet."
  echo "Assurez-vous que vous √™tes dans le r√©pertoire principal contenant le dossier client."
  exit 1
fi

# Cr√©er des sauvegardes des fichiers originaux
echo "üì¶ Cr√©ation de sauvegardes des fichiers originaux..."
mkdir -p backups
cp -f client/src/components/concerts/ConcertsList.js backups/ConcertsList.js.bak
cp -f client/src/components/concerts/ConcertsDashboard.jsx backups/ConcertsDashboard.jsx.bak
echo "‚úÖ Sauvegardes cr√©√©es dans le dossier 'backups'"

# 1. Correction du composant ConcertsDashboard.jsx pour s'assurer qu'il est correctement export√©
echo "üîß Correction du composant ConcertsDashboard.jsx..."
cat > client/src/components/concerts/ConcertsDashboard.jsx << 'EOL'
import React from 'react';
import { FaCalendarAlt, FaMusic, FaMapMarkerAlt, FaUsers, FaMoneyBillWave } from 'react-icons/fa';
import './ConcertsDashboard.css';

const ConcertsDashboard = ({ concerts, onViewConcert, onEditConcert }) => {
  // V√©rifier si concerts est d√©fini et est un tableau
  if (!concerts || !Array.isArray(concerts)) {
    console.error('ConcertsDashboard - Erreur: concerts n\'est pas un tableau valide', concerts);
    return <div className="error-message">Erreur de chargement des donn√©es</div>;
  }

  // Calculer les statistiques
  const totalConcerts = concerts.length;
  const upcomingConcerts = concerts.filter(concert => 
    concert.status === '√Ä venir' || concert.status === 'En cours'
  ).length;
  const completedConcerts = concerts.filter(concert => 
    concert.status === 'Termin√©'
  ).length;
  const canceledConcerts = concerts.filter(concert => 
    concert.status === 'Annul√©'
  ).length;
  
  // Calculer le revenu total (si le prix est disponible)
  const totalRevenue = concerts.reduce((sum, concert) => {
    const price = parseFloat(concert.price) || 0;
    return sum + price;
  }, 0);
  
  // Obtenir les villes uniques
  const uniqueCities = [...new Set(concerts.map(concert => concert.city).filter(Boolean))];
  
  // Obtenir les artistes uniques
  const uniqueArtists = [...new Set(concerts.map(concert => 
    concert.artist ? concert.artist.name : null
  ).filter(Boolean))];

  // Fonction pour formater la date
  const formatDate = (dateObj) => {
    if (!dateObj) return 'Date non sp√©cifi√©e';
    
    if (dateObj instanceof Date) {
      return dateObj.toLocaleDateString();
    } else if (dateObj.seconds) {
      return new Date(dateObj.seconds * 1000).toLocaleDateString();
    } else {
      return 'Date invalide';
    }
  };

  return (
    <div className="concerts-dashboard">
      <div className="stats-container">
        <div className="stat-card">
          <div className="stat-icon">
            <FaCalendarAlt />
          </div>
          <div className="stat-content">
            <h3>Total des concerts</h3>
            <p className="stat-value">{totalConcerts}</p>
            <div className="stat-details">
              <span className="upcoming">{upcomingConcerts} √† venir</span>
              <span className="completed">{completedConcerts} termin√©s</span>
              <span className="canceled">{canceledConcerts} annul√©s</span>
            </div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaMusic />
          </div>
          <div className="stat-content">
            <h3>Artistes</h3>
            <p className="stat-value">{uniqueArtists.length}</p>
            <div className="stat-details">
              <span>Artistes diff√©rents programm√©s</span>
            </div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaMapMarkerAlt />
          </div>
          <div className="stat-content">
            <h3>Villes</h3>
            <p className="stat-value">{uniqueCities.length}</p>
            <div className="stat-details">
              <span>Villes diff√©rentes</span>
            </div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">
            <FaMoneyBillWave />
          </div>
          <div className="stat-content">
            <h3>Revenus estim√©s</h3>
            <p className="stat-value">{totalRevenue.toFixed(2)} ‚Ç¨</p>
            <div className="stat-details">
              <span>Bas√© sur les prix des billets</span>
            </div>
          </div>
        </div>
      </div>
      
      <div className="concerts-grid">
        <h2>Concerts √† venir</h2>
        {concerts.filter(concert => concert.status === '√Ä venir' || concert.status === 'En cours').length === 0 ? (
          <p className="no-concerts">Aucun concert √† venir</p>
        ) : (
          <div className="grid-container">
            {concerts
              .filter(concert => concert.status === '√Ä venir' || concert.status === 'En cours')
              .sort((a, b) => {
                const dateA = a.date instanceof Date ? a.date : a.date && a.date.seconds ? new Date(a.date.seconds * 1000) : new Date(0);
                const dateB = b.date instanceof Date ? b.date : b.date && b.date.seconds ? new Date(b.date.seconds * 1000) : new Date(0);
                return dateA - dateB;
              })
              .map(concert => (
                <div key={concert.id} className="concert-card">
                  <div className="concert-header">
                    <h3>{concert.artist ? concert.artist.name : 'Artiste inconnu'}</h3>
                    <span className={`status-badge ${concert.status === '√Ä venir' ? 'upcoming' : 'in-progress'}`}>
                      {concert.status}
                    </span>
                  </div>
                  <div className="concert-details">
                    <p><strong>Date:</strong> {formatDate(concert.date)} {concert.time || ''}</p>
                    <p><strong>Lieu:</strong> {concert.venue || 'Non sp√©cifi√©'}</p>
                    <p><strong>Ville:</strong> {concert.city || 'Non sp√©cifi√©e'}</p>
                    <p><strong>Prix:</strong> {concert.price ? `${concert.price} ‚Ç¨` : 'Non sp√©cifi√©'}</p>
                  </div>
                  <div className="concert-actions">
                    <button 
                      className="view-button"
                      onClick={() => onViewConcert && onViewConcert(concert)}
                    >
                      Voir
                    </button>
                    <button 
                      className="edit-button"
                      onClick={() => onEditConcert && onEditConcert(concert)}
                    >
                      Modifier
                    </button>
                  </div>
                </div>
              ))
            }
          </div>
        )}
      </div>
      
      <div className="concerts-grid">
        <h2>Concerts pass√©s</h2>
        {concerts.filter(concert => concert.status === 'Termin√©').length === 0 ? (
          <p className="no-concerts">Aucun concert pass√©</p>
        ) : (
          <div className="grid-container">
            {concerts
              .filter(concert => concert.status === 'Termin√©')
              .sort((a, b) => {
                const dateA = a.date instanceof Date ? a.date : a.date && a.date.seconds ? new Date(a.date.seconds * 1000) : new Date(0);
                const dateB = b.date instanceof Date ? b.date : b.date && b.date.seconds ? new Date(b.date.seconds * 1000) : new Date(0);
                return dateB - dateA; // Tri d√©croissant pour les concerts pass√©s
              })
              .map(concert => (
                <div key={concert.id} className="concert-card past">
                  <div className="concert-header">
                    <h3>{concert.artist ? concert.artist.name : 'Artiste inconnu'}</h3>
                    <span className="status-badge completed">
                      {concert.status}
                    </span>
                  </div>
                  <div className="concert-details">
                    <p><strong>Date:</strong> {formatDate(concert.date)} {concert.time || ''}</p>
                    <p><strong>Lieu:</strong> {concert.venue || 'Non sp√©cifi√©'}</p>
                    <p><strong>Ville:</strong> {concert.city || 'Non sp√©cifi√©e'}</p>
                    <p><strong>Prix:</strong> {concert.price ? `${concert.price} ‚Ç¨` : 'Non sp√©cifi√©'}</p>
                  </div>
                  <div className="concert-actions">
                    <button 
                      className="view-button"
                      onClick={() => onViewConcert && onViewConcert(concert)}
                    >
                      Voir
                    </button>
                  </div>
                </div>
              ))
            }
          </div>
        )}
      </div>
      
      {concerts.filter(concert => concert.status === 'Annul√©').length > 0 && (
        <div className="concerts-grid">
          <h2>Concerts annul√©s</h2>
          <div className="grid-container">
            {concerts
              .filter(concert => concert.status === 'Annul√©')
              .map(concert => (
                <div key={concert.id} className="concert-card canceled">
                  <div className="concert-header">
                    <h3>{concert.artist ? concert.artist.name : 'Artiste inconnu'}</h3>
                    <span className="status-badge canceled">
                      {concert.status}
                    </span>
                  </div>
                  <div className="concert-details">
                    <p><strong>Date:</strong> {formatDate(concert.date)} {concert.time || ''}</p>
                    <p><strong>Lieu:</strong> {concert.venue || 'Non sp√©cifi√©'}</p>
                    <p><strong>Ville:</strong> {concert.city || 'Non sp√©cifi√©e'}</p>
                  </div>
                  <div className="concert-actions">
                    <button 
                      className="view-button"
                      onClick={() => onViewConcert && onViewConcert(concert)}
                    >
                      Voir
                    </button>
                  </div>
                </div>
              ))
            }
          </div>
        </div>
      )}
    </div>
  );
};

export default ConcertsDashboard;
EOL

# 2. Correction du composant ConcertsList.js pour r√©soudre l'erreur React #31
echo "üîß Correction du composant ConcertsList.js..."
cat > client/src/components/concerts/ConcertsList.js << 'EOL'
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getConcerts, addConcert } from '../../services/concertsService';
import { getArtists } from '../../services/artistsService';
import './ConcertsList.css';

// Import dynamique du composant ConcertsDashboard pour √©viter les probl√®mes de chargement
const ConcertsDashboard = React.lazy(() => import('./ConcertsDashboard'));

const ConcertsList = () => {
  const [concerts, setConcerts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [artists, setArtists] = useState([]);
  const [newConcert, setNewConcert] = useState({
    artistId: '',
    date: '',
    time: '',
    venue: '',
    city: '',
    price: '',
    status: '√Ä venir',
    notes: ''
  });
  const [currentDate, setCurrentDate] = useState('');
  const [currentHour, setCurrentHour] = useState('');
  const [currentMinute, setCurrentMinute] = useState('');
  const [useDashboard, setUseDashboard] = useState(false); // D√©sactiver le tableau de bord par d√©faut en production
  const [error, setError] = useState(null);

  // Options pour les heures et minutes
  const hours = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, '0'));
  const minutes = ['00', '15', '30', '45'];
  const statuses = ['√Ä venir', 'En cours', 'Termin√©', 'Annul√©'];

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('ConcertsList - Chargement des concerts...');
        const concertsData = await getConcerts();
        console.log(`ConcertsList - ${concertsData.length} concerts r√©cup√©r√©s`);
        
        console.log('ConcertsList - Chargement des artistes...');
        const artistsData = await getArtists();
        console.log(`ConcertsList - ${artistsData.length} artistes r√©cup√©r√©s`);
        
        // Enrichir les donn√©es de concerts avec les informations d'artistes
        const enrichedConcerts = concertsData.map(concert => {
          const artist = artistsData.find(a => a.id === concert.artistId);
          return {
            ...concert,
            artist: artist || { name: 'Artiste inconnu' }
          };
        });
        
        console.log('ConcertsList - Donn√©es enrichies:', enrichedConcerts);
        setConcerts(enrichedConcerts);
        setArtists(artistsData);
        setLoading(false);
      } catch (error) {
        console.error('ConcertsList - Erreur lors du chargement des donn√©es:', error);
        setError('Erreur lors du chargement des donn√©es. Veuillez r√©essayer.');
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'date') {
      setCurrentDate(value);
    } else if (name === 'hour') {
      setCurrentHour(value);
    } else if (name === 'minute') {
      setCurrentMinute(value);
    } else {
      setNewConcert(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Construire la date et l'heure
      const dateObj = new Date(currentDate);
      const timeString = `${currentHour}:${currentMinute}`;
      
      const concertToAdd = {
        ...newConcert,
        date: dateObj,
        time: timeString
      };
      
      console.log('ConcertsList - Ajout d\'un nouveau concert:', concertToAdd);
      const addedConcert = await addConcert(concertToAdd);
      console.log('ConcertsList - Concert ajout√© avec succ√®s:', addedConcert);
      
      // Ajouter l'artiste √† l'objet concert
      const artist = artists.find(a => a.id === concertToAdd.artistId);
      const enrichedConcert = {
        ...addedConcert,
        artist: artist || { name: 'Artiste inconnu' }
      };
      
      setConcerts(prev => [...prev, enrichedConcert]);
      setShowForm(false);
      setNewConcert({
        artistId: '',
        date: '',
        time: '',
        venue: '',
        city: '',
        price: '',
        status: '√Ä venir',
        notes: ''
      });
      setCurrentDate('');
      setCurrentHour('');
      setCurrentMinute('');
      setLoading(false);
    } catch (error) {
      console.error('ConcertsList - Erreur lors de l\'ajout du concert:', error);
      setError('Erreur lors de l\'ajout du concert. Veuillez r√©essayer.');
      setLoading(false);
    }
  };

  const handleViewConcert = (concert) => {
    try {
      // Cette fonction est appel√©e par le composant ConcertsDashboard
      console.log('ConcertsList - Redirection vers la page du concert:', concert.id);
      window.location.href = `/concerts/${concert.id}`;
    } catch (error) {
      console.error('ConcertsList - Erreur lors de la redirection:', error);
      setError('Erreur lors de la redirection. Veuillez r√©essayer.');
    }
  };

  const handleEditConcert = (concert) => {
    try {
      // Cette fonction est appel√©e par le composant ConcertsDashboard
      console.log('ConcertsList - Redirection vers la page d\'√©dition du concert:', concert.id);
      window.location.href = `/concerts/${concert.id}`;
    } catch (error) {
      console.error('ConcertsList - Erreur lors de la redirection:', error);
      setError('Erreur lors de la redirection. Veuillez r√©essayer.');
    }
  };

  // Basculer entre le tableau de bord et la vue classique
  const toggleView = () => {
    console.log('ConcertsList - Basculement de la vue:', useDashboard ? 'classique' : 'tableau de bord');
    setUseDashboard(!useDashboard);
  };

  if (loading && concerts.length === 0) {
    return <div className="loading">Chargement des concerts...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error">{error}</div>
        <button className="refresh-button" onClick={() => window.location.reload()}>
          Rafra√Æchir la page
        </button>
      </div>
    );
  }

  return (
    <div className="concerts-container">
      <div className="concerts-header">
        <h1>Gestion des concerts</h1>
        <div className="header-buttons">
          <button className="toggle-view-btn" onClick={toggleView}>
            {useDashboard ? 'Vue classique' : 'Vue tableau de bord'}
          </button>
          <button className="add-concert-btn" onClick={() => setShowForm(!showForm)}>
            {showForm ? 'Annuler' : 'Ajouter un concert'}
          </button>
        </div>
      </div>
      
      {showForm && (
        <div className="add-concert-form">
          <h2>Ajouter un nouveau concert</h2>
          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="artistId">Artiste *</label>
              <select
                id="artistId"
                name="artistId"
                value={newConcert.artistId}
                onChange={handleInputChange}
                required
              >
                <option value="">S√©lectionner un artiste</option>
                {artists.map(artist => (
                  <option key={artist.id} value={artist.id}>{artist.name}</option>
                ))}
              </select>
            </div>
            
            <div className="form-group">
              <label htmlFor="date">Date *</label>
              <input
                type="date"
                id="date"
                name="date"
                value={currentDate}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="form-group">
              <label>Heure *</label>
              <div className="time-inputs">
                <select
                  id="hour"
                  name="hour"
                  value={currentHour}
                  onChange={handleInputChange}
                  required
                  aria-label="Heure"
                >
                  <option value="">Heure</option>
                  {hours.map(hour => (
                    <option key={hour} value={hour}>{hour}h</option>
                  ))}
                </select>
                
                <select
                  id="minute"
                  name="minute"
                  value={currentMinute}
                  onChange={handleInputChange}
                  required
                  aria-label="Minute"
                >
                  <option value="">Minute</option>
                  {minutes.map(minute => (
                    <option key={minute} value={minute}>{minute}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="venue">Lieu *</label>
              <input
                type="text"
                id="venue"
                name="venue"
                value={newConcert.venue}
                onChange={handleInputChange}
                required
                placeholder="Nom de la salle ou du lieu"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="city">Ville *</label>
              <input
                type="text"
                id="city"
                name="city"
                value={newConcert.city}
                onChange={handleInputChange}
                required
                placeholder="Ville"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="price">Prix (‚Ç¨)</label>
              <input
                type="number"
                id="price"
                name="price"
                value={newConcert.price}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                placeholder="Prix en euros"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="status">Statut</label>
              <select
                id="status"
                name="status"
                value={newConcert.status}
                onChange={handleInputChange}
              >
                {statuses.map(status => (
                  <option key={status} value={status}>{status}</option>
                ))}
              </select>
            </div>
            
            <div className="form-group full-width">
              <label htmlFor="notes">Notes</label>
              <textarea
                id="notes"
                name="notes"
                value={newConcert.notes}
                onChange={handleInputChange}
                rows="4"
                placeholder="Informations compl√©mentaires"
              ></textarea>
            </div>
            
            <div className="form-actions">
              <button type="button" className="cancel-btn" onClick={() => setShowForm(false)}>
                Annuler
              </button>
              <button type="submit" className="submit-btn" disabled={loading}>
                {loading ? 'Ajout en cours...' : 'Ajouter le concert'}
              </button>
            </div>
          </form>
        </div>
      )}
      
      {!showForm && (
        <>
          {useDashboard ? (
            <React.Suspense fallback={<div className="loading">Chargement du tableau de bord...</div>}>
              <ConcertsDashboard 
                concerts={concerts}
                onViewConcert={handleViewConcert}
                onEditConcert={handleEditConcert}
              />
            </React.Suspense>
          ) : (
            <div className="concerts-list">
              <h2>Liste des concerts ({concerts.length})</h2>
              <table className="concerts-table">
                <thead>
                  <tr>
                    <th>Artiste</th>
                    <th>Date</th>
                    <th>Lieu</th>
                    <th>Ville</th>
                    <th>Statut</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {concerts.map(concert => (
                    <tr key={concert.id}>
                      <td>{concert.artist ? concert.artist.name : 'Artiste inconnu'}</td>
                      <td>
                        {concert.date instanceof Date 
                          ? concert.date.toLocaleDateString() 
                          : concert.date && concert.date.seconds 
                            ? new Date(concert.date.seconds * 1000).toLocaleDateString() 
                            : 'Date non sp√©cifi√©e'}
                        {' '}
                        {concert.time || ''}
                      </td>
                      <td>{concert.venue || 'Non sp√©cifi√©'}</td>
                      <td>{concert.city || 'Non sp√©cifi√©'}</td>
                      <td>{concert.status || 'Non sp√©cifi√©'}</td>
                      <td>
                        <Link to={`/concerts/${concert.id}`} className="action-link">
                          Voir
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default ConcertsList;
EOL

# 3. S'assurer que le fichier CSS existe et est correctement format√©
echo "üîß V√©rification du fichier CSS pour le tableau de bord..."
if [ ! -f "client/src/components/concerts/ConcertsDashboard.css" ]; then
  echo "Cr√©ation du fichier CSS pour le tableau de bord..."
  cat > client/src/components/concerts/ConcertsDashboard.css << 'EOL'
.concerts-dashboard {
  padding: 20px;
}

.stats-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.stat-card {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 20px;
  display: flex;
  align-items: center;
}

.stat-icon {
  font-size: 2rem;
  color: #4a6cf7;
  margin-right: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px;
  height: 50px;
  background-color: #eef2ff;
  border-radius: 50%;
}

.stat-content {
  flex: 1;
}

.stat-content h3 {
  margin: 0 0 5px 0;
  font-size: 1rem;
  color: #666;
}

.stat-value {
  font-size: 1.8rem;
  font-weight: bold;
  margin: 0 0 5px 0;
  color: #333;
}

.stat-details {
  font-size: 0.85rem;
  color: #777;
}

.stat-details span {
  display: inline-block;
  margin-right: 10px;
}

.upcoming {
  color: #4caf50;
}

.completed {
  color: #2196f3;
}

.canceled {
  color: #f44336;
}

.concerts-grid {
  margin-bottom: 40px;
}

.concerts-grid h2 {
  margin-bottom: 15px;
  color: #333;
  border-bottom: 1px solid #eee;
  padding-bottom: 10px;
}

.grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 20px;
}

.concert-card {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  overflow: hidden;
  transition: transform 0.3s, box-shadow 0.3s;
}

.concert-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.concert-card.past {
  opacity: 0.8;
}

.concert-card.canceled {
  opacity: 0.7;
  background-color: #f9f9f9;
}

.concert-header {
  padding: 15px;
  background-color: #f5f5f5;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.concert-header h3 {
  margin: 0;
  font-size: 1.1rem;
  color: #333;
}

.status-badge {
  font-size: 0.8rem;
  padding: 3px 8px;
  border-radius: 12px;
  font-weight: 500;
}

.status-badge.upcoming {
  background-color: #e8f5e9;
  color: #2e7d32;
}

.status-badge.in-progress {
  background-color: #e3f2fd;
  color: #1565c0;
}

.status-badge.completed {
  background-color: #e8eaf6;
  color: #3949ab;
}

.status-badge.canceled {
  background-color: #ffebee;
  color: #c62828;
}

.concert-details {
  padding: 15px;
}

.concert-details p {
  margin: 8px 0;
  font-size: 0.9rem;
  color: #555;
}

.concert-actions {
  padding: 15px;
  display: flex;
  justify-content: space-between;
  border-top: 1px solid #eee;
}

.view-button, .edit-button {
  padding: 8px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.3s;
}

.view-button {
  background-color: #e3f2fd;
  color: #1565c0;
}

.view-button:hover {
  background-color: #bbdefb;
}

.edit-button {
  background-color: #f5f5f5;
  color: #555;
}

.edit-button:hover {
  background-color: #e0e0e0;
}

.no-concerts {
  padding: 20px;
  text-align: center;
  color: #777;
  background-color: #f9f9f9;
  border-radius: 8px;
}

.error-message {
  padding: 20px;
  text-align: center;
  color: #d32f2f;
  background-color: #ffebee;
  border-radius: 8px;
  margin: 20px 0;
}

/* Styles responsifs */
@media (max-width: 768px) {
  .stats-container {
    grid-template-columns: 1fr;
  }
  
  .grid-container {
    grid-template-columns: 1fr;
  }
  
  .concert-card {
    margin-bottom: 15px;
  }
}
EOL
fi

# 4. V√©rifier l'installation de react-icons
echo "üîß V√©rification de l'installation de react-icons..."
if ! grep -q "react-icons" client/package.json; then
  echo "‚ö†Ô∏è Le package react-icons n'est pas install√©. Ajout d'une instruction pour l'installer..."
  echo ""
  echo "‚ö†Ô∏è IMPORTANT: Vous devez installer react-icons avec la commande suivante:"
  echo "cd client && npm install --save react-icons"
  echo ""
fi

echo "‚úÖ Corrections termin√©es avec succ√®s!"
echo ""
echo "Les probl√®mes suivants ont √©t√© corrig√©s :"
echo "1. Le composant ConcertsDashboard a √©t√© modifi√© pour s'assurer qu'il est correctement export√©"
echo "2. Le composant ConcertsList a √©t√© modifi√© pour utiliser React.lazy et React.Suspense pour charger le tableau de bord"
echo "3. La vue tableau de bord est d√©sactiv√©e par d√©faut en production pour √©viter les erreurs"
echo "4. Des v√©rifications suppl√©mentaires ont √©t√© ajout√©es pour √©viter les erreurs avec des donn√©es invalides"
echo ""
echo "Pour appliquer les modifications :"
echo "1. Assurez-vous que l'application n'est pas en cours d'ex√©cution"
echo "2. Ex√©cutez 'cd client && npm install react-icons' si ce n'est pas d√©j√† fait"
echo "3. Reconstruisez l'application avec 'cd client && npm run build'"
echo "4. Red√©ployez l'application sur votre serveur de production"
