#!/bin/bash

# Script pour corriger les probl√®mes de validation de formulaires et d'affichage de la page Concert
# Ce script modifie les fichiers n√©cessaires pour s'assurer que :
# 1. Les soumissions de formulaire avec statut 'pending' apparaissent dans l'onglet "Validation de formulaire"
# 2. Les soumissions sans statut sont automatiquement mises √† jour avec le statut 'pending'
# 3. Les exemples par d√©faut sont supprim√©s
# 4. La page Concert s'affiche correctement

echo "D√©but des corrections pour l'application de booking musical..."

# V√©rifier que nous sommes √† la racine du projet
if [ ! -d "client" ]; then
  echo "‚ùå Erreur: Ce script doit √™tre ex√©cut√© √† la racine du projet."
  echo "Assurez-vous que vous √™tes dans le r√©pertoire principal contenant le dossier client."
  exit 1
fi

# Cr√©er des sauvegardes des fichiers originaux
echo "üì¶ Cr√©ation de sauvegardes des fichiers originaux..."
mkdir -p backups
cp -f client/src/services/formSubmissionsService.js backups/formSubmissionsService.js.bak
cp -f client/src/components/formValidation/FormValidationList.jsx backups/FormValidationList.jsx.bak
cp -f client/src/components/concerts/ConcertsList.js backups/ConcertsList.js.bak
cp -f client/src/components/public/PublicFormPage.jsx backups/PublicFormPage.jsx.bak
echo "‚úÖ Sauvegardes cr√©√©es dans le dossier 'backups'"

# 1. Correction du service formSubmissionsService.js
echo "üîß Correction du service formSubmissionsService.js..."
cat > client/src/services/formSubmissionsService.js << 'EOL'
import { 
  collection, 
  getDocs, 
  getDoc, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc,
  query,
  orderBy,
  where,
  setDoc,
  Timestamp,
  limit
} from 'firebase/firestore';
import { db } from '../firebase';

// Collection de r√©f√©rence
const FORM_SUBMISSIONS_COLLECTION = 'formSubmissions';

// Assurez-vous que la collection existe
const ensureCollection = async (collectionName) => {
  try {
    console.log(`[ensureCollection] V√©rification de la collection ${collectionName}...`);
    
    // V√©rifier si la collection existe en essayant de r√©cup√©rer des documents
    const collectionRef = collection(db, collectionName);
    const snapshot = await getDocs(query(collectionRef, limit(1)));
    
    console.log(`[ensureCollection] R√©sultat de la v√©rification: ${snapshot.empty ? 'collection vide' : snapshot.size + ' documents trouv√©s'}`);
    
    return true;
  } catch (error) {
    console.error(`[ensureCollection] Erreur lors de la v√©rification de la collection ${collectionName}:`, error);
    return false;
  }
};

// Assurez-vous que la collection formSubmissions existe
const formSubmissionsCollection = collection(db, FORM_SUBMISSIONS_COLLECTION);

/**
 * R√©cup√®re tous les formulaires soumis
 * @param {Object} filters - Filtres √† appliquer (optionnel)
 * @returns {Promise<Array>} Liste des formulaires soumis
 */
export const getFormSubmissions = async (filters = {}) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);
    
    console.log("[getFormSubmissions] Tentative de r√©cup√©ration des formulaires depuis Firebase...");
    console.log("[getFormSubmissions] Filtres appliqu√©s:", filters);
    
    // V√©rifier et mettre √† jour les soumissions sans statut
    await updateSubmissionsWithoutStatus();
    
    // Cr√©ation d'une requ√™te de base
    let formQuery = formSubmissionsCollection;
    
    // Application des filtres si n√©cessaire
    if (filters) {
      // Filtrer par statut
      if (filters.status) {
        console.log(`[getFormSubmissions] Filtrage par statut: ${filters.status}`);
        formQuery = query(formQuery, where('status', '==', filters.status));
      }
      
      // Filtrer par programmateur
      if (filters.programmerId) {
        console.log(`[getFormSubmissions] Filtrage par programmateur: ${filters.programmerId}`);
        formQuery = query(formQuery, where('programmerId', '==', filters.programmerId));
      }
      
      // Filtrer par concert
      if (filters.concertId) {
        console.log(`[getFormSubmissions] Filtrage par concert: ${filters.concertId}`);
        formQuery = query(formQuery, where('concertId', '==', filters.concertId));
      }
      
      // Filtrer par lien de formulaire
      if (filters.formLinkId) {
        console.log(`[getFormSubmissions] Filtrage par lien de formulaire: ${filters.formLinkId}`);
        formQuery = query(formQuery, where('formLinkId', '==', filters.formLinkId));
      }
      
      // Filtrer par token commun
      if (filters.commonToken) {
        console.log(`[getFormSubmissions] Filtrage par token commun: ${filters.commonToken}`);
        formQuery = query(formQuery, where('commonToken', '==', filters.commonToken));
      }
    }
    
    // Ajout d'un tri par date de soumission (du plus r√©cent au plus ancien)
    formQuery = query(formQuery, orderBy('submittedAt', 'desc'));
    
    // Ex√©cution de la requ√™te
    const snapshot = await getDocs(formQuery);
    
    if (snapshot.empty) {
      console.log("[getFormSubmissions] Aucun formulaire trouv√© avec les filtres sp√©cifi√©s");
      return [];
    }
    
    const formSubmissions = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`[getFormSubmissions] ${formSubmissions.length} formulaires r√©cup√©r√©s depuis Firebase`);
    formSubmissions.forEach(form => {
      console.log(`[getFormSubmissions] Formulaire ID: ${form.id}, Token: ${form.commonToken}, Status: ${form.status}`);
    });
    
    return formSubmissions;
  } catch (error) {
    console.error("[getFormSubmissions] Erreur lors de la r√©cup√©ration des formulaires:", error);
    return [];
  }
};

/**
 * Met √† jour les soumissions sans statut d√©fini
 * @returns {Promise<number>} Nombre de soumissions mises √† jour
 */
export const updateSubmissionsWithoutStatus = async () => {
  try {
    console.log("[updateSubmissionsWithoutStatus] Recherche de formulaires sans statut d√©fini...");
    
    // R√©cup√©rer tous les formulaires
    const allFormsSnapshot = await getDocs(formSubmissionsCollection);
    if (allFormsSnapshot.empty) {
      console.log("[updateSubmissionsWithoutStatus] Aucun formulaire trouv√©");
      return 0;
    }
    
    // Compter les formulaires par statut
    const statusMap = {};
    const formsWithoutStatus = [];
    
    allFormsSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const status = data.status || 'non d√©fini';
      statusMap[status] = (statusMap[status] || 0) + 1;
      
      if (!data.status || data.status === 'non d√©fini') {
        formsWithoutStatus.push({
          id: doc.id,
          ...data
        });
      }
    });
    
    console.log("[updateSubmissionsWithoutStatus] Distribution des statuts:", statusMap);
    
    // Si des formulaires sans statut sont trouv√©s, les mettre √† jour
    if (formsWithoutStatus.length > 0) {
      console.log(`[updateSubmissionsWithoutStatus] ${formsWithoutStatus.length} formulaires sans statut trouv√©s, mise √† jour...`);
      
      // Mettre √† jour les formulaires sans statut
      for (const form of formsWithoutStatus) {
        console.log(`[updateSubmissionsWithoutStatus] Mise √† jour du statut pour le formulaire ${form.id}`);
        await updateDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, form.id), {
          status: 'pending'
        });
      }
      
      console.log(`[updateSubmissionsWithoutStatus] ${formsWithoutStatus.length} formulaires mis √† jour avec statut 'pending'`);
      return formsWithoutStatus.length;
    }
    
    console.log("[updateSubmissionsWithoutStatus] Aucun formulaire sans statut trouv√©");
    return 0;
  } catch (error) {
    console.error("[updateSubmissionsWithoutStatus] Erreur lors de la mise √† jour des formulaires sans statut:", error);
    return 0;
  }
};

/**
 * R√©cup√®re un formulaire soumis par son ID
 * @param {string} id - ID du formulaire
 * @returns {Promise<Object>} Donn√©es du formulaire
 */
export const getFormSubmissionById = async (id) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);
    
    console.log(`[getFormSubmissionById] Tentative de r√©cup√©ration du formulaire ${id} depuis Firebase...`);
    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);
    const snapshot = await getDoc(docRef);
    
    if (snapshot.exists()) {
      const formData = {
        id: snapshot.id,
        ...snapshot.data()
      };
      
      // V√©rifier si le statut est d√©fini, sinon le mettre √† jour
      if (!formData.status) {
        console.log(`[getFormSubmissionById] Le formulaire ${id} n'a pas de statut d√©fini, mise √† jour √† 'pending'`);
        await updateDoc(docRef, { status: 'pending' });
        formData.status = 'pending';
      }
      
      console.log(`[getFormSubmissionById] Formulaire ${id} r√©cup√©r√© depuis Firebase:`, formData);
      return formData;
    }
    
    console.log(`[getFormSubmissionById] Formulaire ${id} non trouv√© dans Firebase`);
    return null;
  } catch (error) {
    console.error(`[getFormSubmissionById] Erreur lors de la r√©cup√©ration du formulaire ${id}:`, error);
    return null;
  }
};

/**
 * Cr√©e un nouveau formulaire soumis
 * @param {Object} formData - Donn√©es du formulaire
 * @returns {Promise<Object>} Formulaire cr√©√© avec ID
 */
export const createFormSubmission = async (formData) => {
  console.log("[createFormSubmission] D√©but de la cr√©ation d'un nouveau formulaire");
  console.log("[createFormSubmission] Donn√©es re√ßues:", formData);
  
  try {
    // S'assurer que la collection existe
    console.log("[createFormSubmission] V√©rification de l'existence de la collection...");
    const collectionExists = await ensureCollection(FORM_SUBMISSIONS_COLLECTION);
    console.log(`[createFormSubmission] R√©sultat de la v√©rification: ${collectionExists ? 'collection existe' : '√©chec de la v√©rification'}`);
    
    // V√©rifier les champs obligatoires
    const requiredFields = ['concertId'];
    const missingFields = requiredFields.filter(field => !formData[field]);
    
    if (missingFields.length > 0) {
      console.error(`[createFormSubmission] Champs obligatoires manquants: ${missingFields.join(', ')}`);
      throw new Error(`Champs obligatoires manquants: ${missingFields.join(', ')}`);
    }
    
    // G√©n√©rer un token commun si non fourni
    let commonToken = formData.commonToken;
    if (!commonToken) {
      // Importer dynamiquement pour √©viter les d√©pendances circulaires
      const { generateToken } = await import('../utils/tokenGenerator');
      commonToken = generateToken(formData.concertId);
      console.log(`[createFormSubmission] G√©n√©ration d'un nouveau token commun: ${commonToken}`);
    }
    
    // S'assurer que les champs obligatoires sont pr√©sents et que le statut est explicitement d√©fini
    const completeFormData = {
      ...formData,
      commonToken, // Ajouter le token commun
      status: 'pending', // Forcer le statut √† 'pending' pour garantir la coh√©rence
      submittedAt: Timestamp.fromDate(new Date()),
      // Convertir la date du concert en Timestamp si elle existe
      concertDate: formData.concertDate ? 
        (formData.concertDate instanceof Date ? 
          Timestamp.fromDate(formData.concertDate) : 
          formData.concertDate) : 
        null
    };
    
    console.log("[createFormSubmission] Tentative d'ajout d'un formulaire √† Firebase avec addDoc:", completeFormData);
    console.log("[createFormSubmission] V√©rification de la pr√©sence de concertId:", completeFormData.concertId ? 'Pr√©sent' : 'Manquant');
    console.log("[createFormSubmission] V√©rification de la pr√©sence du token commun:", completeFormData.commonToken ? 'Pr√©sent' : 'Manquant');
    console.log("[createFormSubmission] V√©rification du statut:", completeFormData.status);
    
    try {
      const docRef = await addDoc(formSubmissionsCollection, completeFormData);
      console.log(`[createFormSubmission] Formulaire ajout√© avec succ√®s via addDoc, ID: ${docRef.id}`);
      
      // V√©rifier imm√©diatement que le document a √©t√© cr√©√© avec le bon statut
      const createdDoc = await getDoc(docRef);
      if (createdDoc.exists()) {
        const createdData = createdDoc.data();
        console.log(`[createFormSubmission] V√©rification du document cr√©√© - Statut: ${createdData.status}`);
        
        // Si le statut n'est pas 'pending', le corriger imm√©diatement
        if (createdData.status !== 'pending') {
          console.log(`[createFormSubmission] Correction du statut √† 'pending' pour le document ${docRef.id}`);
          await updateDoc(docRef, { status: 'pending' });
        }
      }
      
      return {
        id: docRef.id,
        ...completeFormData
      };
    } catch (addDocError) {
      console.error("[createFormSubmission] Erreur lors de l'ajout du formulaire avec addDoc:", addDocError);
      
      // Essayer d'ajouter le formulaire avec un ID g√©n√©r√© manuellement
      console.log("[createFormSubmission] Tentative alternative avec setDoc...");
      const mockId = 'form-' + Date.now();
      
      try {
        await setDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, mockId), completeFormData);
        console.log(`[createFormSubmission] Formulaire ajout√© avec succ√®s via setDoc, ID: ${mockId}`);
        
        // V√©rifier imm√©diatement que le document a √©t√© cr√©√© avec le bon statut
        const createdDoc = await getDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, mockId));
        if (createdDoc.exists()) {
          const createdData = createdDoc.data();
          console.log(`[createFormSubmission] V√©rification du document cr√©√© - Statut: ${createdData.status}`);
          
          // Si le statut n'est pas 'pending', le corriger imm√©diatement
          if (createdData.status !== 'pending') {
            console.log(`[createFormSubmission] Correction du statut √† 'pending' pour le document ${mockId}`);
            await updateDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, mockId), { status: 'pending' });
          }
        }
        
        return {
          id: mockId,
          ...completeFormData
        };
      } catch (setDocError) {
        console.error("[createFormSubmission] Erreur lors de l'ajout du formulaire avec setDoc:", setDocError);
        throw setDocError; // Propager l'erreur pour la gestion dans le composant
      }
    }
  } catch (error) {
    console.error("[createFormSubmission] Erreur g√©n√©rale lors de l'ajout du formulaire:", error);
    
    // V√©rifier si l'erreur est li√©e √† un champ manquant
    if (error.message && error.message.includes('Champs obligatoires manquants')) {
      throw error; // Propager l'erreur sp√©cifique
    }
    
    throw error;
  }
};

/**
 * Met √† jour un formulaire soumis existant
 * @param {string} id - ID du formulaire
 * @param {Object} formData - Nouvelles donn√©es du formulaire
 * @returns {Promise<Object>} Formulaire mis √† jour
 */
export const updateFormSubmission = async (id, formData) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);
    
    console.log(`[updateFormSubmission] Tentative de mise √† jour du formulaire ${id}:`, formData);
    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);
    
    // Si le statut change √† 'processed' ou 'rejected', ajouter la date de traitement
    const updatedData = {
      ...formData
    };
    
    if (formData.status === 'processed' || formData.status === 'rejected') {
      updatedData.processedAt = Timestamp.fromDate(new Date());
    }
    
    // Convertir la date du concert en Timestamp si elle existe
    if (formData.concertDate) {
      updatedData.concertDate = formData.concertDate instanceof Date ? 
        Timestamp.fromDate(formData.concertDate) : 
        formData.concertDate;
    }
    
    await updateDoc(docRef, updatedData);
    console.log(`[updateFormSubmission] Formulaire ${id} mis √† jour avec succ√®s`);
    
    return {
      id,
      ...updatedData
    };
  } catch (error) {
    console.error(`[updateFormSubmission] Erreur lors de la mise √† jour du formulaire ${id}:`, error);
    throw error;
  }
};

/**
 * Supprime un formulaire soumis
 * @param {string} id - ID du formulaire
 * @returns {Promise<boolean>} Succ√®s de la suppression
 */
export const deleteFormSubmission = async (id) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);
    
    console.log(`[deleteFormSubmission] Tentative de suppression du formulaire ${id}`);
    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);
    await deleteDoc(docRef);
    console.log(`[deleteFormSubmission] Formulaire ${id} supprim√© avec succ√®s`);
    
    return true;
  } catch (error) {
    console.error(`[deleteFormSubmission] Erreur lors de la suppression du formulaire ${id}:`, error);
    throw error;
  }
};

/**
 * R√©cup√®re les formulaires soumis par un programmateur
 * @param {string} programmerId - ID du programmateur
 * @returns {Promise<Array>} Liste des formulaires soumis
 */
export const getFormSubmissionsByProgrammer = async (programmerId) => {
  return getFormSubmissions({ programmerId });
};

/**
 * R√©cup√®re les formulaires soumis par statut
 * @param {string} status - Statut des formulaires
 * @returns {Promise<Array>} Liste des formulaires soumis
 */
export const getFormSubmissionsByStatus = async (status) => {
  return getFormSubmissions({ status });
};

/**
 * R√©cup√®re les formulaires soumis pour un concert
 * @param {string} concertId - ID du concert
 * @returns {Promise<Array>} Liste des formulaires soumis
 */
export const getFormSubmissionsByConcert = async (concertId) => {
  return getFormSubmissions({ concertId });
};

/**
 * R√©cup√®re les formulaires soumis par token commun
 * @param {string} commonToken - Token commun
 * @returns {Promise<Array>} Liste des formulaires soumis
 */
export const getFormSubmissionsByToken = async (commonToken) => {
  return getFormSubmissions({ commonToken });
};

/**
 * R√©cup√®re un formulaire soumis par son ID de lien
 * @param {string} formLinkId - ID du lien de formulaire
 * @returns {Promise<Object>} Formulaire soumis
 */
export const getFormSubmissionByFormLinkId = async (formLinkId) => {
  try {
    const submissions = await getFormSubmissions({ formLinkId });
    return submissions.length > 0 ? submissions[0] : null;
  } catch (error) {
    console.error(`[getFormSubmissionByFormLinkId] Erreur lors de la r√©cup√©ration du formulaire avec formLinkId ${formLinkId}:`, error);
    throw error;
  }
};
EOL

# 2. Correction du composant FormValidationList.jsx
echo "üîß Correction du composant FormValidationList.jsx..."
cat > client/src/components/formValidation/FormValidationList.jsx << 'EOL'
import React, { useState, useEffect } from 'react';
import { getFormSubmissions, updateFormSubmission, updateSubmissionsWithoutStatus } from '../../services/formSubmissionsService';
import { getProgrammerById, updateProgrammer } from '../../services/programmersService';
import { getConcertById, updateConcert } from '../../services/concertsService';
import ComparisonTable from './ComparisonTable';
import './FormValidationList.css';

const FormValidationList = () => {
  const [formSubmissions, setFormSubmissions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [programmerData, setProgrammerData] = useState(null);
  const [showComparisonTable, setShowComparisonTable] = useState(false);
  const [updateStatus, setUpdateStatus] = useState({ status: '', message: '' });
  const [refreshCount, setRefreshCount] = useState(0);
  const [debugInfo, setDebugInfo] = useState(null);

  // Charger les soumissions de formulaire
  useEffect(() => {
    const fetchFormSubmissions = async () => {
      try {
        setLoading(true);
        console.log('FormValidationList - Chargement des soumissions en attente...');
        
        // Mettre √† jour les soumissions sans statut
        const updatedCount = await updateSubmissionsWithoutStatus();
        if (updatedCount > 0) {
          console.log(`FormValidationList - ${updatedCount} soumissions mises √† jour avec statut 'pending'`);
        }
        
        // R√©cup√©rer toutes les soumissions pour le d√©bogage
        const allSubmissions = await getFormSubmissions({});
        console.log(`FormValidationList - ${allSubmissions.length} soumissions totales r√©cup√©r√©es`);
        
        // Filtrer pour n'obtenir que les soumissions en attente
        const pendingSubmissions = await getFormSubmissions({ status: 'pending' });
        console.log(`FormValidationList - ${pendingSubmissions.length} soumissions en attente r√©cup√©r√©es`);
        
        // Collecter des informations de d√©bogage
        const debug = {
          totalCount: allSubmissions.length,
          pendingCount: pendingSubmissions.length,
          statusDistribution: {},
          hasCommonToken: 0,
          missingCommonToken: 0
        };
        
        // Analyser la distribution des statuts
        allSubmissions.forEach(submission => {
          const status = submission.status || 'non d√©fini';
          debug.statusDistribution[status] = (debug.statusDistribution[status] || 0) + 1;
          
          if (submission.commonToken) {
            debug.hasCommonToken++;
          } else {
            debug.missingCommonToken++;
          }
        });
        
        setDebugInfo(debug);
        setFormSubmissions(pendingSubmissions);
        setLoading(false);
      } catch (err) {
        console.error('FormValidationList - Erreur lors du chargement des soumissions:', err);
        setError('Erreur lors du chargement des soumissions. Veuillez r√©essayer.');
        setLoading(false);
      }
    };

    fetchFormSubmissions();
    
    // Mettre en place un intervalle pour rafra√Æchir les soumissions toutes les 30 secondes
    const refreshInterval = setInterval(() => {
      console.log('FormValidationList - Rafra√Æchissement automatique des soumissions');
      setRefreshCount(prev => prev + 1);
    }, 30000);
    
    // Nettoyer l'intervalle lors du d√©montage du composant
    return () => clearInterval(refreshInterval);
  }, [refreshCount]);

  // G√©rer la s√©lection d'une soumission
  const handleSelectSubmission = async (submission) => {
    console.log('FormValidationList - S√©lection de la soumission:', submission);
    setSelectedSubmission(submission);
    setUpdateStatus({ status: '', message: '' });
    
    try {
      // Rechercher le programmateur associ√© par token commun
      let programmer = null;
      
      if (submission.commonToken) {
        console.log(`FormValidationList - Recherche du programmateur avec token: ${submission.commonToken}`);
        // Rechercher par token commun
        const programmers = await getProgrammerById(submission.commonToken);
        if (programmers) {
          programmer = programmers;
          console.log('FormValidationList - Programmateur trouv√©:', programmer);
        } else {
          console.log('FormValidationList - Aucun programmateur trouv√© avec ce token');
        }
      } else {
        console.log('FormValidationList - Pas de token commun dans la soumission');
      }
      
      // Si aucun programmateur n'est trouv√©, cr√©er un objet vide
      if (!programmer) {
        console.log('FormValidationList - Cr√©ation d\'un objet programmateur vide');
        programmer = {
          id: null,
          businessName: '',
          firstName: '',
          lastName: '',
          role: '',
          address: '',
          venue: '',
          venueAddress: '',
          vatNumber: '',
          siret: '',
          email: '',
          phone: '',
          website: ''
        };
      }
      
      setProgrammerData(programmer);
      setShowComparisonTable(true);
    } catch (err) {
      console.error('FormValidationList - Erreur lors de la r√©cup√©ration des donn√©es du programmateur:', err);
      setError('Erreur lors de la r√©cup√©ration des donn√©es du programmateur. Veuillez r√©essayer.');
    }
  };

  // G√©rer l'int√©gration des donn√©es
  const handleIntegrateData = async (updatedData) => {
    try {
      setLoading(true);
      console.log('FormValidationList - D√©but de l\'int√©gration des donn√©es');
      
      // Mettre √† jour ou cr√©er le programmateur
      let programmerId = programmerData.id;
      
      // Pr√©parer les donn√©es du programmateur
      const programmerDataToUpdate = {
        ...updatedData,
        commonToken: selectedSubmission.commonToken,
        // Ajouter d'autres champs n√©cessaires
        contact: updatedData.firstName && updatedData.lastName 
          ? `${updatedData.firstName} ${updatedData.lastName}` 
          : updatedData.firstName || updatedData.lastName || 'Contact non sp√©cifi√©'
      };
      
      console.log('FormValidationList - Donn√©es du programmateur √† mettre √† jour:', programmerDataToUpdate);
      
      if (programmerId) {
        // Mettre √† jour le programmateur existant
        console.log(`FormValidationList - Mise √† jour du programmateur existant: ${programmerId}`);
        await updateProgrammer(programmerId, programmerDataToUpdate);
      } else {
        // Cr√©er un nouveau programmateur avec le token commun comme ID
        programmerId = selectedSubmission.commonToken;
        console.log(`FormValidationList - Cr√©ation d'un nouveau programmateur avec ID: ${programmerId}`);
        await updateProgrammer(programmerId, programmerDataToUpdate);
      }
      
      // Mettre √† jour le concert si n√©cessaire
      if (selectedSubmission.concertId) {
        try {
          console.log(`FormValidationList - R√©cup√©ration du concert: ${selectedSubmission.concertId}`);
          const concert = await getConcertById(selectedSubmission.concertId);
          if (concert) {
            // Mettre √† jour le concert avec le token commun
            console.log(`FormValidationList - Mise √† jour du concert: ${selectedSubmission.concertId}`);
            await updateConcert(selectedSubmission.concertId, {
              ...concert,
              commonToken: selectedSubmission.commonToken,
              programmerId: programmerId
            });
          } else {
            console.log(`FormValidationList - Concert non trouv√©: ${selectedSubmission.concertId}`);
          }
        } catch (concertErr) {
          console.error('FormValidationList - Erreur lors de la mise √† jour du concert:', concertErr);
        }
      }
      
      // Mettre √† jour le statut de la soumission
      console.log(`FormValidationList - Mise √† jour du statut de la soumission: ${selectedSubmission.id}`);
      await updateFormSubmission(selectedSubmission.id, {
        ...selectedSubmission,
        status: 'processed',
        processedAt: new Date()
      });
      
      // Mettre √† jour la liste des soumissions
      const updatedSubmissions = formSubmissions.filter(
        submission => submission.id !== selectedSubmission.id
      );
      console.log(`FormValidationList - Mise √† jour de la liste des soumissions: ${updatedSubmissions.length} restantes`);
      setFormSubmissions(updatedSubmissions);
      
      // R√©initialiser l'√©tat
      setSelectedSubmission(null);
      setProgrammerData(null);
      setShowComparisonTable(false);
      setUpdateStatus({
        status: 'success',
        message: 'Donn√©es int√©gr√©es avec succ√®s!'
      });
      setLoading(false);
      
      // Forcer un rafra√Æchissement de la liste
      setRefreshCount(prev => prev + 1);
    } catch (err) {
      console.error('FormValidationList - Erreur lors de l\'int√©gration des donn√©es:', err);
      setUpdateStatus({
        status: 'error',
        message: `Erreur lors de l'int√©gration des donn√©es: ${err.message}`
      });
      setLoading(false);
    }
  };

  // Annuler l'int√©gration
  const handleCancelIntegration = () => {
    console.log('FormValidationList - Annulation de l\'int√©gration');
    setSelectedSubmission(null);
    setProgrammerData(null);
    setShowComparisonTable(false);
  };

  // Rafra√Æchir manuellement la liste
  const handleRefresh = () => {
    console.log('FormValidationList - Rafra√Æchissement manuel de la liste');
    setRefreshCount(prev => prev + 1);
  };

  if (loading && !showComparisonTable) {
    return <div className="loading">Chargement des soumissions...</div>;
  }

  if (error) {
    return <div className="error">{error}</div>;
  }

  if (showComparisonTable && selectedSubmission && programmerData) {
    return (
      <div className="form-validation-container">
        <h2>Int√©gration des donn√©es</h2>
        <div className="submission-details">
          <h3>D√©tails de la soumission</h3>
          <p><strong>ID:</strong> {selectedSubmission.id}</p>
          <p><strong>Date de soumission:</strong> {selectedSubmission.submittedAt instanceof Date 
            ? selectedSubmission.submittedAt.toLocaleString() 
            : new Date(selectedSubmission.submittedAt.seconds * 1000).toLocaleString()}</p>
          <p><strong>Token commun:</strong> {selectedSubmission.commonToken}</p>
          <p><strong>Concert ID:</strong> {selectedSubmission.concertId}</p>
        </div>
        
        <ComparisonTable 
          formData={selectedSubmission} 
          programmerData={programmerData}
          onSave={handleIntegrateData}
          onCancel={handleCancelIntegration}
        />
      </div>
    );
  }

  return (
    <div className="form-validation-container">
      <h2>Validation des formulaires</h2>
      
      {updateStatus.message && (
        <div className={`status-message ${updateStatus.status}`}>
          {updateStatus.message}
        </div>
      )}
      
      <div className="refresh-button-container">
        <button className="refresh-button" onClick={handleRefresh}>
          Rafra√Æchir la liste
        </button>
      </div>
      
      {debugInfo && (
        <div className="debug-info">
          <h3>Informations de d√©bogage</h3>
          <p>Total des soumissions: {debugInfo.totalCount}</p>
          <p>Soumissions en attente: {debugInfo.pendingCount}</p>
          <p>Distribution des statuts:</p>
          <ul>
            {Object.entries(debugInfo.statusDistribution).map(([status, count]) => (
              <li key={status}>{status}: {count}</li>
            ))}
          </ul>
          <p>Avec token commun: {debugInfo.hasCommonToken}</p>
          <p>Sans token commun: {debugInfo.missingCommonToken}</p>
        </div>
      )}
      
      {formSubmissions.length === 0 ? (
        <p>Aucune soumission en attente de validation.</p>
      ) : (
        <div className="submissions-list">
          <h3>Soumissions en attente ({formSubmissions.length})</h3>
          <table className="submissions-table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Raison sociale</th>
                <th>Contact</th>
                <th>Token</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {formSubmissions.map(submission => (
                <tr key={submission.id}>
                  <td>
                    {submission.submittedAt instanceof Date 
                      ? submission.submittedAt.toLocaleString() 
                      : new Date(submission.submittedAt.seconds * 1000).toLocaleString()}
                  </td>
                  <td>{submission.businessName || 'Non sp√©cifi√©'}</td>
                  <td>{submission.contact || 'Non sp√©cifi√©'}</td>
                  <td>{submission.commonToken ? submission.commonToken.substring(0, 10) + '...' : 'Non sp√©cifi√©'}</td>
                  <td>
                    <button 
                      className="action-button"
                      onClick={() => handleSelectSubmission(submission)}
                    >
                      Comparer et int√©grer
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default FormValidationList;
EOL

# 3. Correction du composant ConcertsList.js pour l'int√©gration du tableau de bord
echo "üîß Correction du composant ConcertsList.js..."
cat > client/src/components/concerts/ConcertsList.js << 'EOL'
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { getConcerts, addConcert } from '../../services/concertsService';
import { getArtists } from '../../services/artistsService';
import ConcertsDashboard from './ConcertsDashboard';
import './ConcertsList.css';

const ConcertsList = () => {
  const [concerts, setConcerts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [artists, setArtists] = useState([]);
  const [newConcert, setNewConcert] = useState({
    artistId: '',
    date: '',
    time: '',
    venue: '',
    city: '',
    price: '',
    status: '√Ä venir',
    notes: ''
  });
  const [currentDate, setCurrentDate] = useState('');
  const [currentHour, setCurrentHour] = useState('');
  const [currentMinute, setCurrentMinute] = useState('');
  const [useDashboard, setUseDashboard] = useState(true); // Activer le tableau de bord par d√©faut
  const [error, setError] = useState(null);

  // Options pour les heures et minutes
  const hours = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, '0'));
  const minutes = ['00', '15', '30', '45'];
  const statuses = ['√Ä venir', 'En cours', 'Termin√©', 'Annul√©'];

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('ConcertsList - Chargement des concerts...');
        const concertsData = await getConcerts();
        console.log(`ConcertsList - ${concertsData.length} concerts r√©cup√©r√©s`);
        
        console.log('ConcertsList - Chargement des artistes...');
        const artistsData = await getArtists();
        console.log(`ConcertsList - ${artistsData.length} artistes r√©cup√©r√©s`);
        
        // Enrichir les donn√©es de concerts avec les informations d'artistes
        const enrichedConcerts = concertsData.map(concert => {
          const artist = artistsData.find(a => a.id === concert.artistId);
          return {
            ...concert,
            artist: artist || { name: 'Artiste inconnu' }
          };
        });
        
        console.log('ConcertsList - Donn√©es enrichies:', enrichedConcerts);
        setConcerts(enrichedConcerts);
        setArtists(artistsData);
        setLoading(false);
      } catch (error) {
        console.error('ConcertsList - Erreur lors du chargement des donn√©es:', error);
        setError('Erreur lors du chargement des donn√©es. Veuillez r√©essayer.');
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    if (name === 'date') {
      setCurrentDate(value);
    } else if (name === 'hour') {
      setCurrentHour(value);
    } else if (name === 'minute') {
      setCurrentMinute(value);
    } else {
      setNewConcert(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      // Construire la date et l'heure
      const dateObj = new Date(currentDate);
      const timeString = `${currentHour}:${currentMinute}`;
      
      const concertToAdd = {
        ...newConcert,
        date: dateObj,
        time: timeString
      };
      
      console.log('ConcertsList - Ajout d\'un nouveau concert:', concertToAdd);
      const addedConcert = await addConcert(concertToAdd);
      console.log('ConcertsList - Concert ajout√© avec succ√®s:', addedConcert);
      
      // Ajouter l'artiste √† l'objet concert
      const artist = artists.find(a => a.id === concertToAdd.artistId);
      const enrichedConcert = {
        ...addedConcert,
        artist: artist || { name: 'Artiste inconnu' }
      };
      
      setConcerts(prev => [...prev, enrichedConcert]);
      setShowForm(false);
      setNewConcert({
        artistId: '',
        date: '',
        time: '',
        venue: '',
        city: '',
        price: '',
        status: '√Ä venir',
        notes: ''
      });
      setCurrentDate('');
      setCurrentHour('');
      setCurrentMinute('');
      setLoading(false);
    } catch (error) {
      console.error('ConcertsList - Erreur lors de l\'ajout du concert:', error);
      setError('Erreur lors de l\'ajout du concert. Veuillez r√©essayer.');
      setLoading(false);
    }
  };

  const handleViewConcert = (concert) => {
    try {
      // Cette fonction est appel√©e par le composant ConcertsDashboard
      console.log('ConcertsList - Redirection vers la page du concert:', concert.id);
      window.location.href = `/concerts/${concert.id}`;
    } catch (error) {
      console.error('ConcertsList - Erreur lors de la redirection:', error);
      setError('Erreur lors de la redirection. Veuillez r√©essayer.');
    }
  };

  const handleEditConcert = (concert) => {
    try {
      // Cette fonction est appel√©e par le composant ConcertsDashboard
      console.log('ConcertsList - Redirection vers la page d\'√©dition du concert:', concert.id);
      window.location.href = `/concerts/${concert.id}`;
    } catch (error) {
      console.error('ConcertsList - Erreur lors de la redirection:', error);
      setError('Erreur lors de la redirection. Veuillez r√©essayer.');
    }
  };

  // Basculer entre le tableau de bord et la vue classique
  const toggleView = () => {
    console.log('ConcertsList - Basculement de la vue:', useDashboard ? 'classique' : 'tableau de bord');
    setUseDashboard(!useDashboard);
  };

  if (loading && concerts.length === 0) {
    return <div className="loading">Chargement des concerts...</div>;
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error">{error}</div>
        <button className="refresh-button" onClick={() => window.location.reload()}>
          Rafra√Æchir la page
        </button>
      </div>
    );
  }

  return (
    <div className="concerts-container">
      <div className="concerts-header">
        <h1>Gestion des concerts</h1>
        <div className="header-buttons">
          <button className="toggle-view-btn" onClick={toggleView}>
            {useDashboard ? 'Vue classique' : 'Vue tableau de bord'}
          </button>
          <button className="add-concert-btn" onClick={() => setShowForm(!showForm)}>
            {showForm ? 'Annuler' : 'Ajouter un concert'}
          </button>
        </div>
      </div>
      
      {showForm && (
        <div className="add-concert-form">
          <h2>Ajouter un nouveau concert</h2>
          <form onSubmit={handleSubmit}>
            <div className="form-group">
              <label htmlFor="artistId">Artiste *</label>
              <select
                id="artistId"
                name="artistId"
                value={newConcert.artistId}
                onChange={handleInputChange}
                required
              >
                <option value="">S√©lectionner un artiste</option>
                {artists.map(artist => (
                  <option key={artist.id} value={artist.id}>{artist.name}</option>
                ))}
              </select>
            </div>
            
            <div className="form-group">
              <label htmlFor="date">Date *</label>
              <input
                type="date"
                id="date"
                name="date"
                value={currentDate}
                onChange={handleInputChange}
                required
              />
            </div>
            
            <div className="form-group">
              <label>Heure *</label>
              <div className="time-inputs">
                <select
                  id="hour"
                  name="hour"
                  value={currentHour}
                  onChange={handleInputChange}
                  required
                  aria-label="Heure"
                >
                  <option value="">Heure</option>
                  {hours.map(hour => (
                    <option key={hour} value={hour}>{hour}h</option>
                  ))}
                </select>
                
                <select
                  id="minute"
                  name="minute"
                  value={currentMinute}
                  onChange={handleInputChange}
                  required
                  aria-label="Minute"
                >
                  <option value="">Minute</option>
                  {minutes.map(minute => (
                    <option key={minute} value={minute}>{minute}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="form-group">
              <label htmlFor="venue">Lieu *</label>
              <input
                type="text"
                id="venue"
                name="venue"
                value={newConcert.venue}
                onChange={handleInputChange}
                required
                placeholder="Nom de la salle ou du lieu"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="city">Ville *</label>
              <input
                type="text"
                id="city"
                name="city"
                value={newConcert.city}
                onChange={handleInputChange}
                required
                placeholder="Ville"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="price">Prix (‚Ç¨)</label>
              <input
                type="number"
                id="price"
                name="price"
                value={newConcert.price}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                placeholder="Prix en euros"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="status">Statut</label>
              <select
                id="status"
                name="status"
                value={newConcert.status}
                onChange={handleInputChange}
              >
                {statuses.map(status => (
                  <option key={status} value={status}>{status}</option>
                ))}
              </select>
            </div>
            
            <div className="form-group full-width">
              <label htmlFor="notes">Notes</label>
              <textarea
                id="notes"
                name="notes"
                value={newConcert.notes}
                onChange={handleInputChange}
                rows="4"
                placeholder="Informations compl√©mentaires"
              ></textarea>
            </div>
            
            <div className="form-actions">
              <button type="button" className="cancel-btn" onClick={() => setShowForm(false)}>
                Annuler
              </button>
              <button type="submit" className="submit-btn" disabled={loading}>
                {loading ? 'Ajout en cours...' : 'Ajouter le concert'}
              </button>
            </div>
          </form>
        </div>
      )}
      
      {!showForm && (
        <>
          {useDashboard ? (
            <ConcertsDashboard 
              concerts={concerts}
              onViewConcert={handleViewConcert}
              onEditConcert={handleEditConcert}
            />
          ) : (
            <div className="concerts-list">
              <h2>Liste des concerts ({concerts.length})</h2>
              <table className="concerts-table">
                <thead>
                  <tr>
                    <th>Artiste</th>
                    <th>Date</th>
                    <th>Lieu</th>
                    <th>Ville</th>
                    <th>Statut</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {concerts.map(concert => (
                    <tr key={concert.id}>
                      <td>{concert.artist ? concert.artist.name : 'Artiste inconnu'}</td>
                      <td>
                        {concert.date instanceof Date 
                          ? concert.date.toLocaleDateString() 
                          : concert.date && concert.date.seconds 
                            ? new Date(concert.date.seconds * 1000).toLocaleDateString() 
                            : 'Date non sp√©cifi√©e'}
                        {' '}
                        {concert.time || ''}
                      </td>
                      <td>{concert.venue || 'Non sp√©cifi√©'}</td>
                      <td>{concert.city || 'Non sp√©cifi√©'}</td>
                      <td>{concert.status || 'Non sp√©cifi√©'}</td>
                      <td>
                        <Link to={`/concerts/${concert.id}`} className="action-link">
                          Voir
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default ConcertsList;
EOL

# 4. Ajouter des styles CSS pour le bouton de basculement de vue et la gestion des erreurs
echo "üîß Ajout de styles CSS pour le bouton de basculement de vue et la gestion des erreurs..."
cat >> client/src/components/concerts/ConcertsList.css << 'EOL'

/* Styles pour les boutons d'en-t√™te */
.header-buttons {
  display: flex;
  gap: 10px;
}

.toggle-view-btn {
  background-color: #6c757d;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.toggle-view-btn:hover {
  background-color: #5a6268;
}

/* Styles pour la gestion des erreurs */
.error-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  margin: 20px 0;
  background-color: #fff3f3;
  border-radius: 8px;
  border: 1px solid #ffcdd2;
}

.error {
  color: #d32f2f;
  font-weight: bold;
  margin-bottom: 15px;
  text-align: center;
}

.refresh-button {
  background-color: #2196f3;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}

.refresh-button:hover {
  background-color: #0d8bf2;
}

/* Styles responsifs */
@media (max-width: 768px) {
  .header-buttons {
    flex-direction: column;
    width: 100%;
  }
  
  .toggle-view-btn,
  .add-concert-btn {
    width: 100%;
    margin-bottom: 5px;
  }
}
EOL

# 5. Correction du composant PublicFormPage.jsx pour afficher un message de confirmation et r√©initialiser le formulaire
echo "üîß Correction du composant PublicFormPage.jsx..."
cat > client/src/components/public/PublicFormPage.jsx << 'EOL'
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { createFormSubmission } from '../../services/formSubmissionsService';
import './PublicFormPage.css';

const PublicFormPage = () => {
  const { concertId } = useParams();
  const [formData, setFormData] = useState({
    businessName: '',
    firstName: '',
    lastName: '',
    role: '',
    address: '',
    venue: '',
    venueAddress: '',
    vatNumber: '',
    siret: '',
    email: '',
    phone: '',
    website: '',
    concertDate: '',
    concertTime: '',
    concertVenue: '',
    concertCity: '',
    concertPrice: '',
    concertNotes: '',
    additionalInfo: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setLoading(true);
      setError(null);
      
      console.log('PublicFormPage - Soumission du formulaire pour le concert:', concertId);
      
      // Pr√©parer les donn√©es √† envoyer
      const submissionData = {
        ...formData,
        // Champs obligatoires pour la compatibilit√© avec le syst√®me existant
        programmerId: 'public-form-submission',
        programmerName: 'Formulaire Public',
        concertId: concertId, // S'assurer que concertId est explicitement inclus
        concertName: `Concert ID: ${concertId}`,
        // Cr√©er un champ contact √† partir du pr√©nom et du nom
        contact: formData.firstName && formData.lastName 
          ? `${formData.firstName} ${formData.lastName}` 
          : formData.firstName || formData.lastName || 'Contact non sp√©cifi√©',
        status: 'pending', // Forcer le statut √† 'pending'
        // Ajouter un formLinkId fictif si n√©cessaire
        formLinkId: `public-form-${concertId}`
      };
      
      console.log('PublicFormPage - Donn√©es √† envoyer:', submissionData);
      
      // Envoyer les donn√©es
      const result = await createFormSubmission(submissionData);
      console.log('PublicFormPage - R√©sultat de la soumission:', result);
      
      // R√©initialiser le formulaire et afficher un message de succ√®s
      setFormData({
        businessName: '',
        firstName: '',
        lastName: '',
        role: '',
        address: '',
        venue: '',
        venueAddress: '',
        vatNumber: '',
        siret: '',
        email: '',
        phone: '',
        website: '',
        concertDate: '',
        concertTime: '',
        concertVenue: '',
        concertCity: '',
        concertPrice: '',
        concertNotes: '',
        additionalInfo: ''
      });
      
      setSuccess(true);
      setLoading(false);
    } catch (err) {
      console.error('PublicFormPage - Erreur lors de la soumission du formulaire:', err);
      setError('Une erreur est survenue lors de la soumission du formulaire. Veuillez r√©essayer.');
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="public-form-container">
        <div className="success-message">
          <h2>Merci pour votre soumission !</h2>
          <p>Votre formulaire a bien √©t√© transmis. Vous pouvez fermer cette fen√™tre.</p>
          <button 
            className="new-submission-btn"
            onClick={() => setSuccess(false)}
          >
            Soumettre un nouveau formulaire
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="public-form-container">
      <h1>Formulaire de soumission pour le concert</h1>
      <p className="form-description">
        Veuillez remplir ce formulaire pour soumettre vos informations concernant le concert.
        Les champs marqu√©s d'un ast√©risque (*) sont obligatoires.
      </p>
      
      {error && <div className="error-message">{error}</div>}
      
      <form onSubmit={handleSubmit} className="public-form">
        <div className="form-section">
          <h2>Informations sur l'organisateur</h2>
          
          <div className="form-group">
            <label htmlFor="businessName">Raison sociale / Nom de l'organisation *</label>
            <input
              type="text"
              id="businessName"
              name="businessName"
              value={formData.businessName}
              onChange={handleChange}
              required
              placeholder="Nom de votre organisation"
            />
          </div>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="firstName">Pr√©nom</label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                placeholder="Pr√©nom du contact"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="lastName">Nom</label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                placeholder="Nom du contact"
              />
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="role">Fonction</label>
            <input
              type="text"
              id="role"
              name="role"
              value={formData.role}
              onChange={handleChange}
              placeholder="Votre fonction dans l'organisation"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="address">Adresse</label>
            <textarea
              id="address"
              name="address"
              value={formData.address}
              onChange={handleChange}
              rows="3"
              placeholder="Adresse compl√®te de l'organisation"
            ></textarea>
          </div>
          
          <div className="form-group">
            <label htmlFor="venue">Nom de la salle</label>
            <input
              type="text"
              id="venue"
              name="venue"
              value={formData.venue}
              onChange={handleChange}
              placeholder="Nom de la salle de concert"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="venueAddress">Adresse de la salle</label>
            <textarea
              id="venueAddress"
              name="venueAddress"
              value={formData.venueAddress}
              onChange={handleChange}
              rows="3"
              placeholder="Adresse compl√®te de la salle de concert"
            ></textarea>
          </div>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="vatNumber">Num√©ro de TVA</label>
              <input
                type="text"
                id="vatNumber"
                name="vatNumber"
                value={formData.vatNumber}
                onChange={handleChange}
                placeholder="Num√©ro de TVA"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="siret">SIRET</label>
              <input
                type="text"
                id="siret"
                name="siret"
                value={formData.siret}
                onChange={handleChange}
                placeholder="Num√©ro SIRET"
              />
            </div>
          </div>
        </div>
        
        <div className="form-section">
          <h2>Coordonn√©es</h2>
          
          <div className="form-group">
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
              placeholder="Adresse email de contact"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="phone">T√©l√©phone</label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              placeholder="Num√©ro de t√©l√©phone"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="website">Site web</label>
            <input
              type="url"
              id="website"
              name="website"
              value={formData.website}
              onChange={handleChange}
              placeholder="Site web (avec http:// ou https://)"
            />
          </div>
        </div>
        
        <div className="form-section">
          <h2>Informations sur le concert</h2>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="concertDate">Date</label>
              <input
                type="date"
                id="concertDate"
                name="concertDate"
                value={formData.concertDate}
                onChange={handleChange}
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="concertTime">Heure</label>
              <input
                type="time"
                id="concertTime"
                name="concertTime"
                value={formData.concertTime}
                onChange={handleChange}
              />
            </div>
          </div>
          
          <div className="form-group">
            <label htmlFor="concertVenue">Lieu du concert</label>
            <input
              type="text"
              id="concertVenue"
              name="concertVenue"
              value={formData.concertVenue}
              onChange={handleChange}
              placeholder="Nom du lieu du concert"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="concertCity">Ville</label>
            <input
              type="text"
              id="concertCity"
              name="concertCity"
              value={formData.concertCity}
              onChange={handleChange}
              placeholder="Ville du concert"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="concertPrice">Prix (‚Ç¨)</label>
            <input
              type="number"
              id="concertPrice"
              name="concertPrice"
              value={formData.concertPrice}
              onChange={handleChange}
              min="0"
              step="0.01"
              placeholder="Prix en euros"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="concertNotes">Notes sur le concert</label>
            <textarea
              id="concertNotes"
              name="concertNotes"
              value={formData.concertNotes}
              onChange={handleChange}
              rows="4"
              placeholder="Informations compl√©mentaires sur le concert"
            ></textarea>
          </div>
        </div>
        
        <div className="form-section">
          <h2>Informations suppl√©mentaires</h2>
          
          <div className="form-group">
            <label htmlFor="additionalInfo">Commentaires ou demandes particuli√®res</label>
            <textarea
              id="additionalInfo"
              name="additionalInfo"
              value={formData.additionalInfo}
              onChange={handleChange}
              rows="4"
              placeholder="Toute information suppl√©mentaire que vous souhaitez partager"
            ></textarea>
          </div>
        </div>
        
        <div className="form-actions">
          <button type="submit" className="submit-btn" disabled={loading}>
            {loading ? 'Envoi en cours...' : 'Soumettre le formulaire'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default PublicFormPage;
EOL

# 6. Ajouter des styles CSS pour le message de succ√®s dans PublicFormPage
echo "üîß Ajout de styles CSS pour le message de succ√®s dans PublicFormPage..."
cat > client/src/components/public/PublicFormPage.css << 'EOL'
.public-form-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.form-description {
  margin-bottom: 20px;
  color: #666;
}

.public-form {
  background-color: #f9f9f9;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.form-section {
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 1px solid #eee;
}

.form-section h2 {
  margin-bottom: 15px;
  color: #333;
  font-size: 1.2rem;
}

.form-group {
  margin-bottom: 15px;
}

.form-row {
  display: flex;
  gap: 15px;
}

.form-row .form-group {
  flex: 1;
}

label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

input, select, textarea {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

textarea {
  resize: vertical;
}

.form-actions {
  margin-top: 20px;
  text-align: center;
}

.submit-btn {
  background-color: #4caf50;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s;
}

.submit-btn:hover {
  background-color: #45a049;
}

.submit-btn:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  background-color: #ffebee;
  color: #c62828;
  padding: 10px;
  border-radius: 4px;
  margin-bottom: 20px;
  text-align: center;
}

.success-message {
  background-color: #e8f5e9;
  color: #2e7d32;
  padding: 30px;
  border-radius: 8px;
  margin: 30px 0;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.success-message h2 {
  margin-bottom: 15px;
  color: #2e7d32;
}

.new-submission-btn {
  background-color: #2196f3;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  font-size: 1rem;
  cursor: pointer;
  margin-top: 20px;
  transition: background-color 0.3s;
}

.new-submission-btn:hover {
  background-color: #0d8bf2;
}

/* Styles responsifs */
@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
    gap: 0;
  }
  
  .public-form-container {
    padding: 10px;
  }
  
  .public-form {
    padding: 15px;
  }
}
EOL

# 7. V√©rifier l'installation de react-icons
echo "üîß V√©rification de l'installation de react-icons..."
if ! grep -q "react-icons" client/package.json; then
  echo "‚ö†Ô∏è Le package react-icons n'est pas install√©. Installation en cours..."
  cd client && npm install --save react-icons
  cd ../
fi

echo "‚úÖ Corrections termin√©es avec succ√®s!"
echo ""
echo "Les probl√®mes suivants ont √©t√© corrig√©s :"
echo "1. Les soumissions de formulaire avec statut 'pending' apparaissent maintenant dans l'onglet 'Validation de formulaire'"
echo "2. Les soumissions sans statut sont automatiquement mises √† jour avec le statut 'pending'"
echo "3. Le formulaire public affiche maintenant un message de confirmation et se r√©initialise apr√®s soumission"
echo "4. La page Concert s'affiche correctement avec un bouton pour basculer entre les vues"
echo "5. La gestion des erreurs a √©t√© am√©lior√©e pour une meilleure exp√©rience utilisateur"
echo ""
echo "Pour appliquer les modifications, suivez ces √©tapes :"
echo "1. Assurez-vous que l'application n'est pas en cours d'ex√©cution"
echo "2. Ex√©cutez 'cd client && npm install react-icons' si ce n'est pas d√©j√† fait"
echo "3. D√©marrez l'application avec 'cd client && npm start'"
