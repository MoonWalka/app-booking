import { 
  collection, 
  getDocs, 
  getDoc, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc,
  query,
  orderBy,
  setDoc,
  writeBatch
} from 'firebase/firestore';
import { db } from '../firebase';

// Stockage local pour les artistes en cas d'échec de Firebase
const LOCAL_STORAGE_KEY = 'app_booking_artists_cache';

// Fonction pour sauvegarder les artistes dans le stockage local
const saveArtistsToLocalStorage = (artists) => {
  try {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(artists));
    console.log('Artistes sauvegardés dans le stockage local');
  } catch (error) {
    console.error('Erreur lors de la sauvegarde des artistes dans le stockage local:', error);
  }
};

// Fonction pour récupérer les artistes du stockage local
const getArtistsFromLocalStorage = () => {
  try {
    const cachedArtists = localStorage.getItem(LOCAL_STORAGE_KEY);
    return cachedArtists ? JSON.parse(cachedArtists) : null;
  } catch (error) {
    console.error('Erreur lors de la récupération des artistes du stockage local:', error);
    return null;
  }
};

// Assurez-vous que la collection existe
const ensureCollection = async (collectionName) => {
  try {
    // Vérifier si la collection existe en essayant de récupérer des documents
    const collectionRef = collection(db, collectionName);
    const snapshot = await getDocs(query(collectionRef, orderBy('name')));
    
    // Si la collection n'existe pas ou est vide, créer un document initial
    if (snapshot.empty) {
      console.log(`Collection ${collectionName} vide, création d'un document initial...`);
      const initialDoc = {
        name: "Artiste exemple",
        genre: "Rock",
        location: "Paris",
        members: 1,
        contactEmail: "exemple@email.com",
        bio: "Ceci est un artiste exemple créé automatiquement.",
        createdAt: new Date()
      };
      
      await addDoc(collectionRef, initialDoc);
      console.log(`Document initial créé dans la collection ${collectionName}`);
    }
    
    return true;
  } catch (error) {
    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);
    return false;
  }
};

// Données simulées pour le fallback en cas d'erreur d'authentification
const mockArtists = [
  {
    id: 'mock-artist-1',
    name: 'The Weeknd',
    genre: 'R&B/Pop',
    location: 'Toronto, Canada',
    members: 1,
    contactEmail: 'contact@theweeknd.com',
    contactPhone: '+1 123 456 7890',
    bio: 'Abel Makkonen Tesfaye, connu sous le nom de The Weeknd, est un auteur-compositeur-interprète canadien.',
    imageUrl: 'https://example.com/theweeknd.jpg',
    socialMedia: {
      spotify: 'https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ',
      instagram: 'https://instagram.com/theweeknd'
    },
    createdAt: new Date()
  },
  {
    id: 'mock-artist-2',
    name: 'Daft Punk',
    genre: 'Electronic',
    location: 'Paris, France',
    members: 2,
    contactEmail: 'contact@daftpunk.com',
    contactPhone: '+33 1 23 45 67 89',
    bio: 'Daft Punk était un duo de musique électronique français formé en 1993 à Paris.',
    imageUrl: 'https://example.com/daftpunk.jpg',
    socialMedia: {
      spotify: 'https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi',
      instagram: 'https://instagram.com/daftpunk'
    },
    createdAt: new Date()
  }
];

// Assurez-vous que la collection artists existe
const artistsCollection = collection(db, 'artists');

// Fonction pour synchroniser les artistes locaux avec Firebase
const syncLocalArtistsWithFirebase = async () => {
  const localArtists = getArtistsFromLocalStorage();
  if (!localArtists || localArtists.length === 0) return;

  console.log('Tentative de synchronisation des artistes locaux avec Firebase...');
  
  try {
    const batch = writeBatch(db);
    let syncCount = 0;
    
    for (const artist of localArtists) {
      // Ne synchroniser que les artistes qui ont été ajoutés localement
      if (artist.localOnly) {
        const { id, localOnly, ...artistData } = artist;
        const docRef = doc(collection(db, 'artists'));
        batch.set(docRef, artistData);
        syncCount++;
      }
    }
    
    if (syncCount > 0) {
      await batch.commit();
      console.log(`${syncCount} artistes synchronisés avec Firebase`);
      
      // Mettre à jour le stockage local pour marquer les artistes comme synchronisés
      const updatedLocalArtists = localArtists.map(artist => {
        if (artist.localOnly) {
          return { ...artist, localOnly: false };
        }
        return artist;
      });
      
      saveArtistsToLocalStorage(updatedLocalArtists);
    } else {
      console.log('Aucun artiste local à synchroniser');
    }
  } catch (error) {
    console.error('Erreur lors de la synchronisation des artistes locaux:', error);
  }
};

export const getArtists = async () => {
  try {
    // Tenter de synchroniser les artistes locaux avec Firebase
    await syncLocalArtistsWithFirebase();
    
    // S'assurer que la collection existe
    await ensureCollection('artists');
    
    console.log("Tentative de récupération des artistes depuis Firebase...");
    const q = query(artistsCollection, orderBy('name'));
    const snapshot = await getDocs(q);
    
    let artists = [];
    
    if (snapshot.empty) {
      console.log("Aucun artiste trouvé dans Firebase, utilisation des données simulées");
      artists = [...mockArtists];
    } else {
      artists = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      console.log(`${artists.length} artistes récupérés depuis Firebase`);
    }
    
    // Récupérer les artistes du stockage local et les fusionner avec ceux de Firebase
    const localArtists = getArtistsFromLocalStorage();
    if (localArtists && localArtists.length > 0) {
      // Ajouter uniquement les artistes locaux qui ne sont pas déjà dans la liste Firebase
      const localOnlyArtists = localArtists.filter(localArtist => 
        localArtist.localOnly && !artists.some(a => a.id === localArtist.id)
      );
      
      if (localOnlyArtists.length > 0) {
        console.log(`Ajout de ${localOnlyArtists.length} artistes du stockage local`);
        artists = [...artists, ...localOnlyArtists];
      }
    }
    
    // Sauvegarder la liste complète dans le stockage local
    saveArtistsToLocalStorage(artists);
    
    return artists;
  } catch (error) {
    console.error("Erreur lors de la récupération des artistes:", error);
    
    // Essayer de récupérer les artistes du stockage local
    const localArtists = getArtistsFromLocalStorage();
    if (localArtists && localArtists.length > 0) {
      console.log("Utilisation des artistes du stockage local");
      return localArtists;
    }
    
    console.log("Utilisation des données simulées pour les artistes");
    return mockArtists;
  }
};

export const getArtistById = async (id) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection('artists');
    
    console.log(`Tentative de récupération de l'artiste ${id} depuis Firebase...`);
    const docRef = doc(db, 'artists', id);
    const snapshot = await getDoc(docRef);
    
    if (snapshot.exists()) {
      const artistData = {
        id: snapshot.id,
        ...snapshot.data()
      };
      console.log(`Artiste ${id} récupéré depuis Firebase:`, artistData);
      return artistData;
    }
    
    // Vérifier dans le stockage local
    const localArtists = getArtistsFromLocalStorage();
    if (localArtists) {
      const localArtist = localArtists.find(artist => artist.id === id);
      if (localArtist) {
        console.log(`Artiste ${id} récupéré depuis le stockage local:`, localArtist);
        return localArtist;
      }
    }
    
    console.log(`Artiste ${id} non trouvé dans Firebase ni dans le stockage local`);
    return null;
  } catch (error) {
    console.error(`Erreur lors de la récupération de l'artiste ${id}:`, error);
    
    // Vérifier dans le stockage local
    const localArtists = getArtistsFromLocalStorage();
    if (localArtists) {
      const localArtist = localArtists.find(artist => artist.id === id);
      if (localArtist) {
        console.log(`Artiste ${id} récupéré depuis le stockage local:`, localArtist);
        return localArtist;
      }
    }
    
    // Retourner un artiste simulé en cas d'erreur
    const mockArtist = mockArtists.find(artist => artist.id === id) || mockArtists[0];
    console.log(`Utilisation de l'artiste simulé:`, mockArtist);
    return mockArtist;
  }
};

export const addArtist = async (artistData) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection('artists');
    
    console.log("Tentative d'ajout d'un artiste à Firebase:", artistData);
    const docRef = await addDoc(artistsCollection, {
      ...artistData,
      createdAt: new Date()
    });
    
    const newArtist = {
      id: docRef.id,
      ...artistData,
      createdAt: new Date()
    };
    
    console.log(`Artiste ajouté avec succès, ID: ${docRef.id}`);
    
    // Mettre à jour le stockage local
    const localArtists = getArtistsFromLocalStorage() || [];
    saveArtistsToLocalStorage([...localArtists, newArtist]);
    
    return newArtist;
  } catch (error) {
    console.error("Erreur lors de l'ajout de l'artiste:", error);
    
    // Essayer d'ajouter l'artiste avec un ID généré manuellement
    try {
      const mockId = 'local-artist-' + Date.now();
      const newArtist = {
        id: mockId,
        ...artistData,
        createdAt: new Date(),
        localOnly: true // Marquer comme local uniquement
      };
      
      // Sauvegarder dans le stockage local
      const localArtists = getArtistsFromLocalStorage() || [];
      saveArtistsToLocalStorage([...localArtists, newArtist]);
      
      console.log(`Artiste ajouté localement avec ID: ${mockId}`);
      return newArtist;
    } catch (localError) {
      console.error("Erreur lors de l'ajout local de l'artiste:", localError);
      
      // Simuler l'ajout d'un artiste en cas d'erreur
      const mockId = 'mock-artist-' + Date.now();
      return {
        id: mockId,
        ...artistData,
        createdAt: new Date()
      };
    }
  }
};

export const updateArtist = async (id, artistData) => {
  try {
    // S'assurer que la collection existe
    await ensureCollection('artists');
    
    console.log(`Tentative de mise à jour de l'artiste ${id}:`, artistData);
    const docRef = doc(db, 'artists', id);
    await updateDoc(docRef, {
      ...artistData,
      updatedAt: new Date()
    });
    
    const updatedArtist = {
      id,
      ...artistData,
      updatedAt: new Date()
    };
    
    console.log(`Artiste ${id} mis à jour avec succès`);
    
    // Mettre à jour le stockage local
    const localArtists = getArtistsFromLocalStorage() || [];
    const updatedLocalArtists = localArtists.map(artist => 
      artist.id === id ? updatedArtist : artist
    );
    saveArtistsToLocalStorage(updatedLocalArtists);
    
    return updatedArtist;
  } catch (error) {
    console.error(`Erreur lors de la mise à jour de l'artiste ${id}:`, error);
    
    // Vérifier si l'artiste existe dans le stockage local
    const localArtists = getArtistsFromLocalStorage() || [];
    const localArtistIndex = localArtists.findIndex(artist => artist.id === id);
    
    if (localArtistIndex !== -1) {
      // Mettre à jour l'artiste localement
      const updatedArtist = {
        ...localArtists[localArtistIndex],
        ...artistData,
        updatedAt: new Date(),
        localOnly: true // Marquer comme local uniquement
      };
      
      localArtists[localArtistIndex] = updatedArtist;
      saveArtistsToLocalStorage(localArtists);
      
      console.log(`Artiste ${id} mis à jour localement`);
      return updatedArtist;
    }
    
    // Essayer de créer/remplacer le document
    try {
      await setDoc(doc(db, 'artists', id), {
        ...artistData,
        updatedAt: new Date()
      });
      
      console.log(`Artiste ${id} créé/remplacé avec succès`);
      return {
        id,
        ...artistData,
        updatedAt: new Date()
      };
    } catch (setError) {
      console.error(`Erreur lors de la création/remplacement de l'artiste ${id}:`, setError);
      
      // Simuler la mise à jour d'un artiste en cas d'erreur
      return {
        id,
        ...artistData,
        updatedAt: new Date()
      };
    }
  }
};

export const deleteArtist = async (id) => {
  try {
    console.log(`Tentative de suppression de l'artiste ${id}`);
    const docRef = doc(db, 'artists', id);
    await deleteDoc(docRef);
    
    console.log(`Artiste ${id} supprimé avec succès`);
    
    // Mettre à jour le stockage local
    const localArtists = getArtistsFromLocalStorage() || [];
    const updatedLocalArtists = localArtists.filter(artist => artist.id !== id);
    saveArtistsToLocalStorage(updatedLocalArtists);
    
    return id;
  } catch (error) {
    console.error(`Erreur lors de la suppression de l'artiste ${id}:`, error);
    
    // Supprimer l'artiste du stockage local si présent
    const localArtists = getArtistsFromLocalStorage() || [];
    const updatedLocalArtists = localArtists.filter(artist => artist.id !== id);
    
    if (updatedLocalArtists.length !== localArtists.length) {
      saveArtistsToLocalStorage(updatedLocalArtists);
      console.log(`Artiste ${id} supprimé localement`);
    }
    
    return id;
  }
};
