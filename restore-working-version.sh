#!/bin/bash

# Script pour restaurer l'application App Booking √† une version fonctionnelle
# Ce script revient √† la version o√π l'authentification √©tait d√©sactiv√©e et o√π
# toutes les fonctionnalit√©s (artistes, concerts, programmateurs) fonctionnaient correctement

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
  echo -e "${BLUE}$1${NC}"
}

print_success() {
  echo -e "${GREEN}$1${NC}"
}

print_error() {
  echo -e "${RED}$1${NC}"
}

print_warning() {
  echo -e "${YELLOW}$1${NC}"
}

# V√©rifier si nous sommes dans un d√©p√¥t Git
if [ ! -d ".git" ]; then
  print_error "Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du d√©p√¥t Git app-booking"
  exit 1
fi

# V√©rifier s'il y a des modifications non commit√©es
if [ -n "$(git status --porcelain)" ]; then
  print_warning "‚ö†Ô∏è Attention: Vous avez des modifications non commit√©es qui seront perdues."
  read -p "Voulez-vous continuer? (o/n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Oo]$ ]]; then
    print_message "Op√©ration annul√©e. Veuillez commiter ou stasher vos modifications avant de continuer."
    exit 0
  fi
fi

print_message "üîÑ Restauration de l'application √† la version fonctionnelle pr√©c√©dente..."

# Cr√©er une nouvelle branche pour la restauration
BRANCH_NAME="restore-working-version-$(date +%Y%m%d%H%M%S)"
git checkout -b $BRANCH_NAME 6fec9b41a

if [ $? -ne 0 ]; then
  print_error "‚ùå Erreur lors de la cr√©ation de la branche de restauration."
  exit 1
fi

print_success "‚úÖ Branche de restauration cr√©√©e: $BRANCH_NAME"

# V√©rifier que le fichier AuthContext.js a bien BYPASS_AUTH = true
AUTH_CONTEXT_FILE="client/src/context/AuthContext.js"
if grep -q "BYPASS_AUTH = true" "$AUTH_CONTEXT_FILE"; then
  print_success "‚úÖ Mode bypass d'authentification correctement configur√© (BYPASS_AUTH = true)"
else
  print_error "‚ùå Le mode bypass d'authentification n'est pas correctement configur√©."
  print_message "üîÑ Correction du fichier AuthContext.js..."
  
  # Remplacer BYPASS_AUTH = false par BYPASS_AUTH = true si n√©cessaire
  sed -i 's/BYPASS_AUTH = false/BYPASS_AUTH = true/g' "$AUTH_CONTEXT_FILE"
  
  if grep -q "BYPASS_AUTH = true" "$AUTH_CONTEXT_FILE"; then
    print_success "‚úÖ Mode bypass d'authentification corrig√© (BYPASS_AUTH = true)"
  else
    print_error "‚ùå Impossible de corriger le mode bypass d'authentification."
    exit 1
  fi
fi

# V√©rifier si des r√®gles Firestore ont √©t√© ajout√©es et les supprimer si n√©cessaire
if [ -f "firestore.rules" ]; then
  print_message "üîÑ Suppression des r√®gles Firestore restrictives..."
  rm firestore.rules
  print_success "‚úÖ R√®gles Firestore supprim√©es"
fi

# Commiter les changements
git add .
git commit -m "Restauration √† la version fonctionnelle avec authentification d√©sactiv√©e"

print_success "‚úÖ Restauration termin√©e avec succ√®s!"
print_message "üìã R√©sum√© des actions effectu√©es:"
echo "  - Cr√©ation d'une nouvelle branche: $BRANCH_NAME"
echo "  - Restauration au commit 'artiste features' (6fec9b41a)"
echo "  - V√©rification/correction du mode bypass d'authentification"
echo "  - Suppression des r√®gles Firestore restrictives (si pr√©sentes)"
echo "  - Commit des changements"

print_message "üìå Prochaines √©tapes:"
echo "  1. V√©rifiez que l'application fonctionne correctement en local"
echo "  2. Poussez la branche vers GitHub avec: git push origin $BRANCH_NAME"
echo "  3. Si tout fonctionne, fusionnez cette branche avec main:"
echo "     git checkout main"
echo "     git merge $BRANCH_NAME"
echo "     git push origin main"

print_warning "‚ö†Ô∏è Important: Cette restauration d√©sactive l'authentification Firebase."
echo "   Lorsque vous serez pr√™t √† r√©activer l'authentification, utilisez une approche"
echo "   plus progressive qui maintient la fonctionnalit√© de l'application."

exit 0
