{"ast":null,"code":"import { db } from '../firebase';\nimport { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc } from 'firebase/firestore';\n\n// Récupérer tous les contrats\nexport const getAllContracts = async () => {\n  try {\n    const contractsCollection = collection(db, 'contracts');\n    const contractsSnapshot = await getDocs(contractsCollection);\n    return contractsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des contrats:\", error);\n    return [];\n  }\n};\n\n// Récupérer un contrat par ID\nexport const getContractById = async id => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    const contractSnapshot = await getDoc(contractDoc);\n    if (contractSnapshot.exists()) {\n      return {\n        id: contractSnapshot.id,\n        ...contractSnapshot.data()\n      };\n    } else {\n      console.log(\"Aucun contrat trouvé avec cet ID\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération du contrat:\", error);\n    return null;\n  }\n};\n\n// Créer un nouveau contrat\nexport const createContract = async contractData => {\n  try {\n    const contractsCollection = collection(db, 'contracts');\n    const docRef = await addDoc(contractsCollection, {\n      ...contractData,\n      createdAt: new Date()\n    });\n    return {\n      id: docRef.id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la création du contrat:\", error);\n    throw error;\n  }\n};\n\n// Mettre à jour un contrat\nexport const updateContract = async (id, contractData) => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    await updateDoc(contractDoc, {\n      ...contractData,\n      updatedAt: new Date()\n    });\n    return {\n      id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour du contrat:\", error);\n    throw error;\n  }\n};\n\n// Supprimer un contrat\nexport const deleteContract = async id => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    await deleteDoc(contractDoc);\n    return true;\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression du contrat:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","doc","getDoc","addDoc","updateDoc","deleteDoc","getAllContracts","contractsCollection","contractsSnapshot","docs","map","id","data","error","console","getContractById","contractDoc","contractSnapshot","exists","log","createContract","contractData","docRef","createdAt","Date","updateContract","updatedAt","deleteContract"],"sources":["/workspaces/app-booking/client/src/services/contractsService.js"],"sourcesContent":["import { db } from '../firebase';\nimport { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc } from 'firebase/firestore';\n\n// Récupérer tous les contrats\nexport const getAllContracts = async () => {\n  try {\n    const contractsCollection = collection(db, 'contracts');\n    const contractsSnapshot = await getDocs(contractsCollection);\n    return contractsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des contrats:\", error);\n    return [];\n  }\n};\n\n// Récupérer un contrat par ID\nexport const getContractById = async (id) => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    const contractSnapshot = await getDoc(contractDoc);\n    \n    if (contractSnapshot.exists()) {\n      return {\n        id: contractSnapshot.id,\n        ...contractSnapshot.data()\n      };\n    } else {\n      console.log(\"Aucun contrat trouvé avec cet ID\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération du contrat:\", error);\n    return null;\n  }\n};\n\n// Créer un nouveau contrat\nexport const createContract = async (contractData) => {\n  try {\n    const contractsCollection = collection(db, 'contracts');\n    const docRef = await addDoc(contractsCollection, {\n      ...contractData,\n      createdAt: new Date()\n    });\n    \n    return {\n      id: docRef.id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la création du contrat:\", error);\n    throw error;\n  }\n};\n\n// Mettre à jour un contrat\nexport const updateContract = async (id, contractData) => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    await updateDoc(contractDoc, {\n      ...contractData,\n      updatedAt: new Date()\n    });\n    \n    return {\n      id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour du contrat:\", error);\n    throw error;\n  }\n};\n\n// Supprimer un contrat\nexport const deleteContract = async (id) => {\n  try {\n    const contractDoc = doc(db, 'contracts', id);\n    await deleteDoc(contractDoc);\n    return true;\n  } catch (error) {\n    console.error(\"Erreur lors de la suppression du contrat:\", error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}