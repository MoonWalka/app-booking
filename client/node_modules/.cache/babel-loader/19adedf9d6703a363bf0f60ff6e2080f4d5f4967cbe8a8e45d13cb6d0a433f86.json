{"ast":null,"code":"/**\n * Utilitaire pour générer un token unique pour lier les entités (programmateur, concert, contrat)\n *//**\n * Génère un token unique basé sur l'ID du concert et un timestamp\n * @param {string} concertId - ID du concert\n * @returns {string} Token unique\n */export const generateToken=concertId=>{// Utiliser l'ID du concert comme base pour garantir la cohérence\nconst base=concertId||'default';// Ajouter un timestamp pour l'unicité\nconst timestamp=Date.now().toString(36);// Ajouter un élément aléatoire pour éviter les collisions\nconst random=Math.random().toString(36).substring(2,8);// Combiner les éléments pour créer un token unique\nreturn`${base}-${timestamp}-${random}`;};/**\n * Extrait l'ID du concert à partir d'un token\n * @param {string} token - Token à analyser\n * @returns {string|null} ID du concert ou null si le format est invalide\n */export const extractConcertIdFromToken=token=>{if(!token||typeof token!=='string'){return null;}// Le format attendu est concertId-timestamp-random\nconst parts=token.split('-');if(parts.length>=3){return parts[0];}return null;};","map":{"version":3,"names":["generateToken","concertId","base","timestamp","Date","now","toString","random","Math","substring","extractConcertIdFromToken","token","parts","split","length"],"sources":["/workspaces/app-booking/client/src/utils/tokenGenerator.js"],"sourcesContent":["/**\n * Utilitaire pour générer un token unique pour lier les entités (programmateur, concert, contrat)\n */\n\n/**\n * Génère un token unique basé sur l'ID du concert et un timestamp\n * @param {string} concertId - ID du concert\n * @returns {string} Token unique\n */\nexport const generateToken = (concertId) => {\n  // Utiliser l'ID du concert comme base pour garantir la cohérence\n  const base = concertId || 'default';\n  \n  // Ajouter un timestamp pour l'unicité\n  const timestamp = Date.now().toString(36);\n  \n  // Ajouter un élément aléatoire pour éviter les collisions\n  const random = Math.random().toString(36).substring(2, 8);\n  \n  // Combiner les éléments pour créer un token unique\n  return `${base}-${timestamp}-${random}`;\n};\n\n/**\n * Extrait l'ID du concert à partir d'un token\n * @param {string} token - Token à analyser\n * @returns {string|null} ID du concert ou null si le format est invalide\n */\nexport const extractConcertIdFromToken = (token) => {\n  if (!token || typeof token !== 'string') {\n    return null;\n  }\n  \n  // Le format attendu est concertId-timestamp-random\n  const parts = token.split('-');\n  if (parts.length >= 3) {\n    return parts[0];\n  }\n  \n  return null;\n};\n"],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,aAAa,CAAIC,SAAS,EAAK,CAC1C;AACA,KAAM,CAAAC,IAAI,CAAGD,SAAS,EAAI,SAAS,CAEnC;AACA,KAAM,CAAAE,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAEzC;AACA,KAAM,CAAAC,MAAM,CAAGC,IAAI,CAACD,MAAM,CAAC,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC,CAACG,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAEzD;AACA,MAAO,GAAGP,IAAI,IAAIC,SAAS,IAAII,MAAM,EAAE,CACzC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,yBAAyB,CAAIC,KAAK,EAAK,CAClD,GAAI,CAACA,KAAK,EAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CACvC,MAAO,KAAI,CACb,CAEA;AACA,KAAM,CAAAC,KAAK,CAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAC9B,GAAID,KAAK,CAACE,MAAM,EAAI,CAAC,CAAE,CACrB,MAAO,CAAAF,KAAK,CAAC,CAAC,CAAC,CACjB,CAEA,MAAO,KAAI,CACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}