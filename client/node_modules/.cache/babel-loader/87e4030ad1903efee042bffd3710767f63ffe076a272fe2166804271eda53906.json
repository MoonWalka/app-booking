{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';import App from'./App';import{HashRouter}from'react-router-dom';import{AuthProvider}from'./context/AuthContext';import PublicFormPage from'./components/public/PublicFormPage';import FormSubmittedPage from'./components/public/FormSubmittedPage';// Fonction pour vérifier si l'URL actuelle est une route publique\nimport{jsx as _jsx}from\"react/jsx-runtime\";const isPublicRoute=()=>{// Obtenir le hash de l'URL (pour HashRouter)\nconst hash=window.location.hash||'';// Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\nconst cleanPath=hash.replace(/^#/,'');console.log('index.js - Hash brut:',hash);console.log('index.js - Chemin nettoyé:',cleanPath);// Vérifier si le chemin correspond à une route publique\nconst isPublic=cleanPath.startsWith('/form/')||cleanPath==='/form-submitted';console.log('index.js - Est une route publique:',isPublic);return isPublic;};// Extraire l'ID du concert de l'URL si c'est une route de formulaire\nconst extractConcertId=()=>{const hash=window.location.hash||'';const match=hash.match(/^#\\/form\\/([^\\/]+)$/);return match?match[1]:null;};const root=ReactDOM.createRoot(document.getElementById('root'));// Si c'est une route publique, rendre directement le composant correspondant sans AuthProvider\nif(isPublicRoute()){const concertId=extractConcertId();console.log('index.js - Rendu direct du composant public avec concertId:',concertId);// Déterminer quel composant public rendre\nconst hash=window.location.hash||'';const cleanPath=hash.replace(/^#/,'');if(cleanPath==='/form-submitted'){root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(HashRouter,{children:/*#__PURE__*/_jsx(FormSubmittedPage,{})})}));}else{root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(HashRouter,{children:/*#__PURE__*/_jsx(PublicFormPage,{concertId:concertId})})}));}}else{// Pour les routes protégées, rendre l'application normale avec AuthProvider\nconsole.log('index.js - Rendu de l\\'application normale avec AuthProvider');root.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(HashRouter,{children:/*#__PURE__*/_jsx(AuthProvider,{children:/*#__PURE__*/_jsx(App,{})})})}));}","map":{"version":3,"names":["React","ReactDOM","App","HashRouter","AuthProvider","PublicFormPage","FormSubmittedPage","jsx","_jsx","isPublicRoute","hash","window","location","cleanPath","replace","console","log","isPublic","startsWith","extractConcertId","match","root","createRoot","document","getElementById","concertId","render","StrictMode","children"],"sources":["/workspaces/app-booking/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport PublicFormPage from './components/public/PublicFormPage';\nimport FormSubmittedPage from './components/public/FormSubmittedPage';\n\n// Fonction pour vérifier si l'URL actuelle est une route publique\nconst isPublicRoute = () => {\n  // Obtenir le hash de l'URL (pour HashRouter)\n  const hash = window.location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanPath = hash.replace(/^#/, '');\n  \n  console.log('index.js - Hash brut:', hash);\n  console.log('index.js - Chemin nettoyé:', cleanPath);\n  \n  // Vérifier si le chemin correspond à une route publique\n  const isPublic = cleanPath.startsWith('/form/') || cleanPath === '/form-submitted';\n  console.log('index.js - Est une route publique:', isPublic);\n  \n  return isPublic;\n};\n\n// Extraire l'ID du concert de l'URL si c'est une route de formulaire\nconst extractConcertId = () => {\n  const hash = window.location.hash || '';\n  const match = hash.match(/^#\\/form\\/([^\\/]+)$/);\n  return match ? match[1] : null;\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Si c'est une route publique, rendre directement le composant correspondant sans AuthProvider\nif (isPublicRoute()) {\n  const concertId = extractConcertId();\n  console.log('index.js - Rendu direct du composant public avec concertId:', concertId);\n  \n  // Déterminer quel composant public rendre\n  const hash = window.location.hash || '';\n  const cleanPath = hash.replace(/^#/, '');\n  \n  if (cleanPath === '/form-submitted') {\n    root.render(\n      <React.StrictMode>\n        <HashRouter>\n          <FormSubmittedPage />\n        </HashRouter>\n      </React.StrictMode>\n    );\n  } else {\n    root.render(\n      <React.StrictMode>\n        <HashRouter>\n          <PublicFormPage concertId={concertId} />\n        </HashRouter>\n      </React.StrictMode>\n    );\n  }\n} else {\n  // Pour les routes protégées, rendre l'application normale avec AuthProvider\n  console.log('index.js - Rendu de l\\'application normale avec AuthProvider');\n  root.render(\n    <React.StrictMode>\n      <HashRouter>\n        <AuthProvider>\n          <App />\n        </AuthProvider>\n      </HashRouter>\n    </React.StrictMode>\n  );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CAEvC,MAAO,CAAAC,GAAG,KAAM,OAAO,CACvB,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,OAASC,YAAY,KAAQ,uBAAuB,CACpD,MAAO,CAAAC,cAAc,KAAM,oCAAoC,CAC/D,MAAO,CAAAC,iBAAiB,KAAM,uCAAuC,CAErE;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B;AACA,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI,EAAI,EAAE,CACvC;AACA,KAAM,CAAAG,SAAS,CAAGH,IAAI,CAACI,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAExCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEN,IAAI,CAAC,CAC1CK,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAEH,SAAS,CAAC,CAEpD;AACA,KAAM,CAAAI,QAAQ,CAAGJ,SAAS,CAACK,UAAU,CAAC,QAAQ,CAAC,EAAIL,SAAS,GAAK,iBAAiB,CAClFE,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEC,QAAQ,CAAC,CAE3D,MAAO,CAAAA,QAAQ,CACjB,CAAC,CAED;AACA,KAAM,CAAAE,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAT,IAAI,CAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI,EAAI,EAAE,CACvC,KAAM,CAAAU,KAAK,CAAGV,IAAI,CAACU,KAAK,CAAC,qBAAqB,CAAC,CAC/C,MAAO,CAAAA,KAAK,CAAGA,KAAK,CAAC,CAAC,CAAC,CAAG,IAAI,CAChC,CAAC,CAED,KAAM,CAAAC,IAAI,CAAGpB,QAAQ,CAACqB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CAEjE;AACA,GAAIf,aAAa,CAAC,CAAC,CAAE,CACnB,KAAM,CAAAgB,SAAS,CAAGN,gBAAgB,CAAC,CAAC,CACpCJ,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAES,SAAS,CAAC,CAErF;AACA,KAAM,CAAAf,IAAI,CAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI,EAAI,EAAE,CACvC,KAAM,CAAAG,SAAS,CAAGH,IAAI,CAACI,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAExC,GAAID,SAAS,GAAK,iBAAiB,CAAE,CACnCQ,IAAI,CAACK,MAAM,cACTlB,IAAA,CAACR,KAAK,CAAC2B,UAAU,EAAAC,QAAA,cACfpB,IAAA,CAACL,UAAU,EAAAyB,QAAA,cACTpB,IAAA,CAACF,iBAAiB,GAAE,CAAC,CACX,CAAC,CACG,CACpB,CAAC,CACH,CAAC,IAAM,CACLe,IAAI,CAACK,MAAM,cACTlB,IAAA,CAACR,KAAK,CAAC2B,UAAU,EAAAC,QAAA,cACfpB,IAAA,CAACL,UAAU,EAAAyB,QAAA,cACTpB,IAAA,CAACH,cAAc,EAACoB,SAAS,CAAEA,SAAU,CAAE,CAAC,CAC9B,CAAC,CACG,CACpB,CAAC,CACH,CACF,CAAC,IAAM,CACL;AACAV,OAAO,CAACC,GAAG,CAAC,8DAA8D,CAAC,CAC3EK,IAAI,CAACK,MAAM,cACTlB,IAAA,CAACR,KAAK,CAAC2B,UAAU,EAAAC,QAAA,cACfpB,IAAA,CAACL,UAAU,EAAAyB,QAAA,cACTpB,IAAA,CAACJ,YAAY,EAAAwB,QAAA,cACXpB,IAAA,CAACN,GAAG,GAAE,CAAC,CACK,CAAC,CACL,CAAC,CACG,CACpB,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}