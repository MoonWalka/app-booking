{"ast":null,"code":"import { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, orderBy, setDoc } from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async collectionName => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('name')));\n\n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        name: \"Artiste exemple\",\n        genre: \"Rock\",\n        location: \"Paris\",\n        members: 1,\n        contactEmail: \"exemple@email.com\",\n        bio: \"Ceci est un artiste exemple créé automatiquement.\",\n        createdAt: new Date()\n      };\n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockArtists = [{\n  id: 'mock-artist-1',\n  name: 'The Weeknd',\n  genre: 'R&B/Pop',\n  location: 'Toronto, Canada',\n  members: 1,\n  contactEmail: 'contact@theweeknd.com',\n  contactPhone: '+1 123 456 7890',\n  bio: 'Abel Makkonen Tesfaye, connu sous le nom de The Weeknd, est un auteur-compositeur-interprète canadien.',\n  imageUrl: 'https://example.com/theweeknd.jpg',\n  socialMedia: {\n    spotify: 'https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ',\n    instagram: 'https://instagram.com/theweeknd'\n  },\n  createdAt: new Date()\n}, {\n  id: 'mock-artist-2',\n  name: 'Daft Punk',\n  genre: 'Electronic',\n  location: 'Paris, France',\n  members: 2,\n  contactEmail: 'contact@daftpunk.com',\n  contactPhone: '+33 1 23 45 67 89',\n  bio: 'Daft Punk était un duo de musique électronique français formé en 1993 à Paris.',\n  imageUrl: 'https://example.com/daftpunk.jpg',\n  socialMedia: {\n    spotify: 'https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi',\n    instagram: 'https://instagram.com/daftpunk'\n  },\n  createdAt: new Date()\n}];\n\n// Assurez-vous que la collection artists existe\nconst artistsCollection = collection(db, 'artists');\nexport const getArtists = async () => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    console.log(\"Tentative de récupération des artistes depuis Firebase...\");\n    const q = query(artistsCollection, orderBy('name'));\n    const snapshot = await getDocs(q);\n    if (snapshot.empty) {\n      console.log(\"Aucun artiste trouvé dans Firebase, utilisation des données simulées\");\n      return mockArtists;\n    }\n    const artists = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    console.log(`${artists.length} artistes récupérés depuis Firebase`);\n    return artists;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des artistes:\", error);\n    console.log(\"Utilisation des données simulées pour les artistes\");\n\n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const artist of mockArtists) {\n        const {\n          id,\n          ...artistData\n        } = artist;\n        await setDoc(doc(db, 'artists', id), artistData);\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n\n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockArtists;\n  }\n};\nexport const getArtistById = async id => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    console.log(`Tentative de récupération de l'artiste ${id} depuis Firebase...`);\n    const docRef = doc(db, 'artists', id);\n    const snapshot = await getDoc(docRef);\n    if (snapshot.exists()) {\n      const artistData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Artiste ${id} récupéré depuis Firebase:`, artistData);\n      return artistData;\n    }\n    console.log(`Artiste ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération de l'artiste ${id}:`, error);\n    // Retourner un artiste simulé en cas d'erreur\n    const mockArtist = mockArtists.find(artist => artist.id === id) || mockArtists[0];\n    console.log(`Utilisation de l'artiste simulé:`, mockArtist);\n    return mockArtist;\n  }\n};\nexport const addArtist = async artistData => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    console.log(\"Tentative d'ajout d'un artiste à Firebase:\", artistData);\n    const docRef = await addDoc(artistsCollection, {\n      ...artistData,\n      createdAt: new Date()\n    });\n    console.log(`Artiste ajouté avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout de l'artiste:\", error);\n    console.log(\"Simulation de l'ajout d'un artiste\");\n\n    // Essayer d'ajouter l'artiste avec un ID généré manuellement\n    try {\n      const mockId = 'mock-artist-' + Date.now();\n      await setDoc(doc(db, 'artists', mockId), {\n        ...artistData,\n        createdAt: new Date()\n      });\n      console.log(`Artiste ajouté avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel de l'artiste:\", addError);\n\n      // Simuler l'ajout d'un artiste en cas d'erreur\n      const mockId = 'mock-artist-' + Date.now();\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    }\n  }\n};\nexport const updateArtist = async (id, artistData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    console.log(`Tentative de mise à jour de l'artiste ${id}:`, artistData);\n    const docRef = doc(db, 'artists', id);\n    await updateDoc(docRef, {\n      ...artistData,\n      updatedAt: new Date()\n    });\n    console.log(`Artiste ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un artiste\");\n\n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, 'artists', id), {\n        ...artistData,\n        updatedAt: new Date()\n      });\n      console.log(`Artiste ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement de l'artiste ${id}:`, setError);\n\n      // Simuler la mise à jour d'un artiste en cas d'erreur\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    }\n  }\n};\nexport const deleteArtist = async id => {\n  try {\n    console.log(`Tentative de suppression de l'artiste ${id}`);\n    const docRef = doc(db, 'artists', id);\n    await deleteDoc(docRef);\n    console.log(`Artiste ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un artiste\");\n    // Simuler la suppression d'un artiste en cas d'erreur\n    return id;\n  }\n};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","setDoc","db","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","initialDoc","name","genre","location","members","contactEmail","bio","createdAt","Date","error","mockArtists","id","contactPhone","imageUrl","socialMedia","spotify","instagram","artistsCollection","getArtists","q","artists","docs","map","data","length","artist","artistData","addError","getArtistById","docRef","exists","mockArtist","find","addArtist","mockId","now","updateArtist","updatedAt","setError","deleteArtist"],"sources":["/workspaces/app-booking/client/src/services/artistsService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  setDoc\n} from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('name')));\n    \n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        name: \"Artiste exemple\",\n        genre: \"Rock\",\n        location: \"Paris\",\n        members: 1,\n        contactEmail: \"exemple@email.com\",\n        bio: \"Ceci est un artiste exemple créé automatiquement.\",\n        createdAt: new Date()\n      };\n      \n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockArtists = [\n  {\n    id: 'mock-artist-1',\n    name: 'The Weeknd',\n    genre: 'R&B/Pop',\n    location: 'Toronto, Canada',\n    members: 1,\n    contactEmail: 'contact@theweeknd.com',\n    contactPhone: '+1 123 456 7890',\n    bio: 'Abel Makkonen Tesfaye, connu sous le nom de The Weeknd, est un auteur-compositeur-interprète canadien.',\n    imageUrl: 'https://example.com/theweeknd.jpg',\n    socialMedia: {\n      spotify: 'https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ',\n      instagram: 'https://instagram.com/theweeknd'\n    },\n    createdAt: new Date()\n  },\n  {\n    id: 'mock-artist-2',\n    name: 'Daft Punk',\n    genre: 'Electronic',\n    location: 'Paris, France',\n    members: 2,\n    contactEmail: 'contact@daftpunk.com',\n    contactPhone: '+33 1 23 45 67 89',\n    bio: 'Daft Punk était un duo de musique électronique français formé en 1993 à Paris.',\n    imageUrl: 'https://example.com/daftpunk.jpg',\n    socialMedia: {\n      spotify: 'https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi',\n      instagram: 'https://instagram.com/daftpunk'\n    },\n    createdAt: new Date()\n  }\n];\n\n// Assurez-vous que la collection artists existe\nconst artistsCollection = collection(db, 'artists');\n\nexport const getArtists = async () => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(\"Tentative de récupération des artistes depuis Firebase...\");\n    const q = query(artistsCollection, orderBy('name'));\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun artiste trouvé dans Firebase, utilisation des données simulées\");\n      return mockArtists;\n    }\n    \n    const artists = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${artists.length} artistes récupérés depuis Firebase`);\n    return artists;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des artistes:\", error);\n    console.log(\"Utilisation des données simulées pour les artistes\");\n    \n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const artist of mockArtists) {\n        const { id, ...artistData } = artist;\n        await setDoc(doc(db, 'artists', id), artistData);\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n    \n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockArtists;\n  }\n};\n\nexport const getArtistById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(`Tentative de récupération de l'artiste ${id} depuis Firebase...`);\n    const docRef = doc(db, 'artists', id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const artistData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Artiste ${id} récupéré depuis Firebase:`, artistData);\n      return artistData;\n    }\n    \n    console.log(`Artiste ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération de l'artiste ${id}:`, error);\n    // Retourner un artiste simulé en cas d'erreur\n    const mockArtist = mockArtists.find(artist => artist.id === id) || mockArtists[0];\n    console.log(`Utilisation de l'artiste simulé:`, mockArtist);\n    return mockArtist;\n  }\n};\n\nexport const addArtist = async (artistData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(\"Tentative d'ajout d'un artiste à Firebase:\", artistData);\n    const docRef = await addDoc(artistsCollection, {\n      ...artistData,\n      createdAt: new Date()\n    });\n    \n    console.log(`Artiste ajouté avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout de l'artiste:\", error);\n    console.log(\"Simulation de l'ajout d'un artiste\");\n    \n    // Essayer d'ajouter l'artiste avec un ID généré manuellement\n    try {\n      const mockId = 'mock-artist-' + Date.now();\n      await setDoc(doc(db, 'artists', mockId), {\n        ...artistData,\n        createdAt: new Date()\n      });\n      \n      console.log(`Artiste ajouté avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel de l'artiste:\", addError);\n      \n      // Simuler l'ajout d'un artiste en cas d'erreur\n      const mockId = 'mock-artist-' + Date.now();\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    }\n  }\n};\n\nexport const updateArtist = async (id, artistData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(`Tentative de mise à jour de l'artiste ${id}:`, artistData);\n    const docRef = doc(db, 'artists', id);\n    await updateDoc(docRef, {\n      ...artistData,\n      updatedAt: new Date()\n    });\n    \n    console.log(`Artiste ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un artiste\");\n    \n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, 'artists', id), {\n        ...artistData,\n        updatedAt: new Date()\n      });\n      \n      console.log(`Artiste ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement de l'artiste ${id}:`, setError);\n      \n      // Simuler la mise à jour d'un artiste en cas d'erreur\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    }\n  }\n};\n\nexport const deleteArtist = async (id) => {\n  try {\n    console.log(`Tentative de suppression de l'artiste ${id}`);\n    const docRef = doc(db, 'artists', id);\n    await deleteDoc(docRef);\n    \n    console.log(`Artiste ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un artiste\");\n    // Simuler la suppression d'un artiste en cas d'erreur\n    return id;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}