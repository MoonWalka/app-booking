{"ast":null,"code":"import{db}from'../firebase';import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,where,orderBy}from'firebase/firestore';const COLLECTION_NAME='formSubmissions';// Récupérer toutes les soumissions de formulaire\nexport const getFormSubmissions=async()=>{try{console.log('FormSubmissionsService - Récupération de toutes les soumissions...');const submissionsCollection=collection(db,COLLECTION_NAME);const submissionsSnapshot=await getDocs(submissionsCollection);const submissions=submissionsSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`FormSubmissionsService - ${submissions.length} soumissions récupérées`);// Mettre à jour les soumissions sans statut\nconst submissionsToUpdate=submissions.filter(submission=>!submission.status);if(submissionsToUpdate.length>0){console.log(`FormSubmissionsService - Mise à jour de ${submissionsToUpdate.length} soumissions sans statut...`);for(const submission of submissionsToUpdate){await updateFormSubmissionStatus(submission.id,'pending');}// Récupérer à nouveau les soumissions après la mise à jour\nconst updatedSubmissionsSnapshot=await getDocs(submissionsCollection);const updatedSubmissions=updatedSubmissionsSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`FormSubmissionsService - ${updatedSubmissions.length} soumissions récupérées après mise à jour`);return updatedSubmissions;}return submissions;}catch(error){console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions:',error);throw new Error('Erreur lors de la récupération des soumissions de formulaire');}};// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions=async()=>{try{console.log('FormSubmissionsService - Récupération des soumissions en attente...');const submissionsCollection=collection(db,COLLECTION_NAME);const pendingQuery=query(submissionsCollection,where('status','==','pending'),orderBy('submissionDate','desc'));const pendingSnapshot=await getDocs(pendingQuery);const pendingSubmissions=pendingSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`FormSubmissionsService - ${pendingSubmissions.length} soumissions en attente récupérées`);return pendingSubmissions;}catch(error){console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions en attente:',error);throw new Error('Erreur lors de la récupération des soumissions en attente');}};// Récupérer une soumission de formulaire par ID\nexport const getFormSubmission=async id=>{try{console.log(`FormSubmissionsService - Récupération de la soumission ${id}...`);const submissionDoc=doc(db,COLLECTION_NAME,id);const submissionSnapshot=await getDoc(submissionDoc);if(!submissionSnapshot.exists()){console.error(`FormSubmissionsService - Soumission ${id} non trouvée`);throw new Error('Soumission de formulaire non trouvée');}const submission={id:submissionSnapshot.id,...submissionSnapshot.data()};console.log(`FormSubmissionsService - Soumission ${id} récupérée:`,submission);return submission;}catch(error){console.error(`FormSubmissionsService - Erreur lors de la récupération de la soumission ${id}:`,error);throw new Error('Erreur lors de la récupération de la soumission de formulaire');}};// Ajouter une nouvelle soumission de formulaire\nexport const addFormSubmission=async formData=>{try{console.log('FormSubmissionsService - Ajout d\\'une nouvelle soumission:',formData);// S'assurer que le statut est défini\nconst submissionData={...formData,status:formData.status||'pending',submissionDate:new Date()};const submissionsCollection=collection(db,COLLECTION_NAME);const docRef=await addDoc(submissionsCollection,submissionData);const newSubmission={id:docRef.id,...submissionData};console.log('FormSubmissionsService - Nouvelle soumission ajoutée:',newSubmission);return newSubmission;}catch(error){console.error('FormSubmissionsService - Erreur lors de l\\'ajout de la soumission:',error);throw new Error('Erreur lors de l\\'ajout de la soumission de formulaire');}};// Mettre à jour le statut d'une soumission de formulaire\nexport const updateFormSubmissionStatus=async(id,status)=>{try{console.log(`FormSubmissionsService - Mise à jour du statut de la soumission ${id} à ${status}...`);const submissionDoc=doc(db,COLLECTION_NAME,id);await updateDoc(submissionDoc,{status});console.log(`FormSubmissionsService - Statut de la soumission ${id} mis à jour à ${status}`);return{id,status};}catch(error){console.error(`FormSubmissionsService - Erreur lors de la mise à jour du statut de la soumission ${id}:`,error);throw new Error('Erreur lors de la mise à jour du statut de la soumission');}};// Supprimer une soumission de formulaire\nexport const deleteFormSubmission=async id=>{try{console.log(`FormSubmissionsService - Suppression de la soumission ${id}...`);const submissionDoc=doc(db,COLLECTION_NAME,id);await deleteDoc(submissionDoc);console.log(`FormSubmissionsService - Soumission ${id} supprimée`);return{id};}catch(error){console.error(`FormSubmissionsService - Erreur lors de la suppression de la soumission ${id}:`,error);throw new Error('Erreur lors de la suppression de la soumission de formulaire');}};// Récupérer les statistiques des soumissions\nexport const getFormSubmissionsStats=async()=>{try{console.log('FormSubmissionsService - Calcul des statistiques des soumissions...');const submissions=await getFormSubmissions();// Compter les soumissions par statut\nconst statusCounts=submissions.reduce((counts,submission)=>{const status=submission.status||'pending';counts[status]=(counts[status]||0)+1;return counts;},{});// Compter les soumissions avec et sans token commun\nconst withCommonToken=submissions.filter(submission=>submission.commonToken).length;const withoutCommonToken=submissions.length-withCommonToken;// Compter les soumissions en attente\nconst pendingCount=statusCounts.pending||0;const stats={total:submissions.length,pendingCount,statusCounts,withCommonToken,withoutCommonToken};console.log('FormSubmissionsService - Statistiques calculées:',stats);return stats;}catch(error){console.error('FormSubmissionsService - Erreur lors du calcul des statistiques:',error);throw new Error('Erreur lors du calcul des statistiques des soumissions');}};","map":{"version":3,"names":["db","collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","orderBy","COLLECTION_NAME","getFormSubmissions","console","log","submissionsCollection","submissionsSnapshot","submissions","docs","map","id","data","length","submissionsToUpdate","filter","submission","status","updateFormSubmissionStatus","updatedSubmissionsSnapshot","updatedSubmissions","error","Error","getPendingFormSubmissions","pendingQuery","pendingSnapshot","pendingSubmissions","getFormSubmission","submissionDoc","submissionSnapshot","exists","addFormSubmission","formData","submissionData","submissionDate","Date","docRef","newSubmission","deleteFormSubmission","getFormSubmissionsStats","statusCounts","reduce","counts","withCommonToken","commonToken","withoutCommonToken","pendingCount","pending","stats","total"],"sources":["/workspaces/app-booking/client/src/services/formSubmissionsService.js"],"sourcesContent":["import { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\n\nconst COLLECTION_NAME = 'formSubmissions';\n\n// Récupérer toutes les soumissions de formulaire\nexport const getFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération de toutes les soumissions...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const submissionsSnapshot = await getDocs(submissionsCollection);\n    \n    const submissions = submissionsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`FormSubmissionsService - ${submissions.length} soumissions récupérées`);\n    \n    // Mettre à jour les soumissions sans statut\n    const submissionsToUpdate = submissions.filter(submission => !submission.status);\n    if (submissionsToUpdate.length > 0) {\n      console.log(`FormSubmissionsService - Mise à jour de ${submissionsToUpdate.length} soumissions sans statut...`);\n      for (const submission of submissionsToUpdate) {\n        await updateFormSubmissionStatus(submission.id, 'pending');\n      }\n      \n      // Récupérer à nouveau les soumissions après la mise à jour\n      const updatedSubmissionsSnapshot = await getDocs(submissionsCollection);\n      const updatedSubmissions = updatedSubmissionsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      \n      console.log(`FormSubmissionsService - ${updatedSubmissions.length} soumissions récupérées après mise à jour`);\n      return updatedSubmissions;\n    }\n    \n    return submissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions:', error);\n    throw new Error('Erreur lors de la récupération des soumissions de formulaire');\n  }\n};\n\n// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération des soumissions en attente...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const pendingQuery = query(\n      submissionsCollection,\n      where('status', '==', 'pending'),\n      orderBy('submissionDate', 'desc')\n    );\n    \n    const pendingSnapshot = await getDocs(pendingQuery);\n    const pendingSubmissions = pendingSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`FormSubmissionsService - ${pendingSubmissions.length} soumissions en attente récupérées`);\n    return pendingSubmissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions en attente:', error);\n    throw new Error('Erreur lors de la récupération des soumissions en attente');\n  }\n};\n\n// Récupérer une soumission de formulaire par ID\nexport const getFormSubmission = async (id) => {\n  try {\n    console.log(`FormSubmissionsService - Récupération de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    const submissionSnapshot = await getDoc(submissionDoc);\n    \n    if (!submissionSnapshot.exists()) {\n      console.error(`FormSubmissionsService - Soumission ${id} non trouvée`);\n      throw new Error('Soumission de formulaire non trouvée');\n    }\n    \n    const submission = {\n      id: submissionSnapshot.id,\n      ...submissionSnapshot.data()\n    };\n    \n    console.log(`FormSubmissionsService - Soumission ${id} récupérée:`, submission);\n    return submission;\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la récupération de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la récupération de la soumission de formulaire');\n  }\n};\n\n// Ajouter une nouvelle soumission de formulaire\nexport const addFormSubmission = async (formData) => {\n  try {\n    console.log('FormSubmissionsService - Ajout d\\'une nouvelle soumission:', formData);\n    \n    // S'assurer que le statut est défini\n    const submissionData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submissionDate: new Date()\n    };\n    \n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const docRef = await addDoc(submissionsCollection, submissionData);\n    \n    const newSubmission = {\n      id: docRef.id,\n      ...submissionData\n    };\n    \n    console.log('FormSubmissionsService - Nouvelle soumission ajoutée:', newSubmission);\n    return newSubmission;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de l\\'ajout de la soumission:', error);\n    throw new Error('Erreur lors de l\\'ajout de la soumission de formulaire');\n  }\n};\n\n// Mettre à jour le statut d'une soumission de formulaire\nexport const updateFormSubmissionStatus = async (id, status) => {\n  try {\n    console.log(`FormSubmissionsService - Mise à jour du statut de la soumission ${id} à ${status}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    \n    await updateDoc(submissionDoc, { status });\n    \n    console.log(`FormSubmissionsService - Statut de la soumission ${id} mis à jour à ${status}`);\n    return { id, status };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la mise à jour du statut de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la mise à jour du statut de la soumission');\n  }\n};\n\n// Supprimer une soumission de formulaire\nexport const deleteFormSubmission = async (id) => {\n  try {\n    console.log(`FormSubmissionsService - Suppression de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    \n    await deleteDoc(submissionDoc);\n    \n    console.log(`FormSubmissionsService - Soumission ${id} supprimée`);\n    return { id };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la suppression de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la suppression de la soumission de formulaire');\n  }\n};\n\n// Récupérer les statistiques des soumissions\nexport const getFormSubmissionsStats = async () => {\n  try {\n    console.log('FormSubmissionsService - Calcul des statistiques des soumissions...');\n    const submissions = await getFormSubmissions();\n    \n    // Compter les soumissions par statut\n    const statusCounts = submissions.reduce((counts, submission) => {\n      const status = submission.status || 'pending';\n      counts[status] = (counts[status] || 0) + 1;\n      return counts;\n    }, {});\n    \n    // Compter les soumissions avec et sans token commun\n    const withCommonToken = submissions.filter(submission => submission.commonToken).length;\n    const withoutCommonToken = submissions.length - withCommonToken;\n    \n    // Compter les soumissions en attente\n    const pendingCount = statusCounts.pending || 0;\n    \n    const stats = {\n      total: submissions.length,\n      pendingCount,\n      statusCounts,\n      withCommonToken,\n      withoutCommonToken\n    };\n    \n    console.log('FormSubmissionsService - Statistiques calculées:', stats);\n    return stats;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors du calcul des statistiques:', error);\n    throw new Error('Erreur lors du calcul des statistiques des soumissions');\n  }\n};\n"],"mappings":"AAAA,OAASA,EAAE,KAAQ,aAAa,CAChC,OAASC,UAAU,CAAEC,OAAO,CAAEC,MAAM,CAAEC,GAAG,CAAEC,MAAM,CAAEC,SAAS,CAAEC,SAAS,CAAEC,KAAK,CAAEC,KAAK,CAAEC,OAAO,KAAQ,oBAAoB,CAE1H,KAAM,CAAAC,eAAe,CAAG,iBAAiB,CAEzC;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CAC5C,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,oEAAoE,CAAC,CACjF,KAAM,CAAAC,qBAAqB,CAAGd,UAAU,CAACD,EAAE,CAAEW,eAAe,CAAC,CAC7D,KAAM,CAAAK,mBAAmB,CAAG,KAAM,CAAAd,OAAO,CAACa,qBAAqB,CAAC,CAEhE,KAAM,CAAAE,WAAW,CAAGD,mBAAmB,CAACE,IAAI,CAACC,GAAG,CAACf,GAAG,GAAK,CACvDgB,EAAE,CAAEhB,GAAG,CAACgB,EAAE,CACV,GAAGhB,GAAG,CAACiB,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEHR,OAAO,CAACC,GAAG,CAAC,4BAA4BG,WAAW,CAACK,MAAM,yBAAyB,CAAC,CAEpF;AACA,KAAM,CAAAC,mBAAmB,CAAGN,WAAW,CAACO,MAAM,CAACC,UAAU,EAAI,CAACA,UAAU,CAACC,MAAM,CAAC,CAChF,GAAIH,mBAAmB,CAACD,MAAM,CAAG,CAAC,CAAE,CAClCT,OAAO,CAACC,GAAG,CAAC,2CAA2CS,mBAAmB,CAACD,MAAM,6BAA6B,CAAC,CAC/G,IAAK,KAAM,CAAAG,UAAU,GAAI,CAAAF,mBAAmB,CAAE,CAC5C,KAAM,CAAAI,0BAA0B,CAACF,UAAU,CAACL,EAAE,CAAE,SAAS,CAAC,CAC5D,CAEA;AACA,KAAM,CAAAQ,0BAA0B,CAAG,KAAM,CAAA1B,OAAO,CAACa,qBAAqB,CAAC,CACvE,KAAM,CAAAc,kBAAkB,CAAGD,0BAA0B,CAACV,IAAI,CAACC,GAAG,CAACf,GAAG,GAAK,CACrEgB,EAAE,CAAEhB,GAAG,CAACgB,EAAE,CACV,GAAGhB,GAAG,CAACiB,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEHR,OAAO,CAACC,GAAG,CAAC,4BAA4Be,kBAAkB,CAACP,MAAM,2CAA2C,CAAC,CAC7G,MAAO,CAAAO,kBAAkB,CAC3B,CAEA,MAAO,CAAAZ,WAAW,CACpB,CAAE,MAAOa,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,0EAA0E,CAAEA,KAAK,CAAC,CAChG,KAAM,IAAI,CAAAC,KAAK,CAAC,8DAA8D,CAAC,CACjF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,yBAAyB,CAAG,KAAAA,CAAA,GAAY,CACnD,GAAI,CACFnB,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC,CAClF,KAAM,CAAAC,qBAAqB,CAAGd,UAAU,CAACD,EAAE,CAAEW,eAAe,CAAC,CAC7D,KAAM,CAAAsB,YAAY,CAAGzB,KAAK,CACxBO,qBAAqB,CACrBN,KAAK,CAAC,QAAQ,CAAE,IAAI,CAAE,SAAS,CAAC,CAChCC,OAAO,CAAC,gBAAgB,CAAE,MAAM,CAClC,CAAC,CAED,KAAM,CAAAwB,eAAe,CAAG,KAAM,CAAAhC,OAAO,CAAC+B,YAAY,CAAC,CACnD,KAAM,CAAAE,kBAAkB,CAAGD,eAAe,CAAChB,IAAI,CAACC,GAAG,CAACf,GAAG,GAAK,CAC1DgB,EAAE,CAAEhB,GAAG,CAACgB,EAAE,CACV,GAAGhB,GAAG,CAACiB,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEHR,OAAO,CAACC,GAAG,CAAC,4BAA4BqB,kBAAkB,CAACb,MAAM,oCAAoC,CAAC,CACtG,MAAO,CAAAa,kBAAkB,CAC3B,CAAE,MAAOL,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,qFAAqF,CAAEA,KAAK,CAAC,CAC3G,KAAM,IAAI,CAAAC,KAAK,CAAC,2DAA2D,CAAC,CAC9E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,iBAAiB,CAAG,KAAO,CAAAhB,EAAE,EAAK,CAC7C,GAAI,CACFP,OAAO,CAACC,GAAG,CAAC,0DAA0DM,EAAE,KAAK,CAAC,CAC9E,KAAM,CAAAiB,aAAa,CAAGjC,GAAG,CAACJ,EAAE,CAAEW,eAAe,CAAES,EAAE,CAAC,CAClD,KAAM,CAAAkB,kBAAkB,CAAG,KAAM,CAAAnC,MAAM,CAACkC,aAAa,CAAC,CAEtD,GAAI,CAACC,kBAAkB,CAACC,MAAM,CAAC,CAAC,CAAE,CAChC1B,OAAO,CAACiB,KAAK,CAAC,uCAAuCV,EAAE,cAAc,CAAC,CACtE,KAAM,IAAI,CAAAW,KAAK,CAAC,sCAAsC,CAAC,CACzD,CAEA,KAAM,CAAAN,UAAU,CAAG,CACjBL,EAAE,CAAEkB,kBAAkB,CAAClB,EAAE,CACzB,GAAGkB,kBAAkB,CAACjB,IAAI,CAAC,CAC7B,CAAC,CAEDR,OAAO,CAACC,GAAG,CAAC,uCAAuCM,EAAE,aAAa,CAAEK,UAAU,CAAC,CAC/E,MAAO,CAAAA,UAAU,CACnB,CAAE,MAAOK,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,4EAA4EV,EAAE,GAAG,CAAEU,KAAK,CAAC,CACvG,KAAM,IAAI,CAAAC,KAAK,CAAC,+DAA+D,CAAC,CAClF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAS,iBAAiB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACnD,GAAI,CACF5B,OAAO,CAACC,GAAG,CAAC,4DAA4D,CAAE2B,QAAQ,CAAC,CAEnF;AACA,KAAM,CAAAC,cAAc,CAAG,CACrB,GAAGD,QAAQ,CACXf,MAAM,CAAEe,QAAQ,CAACf,MAAM,EAAI,SAAS,CACpCiB,cAAc,CAAE,GAAI,CAAAC,IAAI,CAAC,CAC3B,CAAC,CAED,KAAM,CAAA7B,qBAAqB,CAAGd,UAAU,CAACD,EAAE,CAAEW,eAAe,CAAC,CAC7D,KAAM,CAAAkC,MAAM,CAAG,KAAM,CAAAxC,MAAM,CAACU,qBAAqB,CAAE2B,cAAc,CAAC,CAElE,KAAM,CAAAI,aAAa,CAAG,CACpB1B,EAAE,CAAEyB,MAAM,CAACzB,EAAE,CACb,GAAGsB,cACL,CAAC,CAED7B,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAEgC,aAAa,CAAC,CACnF,MAAO,CAAAA,aAAa,CACtB,CAAE,MAAOhB,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,oEAAoE,CAAEA,KAAK,CAAC,CAC1F,KAAM,IAAI,CAAAC,KAAK,CAAC,wDAAwD,CAAC,CAC3E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAJ,0BAA0B,CAAG,KAAAA,CAAOP,EAAE,CAAEM,MAAM,GAAK,CAC9D,GAAI,CACFb,OAAO,CAACC,GAAG,CAAC,mEAAmEM,EAAE,MAAMM,MAAM,KAAK,CAAC,CACnG,KAAM,CAAAW,aAAa,CAAGjC,GAAG,CAACJ,EAAE,CAAEW,eAAe,CAAES,EAAE,CAAC,CAElD,KAAM,CAAAd,SAAS,CAAC+B,aAAa,CAAE,CAAEX,MAAO,CAAC,CAAC,CAE1Cb,OAAO,CAACC,GAAG,CAAC,oDAAoDM,EAAE,iBAAiBM,MAAM,EAAE,CAAC,CAC5F,MAAO,CAAEN,EAAE,CAAEM,MAAO,CAAC,CACvB,CAAE,MAAOI,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,qFAAqFV,EAAE,GAAG,CAAEU,KAAK,CAAC,CAChH,KAAM,IAAI,CAAAC,KAAK,CAAC,0DAA0D,CAAC,CAC7E,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAgB,oBAAoB,CAAG,KAAO,CAAA3B,EAAE,EAAK,CAChD,GAAI,CACFP,OAAO,CAACC,GAAG,CAAC,yDAAyDM,EAAE,KAAK,CAAC,CAC7E,KAAM,CAAAiB,aAAa,CAAGjC,GAAG,CAACJ,EAAE,CAAEW,eAAe,CAAES,EAAE,CAAC,CAElD,KAAM,CAAAb,SAAS,CAAC8B,aAAa,CAAC,CAE9BxB,OAAO,CAACC,GAAG,CAAC,uCAAuCM,EAAE,YAAY,CAAC,CAClE,MAAO,CAAEA,EAAG,CAAC,CACf,CAAE,MAAOU,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,2EAA2EV,EAAE,GAAG,CAAEU,KAAK,CAAC,CACtG,KAAM,IAAI,CAAAC,KAAK,CAAC,8DAA8D,CAAC,CACjF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAiB,uBAAuB,CAAG,KAAAA,CAAA,GAAY,CACjD,GAAI,CACFnC,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC,CAClF,KAAM,CAAAG,WAAW,CAAG,KAAM,CAAAL,kBAAkB,CAAC,CAAC,CAE9C;AACA,KAAM,CAAAqC,YAAY,CAAGhC,WAAW,CAACiC,MAAM,CAAC,CAACC,MAAM,CAAE1B,UAAU,GAAK,CAC9D,KAAM,CAAAC,MAAM,CAAGD,UAAU,CAACC,MAAM,EAAI,SAAS,CAC7CyB,MAAM,CAACzB,MAAM,CAAC,CAAG,CAACyB,MAAM,CAACzB,MAAM,CAAC,EAAI,CAAC,EAAI,CAAC,CAC1C,MAAO,CAAAyB,MAAM,CACf,CAAC,CAAE,CAAC,CAAC,CAAC,CAEN;AACA,KAAM,CAAAC,eAAe,CAAGnC,WAAW,CAACO,MAAM,CAACC,UAAU,EAAIA,UAAU,CAAC4B,WAAW,CAAC,CAAC/B,MAAM,CACvF,KAAM,CAAAgC,kBAAkB,CAAGrC,WAAW,CAACK,MAAM,CAAG8B,eAAe,CAE/D;AACA,KAAM,CAAAG,YAAY,CAAGN,YAAY,CAACO,OAAO,EAAI,CAAC,CAE9C,KAAM,CAAAC,KAAK,CAAG,CACZC,KAAK,CAAEzC,WAAW,CAACK,MAAM,CACzBiC,YAAY,CACZN,YAAY,CACZG,eAAe,CACfE,kBACF,CAAC,CAEDzC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAE2C,KAAK,CAAC,CACtE,MAAO,CAAAA,KAAK,CACd,CAAE,MAAO3B,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,kEAAkE,CAAEA,KAAK,CAAC,CACxF,KAAM,IAAI,CAAAC,KAAK,CAAC,wDAAwD,CAAC,CAC3E,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}