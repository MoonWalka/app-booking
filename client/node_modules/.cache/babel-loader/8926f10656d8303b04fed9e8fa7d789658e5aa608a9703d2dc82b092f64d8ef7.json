{"ast":null,"code":"import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,orderBy,setDoc}from'firebase/firestore';import{db}from'../firebase';// Assurez-vous que la collection existe\nconst ensureCollection=async collectionName=>{try{// Vérifier si la collection existe en essayant de récupérer des documents\nconst collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,orderBy('name')));// Si la collection n'existe pas ou est vide, créer un document initial\nif(snapshot.empty){console.log(`Collection ${collectionName} vide, création d'un document initial...`);const initialDoc={name:\"Artiste exemple\",genre:\"Rock\",location:\"Paris\",members:1,contactEmail:\"exemple@email.com\",bio:\"Ceci est un artiste exemple créé automatiquement.\",createdAt:new Date()};await addDoc(collectionRef,initialDoc);console.log(`Document initial créé dans la collection ${collectionName}`);}return true;}catch(error){console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`,error);return false;}};// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockArtists=[{id:'mock-artist-1',name:'The Weeknd',genre:'R&B/Pop',location:'Toronto, Canada',members:1,contactEmail:'contact@theweeknd.com',contactPhone:'+1 123 456 7890',bio:'Abel Makkonen Tesfaye, connu sous le nom de The Weeknd, est un auteur-compositeur-interprète canadien.',imageUrl:'https://example.com/theweeknd.jpg',socialMedia:{spotify:'https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ',instagram:'https://instagram.com/theweeknd'},createdAt:new Date()},{id:'mock-artist-2',name:'Daft Punk',genre:'Electronic',location:'Paris, France',members:2,contactEmail:'contact@daftpunk.com',contactPhone:'+33 1 23 45 67 89',bio:'Daft Punk était un duo de musique électronique français formé en 1993 à Paris.',imageUrl:'https://example.com/daftpunk.jpg',socialMedia:{spotify:'https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi',instagram:'https://instagram.com/daftpunk'},createdAt:new Date()}];// Assurez-vous que la collection artists existe\nconst artistsCollection=collection(db,'artists');export const getArtists=async()=>{try{// S'assurer que la collection existe\nawait ensureCollection('artists');console.log(\"Tentative de récupération des artistes depuis Firebase...\");const q=query(artistsCollection,orderBy('name'));const snapshot=await getDocs(q);if(snapshot.empty){console.log(\"Aucun artiste trouvé dans Firebase, utilisation des données simulées\");return mockArtists;}const artists=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${artists.length} artistes récupérés depuis Firebase`);return artists;}catch(error){console.error(\"Erreur lors de la récupération des artistes:\",error);console.log(\"Utilisation des données simulées pour les artistes\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const artist of mockArtists){const{id,...artistData}=artist;await setDoc(doc(db,'artists',id),artistData);}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}// Retourner des données simulées en cas d'erreur d'authentification\nreturn mockArtists;}};export const getArtistById=async id=>{try{// S'assurer que la collection existe\nawait ensureCollection('artists');console.log(`Tentative de récupération de l'artiste ${id} depuis Firebase...`);const docRef=doc(db,'artists',id);const snapshot=await getDoc(docRef);if(snapshot.exists()){const artistData={id:snapshot.id,...snapshot.data()};console.log(`Artiste ${id} récupéré depuis Firebase:`,artistData);return artistData;}console.log(`Artiste ${id} non trouvé dans Firebase`);return null;}catch(error){console.error(`Erreur lors de la récupération de l'artiste ${id}:`,error);// Retourner un artiste simulé en cas d'erreur\nconst mockArtist=mockArtists.find(artist=>artist.id===id)||mockArtists[0];console.log(`Utilisation de l'artiste simulé:`,mockArtist);return mockArtist;}};export const addArtist=async artistData=>{try{// S'assurer que la collection existe\nawait ensureCollection('artists');console.log(\"Tentative d'ajout d'un artiste à Firebase:\",artistData);const docRef=await addDoc(artistsCollection,{...artistData,createdAt:new Date()});console.log(`Artiste ajouté avec succès, ID: ${docRef.id}`);return{id:docRef.id,...artistData};}catch(error){console.error(\"Erreur lors de l'ajout de l'artiste:\",error);console.log(\"Simulation de l'ajout d'un artiste\");// Essayer d'ajouter l'artiste avec un ID généré manuellement\ntry{const mockId='mock-artist-'+Date.now();await setDoc(doc(db,'artists',mockId),{...artistData,createdAt:new Date()});console.log(`Artiste ajouté avec un ID manuel: ${mockId}`);return{id:mockId,...artistData,createdAt:new Date()};}catch(addError){console.error(\"Erreur lors de l'ajout manuel de l'artiste:\",addError);// Simuler l'ajout d'un artiste en cas d'erreur\nconst mockId='mock-artist-'+Date.now();return{id:mockId,...artistData,createdAt:new Date()};}}};export const updateArtist=async(id,artistData)=>{try{// S'assurer que la collection existe\nawait ensureCollection('artists');console.log(`Tentative de mise à jour de l'artiste ${id}:`,artistData);const docRef=doc(db,'artists',id);await updateDoc(docRef,{...artistData,updatedAt:new Date()});console.log(`Artiste ${id} mis à jour avec succès`);return{id,...artistData};}catch(error){console.error(`Erreur lors de la mise à jour de l'artiste ${id}:`,error);console.log(\"Simulation de la mise à jour d'un artiste\");// Essayer de créer/remplacer le document\ntry{await setDoc(doc(db,'artists',id),{...artistData,updatedAt:new Date()});console.log(`Artiste ${id} créé/remplacé avec succès`);return{id,...artistData,updatedAt:new Date()};}catch(setError){console.error(`Erreur lors de la création/remplacement de l'artiste ${id}:`,setError);// Simuler la mise à jour d'un artiste en cas d'erreur\nreturn{id,...artistData,updatedAt:new Date()};}}};export const deleteArtist=async id=>{try{console.log(`Tentative de suppression de l'artiste ${id}`);const docRef=doc(db,'artists',id);await deleteDoc(docRef);console.log(`Artiste ${id} supprimé avec succès`);return id;}catch(error){console.error(`Erreur lors de la suppression de l'artiste ${id}:`,error);console.log(\"Simulation de la suppression d'un artiste\");// Simuler la suppression d'un artiste en cas d'erreur\nreturn id;}};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","setDoc","db","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","initialDoc","name","genre","location","members","contactEmail","bio","createdAt","Date","error","mockArtists","id","contactPhone","imageUrl","socialMedia","spotify","instagram","artistsCollection","getArtists","q","artists","docs","map","data","length","artist","artistData","addError","getArtistById","docRef","exists","mockArtist","find","addArtist","mockId","now","updateArtist","updatedAt","setError","deleteArtist"],"sources":["/workspaces/app-booking/client/src/services/artistsService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  setDoc\n} from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('name')));\n    \n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        name: \"Artiste exemple\",\n        genre: \"Rock\",\n        location: \"Paris\",\n        members: 1,\n        contactEmail: \"exemple@email.com\",\n        bio: \"Ceci est un artiste exemple créé automatiquement.\",\n        createdAt: new Date()\n      };\n      \n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockArtists = [\n  {\n    id: 'mock-artist-1',\n    name: 'The Weeknd',\n    genre: 'R&B/Pop',\n    location: 'Toronto, Canada',\n    members: 1,\n    contactEmail: 'contact@theweeknd.com',\n    contactPhone: '+1 123 456 7890',\n    bio: 'Abel Makkonen Tesfaye, connu sous le nom de The Weeknd, est un auteur-compositeur-interprète canadien.',\n    imageUrl: 'https://example.com/theweeknd.jpg',\n    socialMedia: {\n      spotify: 'https://open.spotify.com/artist/1Xyo4u8uXC1ZmMpatF05PJ',\n      instagram: 'https://instagram.com/theweeknd'\n    },\n    createdAt: new Date()\n  },\n  {\n    id: 'mock-artist-2',\n    name: 'Daft Punk',\n    genre: 'Electronic',\n    location: 'Paris, France',\n    members: 2,\n    contactEmail: 'contact@daftpunk.com',\n    contactPhone: '+33 1 23 45 67 89',\n    bio: 'Daft Punk était un duo de musique électronique français formé en 1993 à Paris.',\n    imageUrl: 'https://example.com/daftpunk.jpg',\n    socialMedia: {\n      spotify: 'https://open.spotify.com/artist/4tZwfgrHOc3mvqYlEYSvVi',\n      instagram: 'https://instagram.com/daftpunk'\n    },\n    createdAt: new Date()\n  }\n];\n\n// Assurez-vous que la collection artists existe\nconst artistsCollection = collection(db, 'artists');\n\nexport const getArtists = async () => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(\"Tentative de récupération des artistes depuis Firebase...\");\n    const q = query(artistsCollection, orderBy('name'));\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun artiste trouvé dans Firebase, utilisation des données simulées\");\n      return mockArtists;\n    }\n    \n    const artists = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${artists.length} artistes récupérés depuis Firebase`);\n    return artists;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des artistes:\", error);\n    console.log(\"Utilisation des données simulées pour les artistes\");\n    \n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const artist of mockArtists) {\n        const { id, ...artistData } = artist;\n        await setDoc(doc(db, 'artists', id), artistData);\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n    \n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockArtists;\n  }\n};\n\nexport const getArtistById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(`Tentative de récupération de l'artiste ${id} depuis Firebase...`);\n    const docRef = doc(db, 'artists', id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const artistData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Artiste ${id} récupéré depuis Firebase:`, artistData);\n      return artistData;\n    }\n    \n    console.log(`Artiste ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération de l'artiste ${id}:`, error);\n    // Retourner un artiste simulé en cas d'erreur\n    const mockArtist = mockArtists.find(artist => artist.id === id) || mockArtists[0];\n    console.log(`Utilisation de l'artiste simulé:`, mockArtist);\n    return mockArtist;\n  }\n};\n\nexport const addArtist = async (artistData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(\"Tentative d'ajout d'un artiste à Firebase:\", artistData);\n    const docRef = await addDoc(artistsCollection, {\n      ...artistData,\n      createdAt: new Date()\n    });\n    \n    console.log(`Artiste ajouté avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout de l'artiste:\", error);\n    console.log(\"Simulation de l'ajout d'un artiste\");\n    \n    // Essayer d'ajouter l'artiste avec un ID généré manuellement\n    try {\n      const mockId = 'mock-artist-' + Date.now();\n      await setDoc(doc(db, 'artists', mockId), {\n        ...artistData,\n        createdAt: new Date()\n      });\n      \n      console.log(`Artiste ajouté avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel de l'artiste:\", addError);\n      \n      // Simuler l'ajout d'un artiste en cas d'erreur\n      const mockId = 'mock-artist-' + Date.now();\n      return {\n        id: mockId,\n        ...artistData,\n        createdAt: new Date()\n      };\n    }\n  }\n};\n\nexport const updateArtist = async (id, artistData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('artists');\n    \n    console.log(`Tentative de mise à jour de l'artiste ${id}:`, artistData);\n    const docRef = doc(db, 'artists', id);\n    await updateDoc(docRef, {\n      ...artistData,\n      updatedAt: new Date()\n    });\n    \n    console.log(`Artiste ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...artistData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un artiste\");\n    \n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, 'artists', id), {\n        ...artistData,\n        updatedAt: new Date()\n      });\n      \n      console.log(`Artiste ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement de l'artiste ${id}:`, setError);\n      \n      // Simuler la mise à jour d'un artiste en cas d'erreur\n      return {\n        id,\n        ...artistData,\n        updatedAt: new Date()\n      };\n    }\n  }\n};\n\nexport const deleteArtist = async (id) => {\n  try {\n    console.log(`Tentative de suppression de l'artiste ${id}`);\n    const docRef = doc(db, 'artists', id);\n    await deleteDoc(docRef);\n    \n    console.log(`Artiste ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression de l'artiste ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un artiste\");\n    // Simuler la suppression d'un artiste en cas d'erreur\n    return id;\n  }\n};\n"],"mappings":"AAAA,OACEA,UAAU,CACVC,OAAO,CACPC,MAAM,CACNC,GAAG,CACHC,MAAM,CACNC,SAAS,CACTC,SAAS,CACTC,KAAK,CACLC,OAAO,CACPC,MAAM,KACD,oBAAoB,CAC3B,OAASC,EAAE,KAAQ,aAAa,CAEhC;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,cAAc,EAAK,CACjD,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAGb,UAAU,CAACU,EAAE,CAAEE,cAAc,CAAC,CACpD,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAb,OAAO,CAACM,KAAK,CAACM,aAAa,CAAEL,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAErE;AACA,GAAIM,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,cAAcL,cAAc,0CAA0C,CAAC,CACnF,KAAM,CAAAM,UAAU,CAAG,CACjBC,IAAI,CAAE,iBAAiB,CACvBC,KAAK,CAAE,MAAM,CACbC,QAAQ,CAAE,OAAO,CACjBC,OAAO,CAAE,CAAC,CACVC,YAAY,CAAE,mBAAmB,CACjCC,GAAG,CAAE,mDAAmD,CACxDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAAtB,MAAM,CAACS,aAAa,CAAEK,UAAU,CAAC,CACvCF,OAAO,CAACC,GAAG,CAAC,4CAA4CL,cAAc,EAAE,CAAC,CAC3E,CAEA,MAAO,KAAI,CACb,CAAE,MAAOe,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,4DAA4Df,cAAc,GAAG,CAAEe,KAAK,CAAC,CACnG,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,CACEC,EAAE,CAAE,eAAe,CACnBV,IAAI,CAAE,YAAY,CAClBC,KAAK,CAAE,SAAS,CAChBC,QAAQ,CAAE,iBAAiB,CAC3BC,OAAO,CAAE,CAAC,CACVC,YAAY,CAAE,uBAAuB,CACrCO,YAAY,CAAE,iBAAiB,CAC/BN,GAAG,CAAE,wGAAwG,CAC7GO,QAAQ,CAAE,mCAAmC,CAC7CC,WAAW,CAAE,CACXC,OAAO,CAAE,wDAAwD,CACjEC,SAAS,CAAE,iCACb,CAAC,CACDT,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACD,CACEG,EAAE,CAAE,eAAe,CACnBV,IAAI,CAAE,WAAW,CACjBC,KAAK,CAAE,YAAY,CACnBC,QAAQ,CAAE,eAAe,CACzBC,OAAO,CAAE,CAAC,CACVC,YAAY,CAAE,sBAAsB,CACpCO,YAAY,CAAE,mBAAmB,CACjCN,GAAG,CAAE,gFAAgF,CACrFO,QAAQ,CAAE,kCAAkC,CAC5CC,WAAW,CAAE,CACXC,OAAO,CAAE,wDAAwD,CACjEC,SAAS,CAAE,gCACb,CAAC,CACDT,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACF,CAED;AACA,KAAM,CAAAS,iBAAiB,CAAGnC,UAAU,CAACU,EAAE,CAAE,SAAS,CAAC,CAEnD,MAAO,MAAM,CAAA0B,UAAU,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF;AACA,KAAM,CAAAzB,gBAAgB,CAAC,SAAS,CAAC,CAEjCK,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC,CACxE,KAAM,CAAAoB,CAAC,CAAG9B,KAAK,CAAC4B,iBAAiB,CAAE3B,OAAO,CAAC,MAAM,CAAC,CAAC,CACnD,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAb,OAAO,CAACoC,CAAC,CAAC,CAEjC,GAAIvB,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC,CACnF,MAAO,CAAAW,WAAW,CACpB,CAEA,KAAM,CAAAU,OAAO,CAAGxB,QAAQ,CAACyB,IAAI,CAACC,GAAG,CAACrC,GAAG,GAAK,CACxC0B,EAAE,CAAE1B,GAAG,CAAC0B,EAAE,CACV,GAAG1B,GAAG,CAACsC,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEHzB,OAAO,CAACC,GAAG,CAAC,GAAGqB,OAAO,CAACI,MAAM,qCAAqC,CAAC,CACnE,MAAO,CAAAJ,OAAO,CAChB,CAAE,MAAOX,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACpEX,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC,CAEjE;AACA,GAAI,CACFD,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,IAAK,KAAM,CAAA0B,MAAM,GAAI,CAAAf,WAAW,CAAE,CAChC,KAAM,CAAEC,EAAE,CAAE,GAAGe,UAAW,CAAC,CAAGD,MAAM,CACpC,KAAM,CAAAlC,MAAM,CAACN,GAAG,CAACO,EAAE,CAAE,SAAS,CAAEmB,EAAE,CAAC,CAAEe,UAAU,CAAC,CAClD,CACA5B,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CACjE,CAAE,MAAO4B,QAAQ,CAAE,CACjB7B,OAAO,CAACW,KAAK,CAAC,8CAA8C,CAAEkB,QAAQ,CAAC,CACzE,CAEA;AACA,MAAO,CAAAjB,WAAW,CACpB,CACF,CAAC,CAED,MAAO,MAAM,CAAAkB,aAAa,CAAG,KAAO,CAAAjB,EAAE,EAAK,CACzC,GAAI,CACF;AACA,KAAM,CAAAlB,gBAAgB,CAAC,SAAS,CAAC,CAEjCK,OAAO,CAACC,GAAG,CAAC,0CAA0CY,EAAE,qBAAqB,CAAC,CAC9E,KAAM,CAAAkB,MAAM,CAAG5C,GAAG,CAACO,EAAE,CAAE,SAAS,CAAEmB,EAAE,CAAC,CACrC,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAZ,MAAM,CAAC6C,MAAM,CAAC,CAErC,GAAIjC,QAAQ,CAACkC,MAAM,CAAC,CAAC,CAAE,CACrB,KAAM,CAAAJ,UAAU,CAAG,CACjBf,EAAE,CAAEf,QAAQ,CAACe,EAAE,CACf,GAAGf,QAAQ,CAAC2B,IAAI,CAAC,CACnB,CAAC,CACDzB,OAAO,CAACC,GAAG,CAAC,WAAWY,EAAE,4BAA4B,CAAEe,UAAU,CAAC,CAClE,MAAO,CAAAA,UAAU,CACnB,CAEA5B,OAAO,CAACC,GAAG,CAAC,WAAWY,EAAE,2BAA2B,CAAC,CACrD,MAAO,KAAI,CACb,CAAE,MAAOF,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,+CAA+CE,EAAE,GAAG,CAAEF,KAAK,CAAC,CAC1E;AACA,KAAM,CAAAsB,UAAU,CAAGrB,WAAW,CAACsB,IAAI,CAACP,MAAM,EAAIA,MAAM,CAACd,EAAE,GAAKA,EAAE,CAAC,EAAID,WAAW,CAAC,CAAC,CAAC,CACjFZ,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAEgC,UAAU,CAAC,CAC3D,MAAO,CAAAA,UAAU,CACnB,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,SAAS,CAAG,KAAO,CAAAP,UAAU,EAAK,CAC7C,GAAI,CACF;AACA,KAAM,CAAAjC,gBAAgB,CAAC,SAAS,CAAC,CAEjCK,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAE2B,UAAU,CAAC,CACrE,KAAM,CAAAG,MAAM,CAAG,KAAM,CAAA3C,MAAM,CAAC+B,iBAAiB,CAAE,CAC7C,GAAGS,UAAU,CACbnB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFV,OAAO,CAACC,GAAG,CAAC,mCAAmC8B,MAAM,CAAClB,EAAE,EAAE,CAAC,CAC3D,MAAO,CACLA,EAAE,CAAEkB,MAAM,CAAClB,EAAE,CACb,GAAGe,UACL,CAAC,CACH,CAAE,MAAOjB,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5DX,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAEjD;AACA,GAAI,CACF,KAAM,CAAAmC,MAAM,CAAG,cAAc,CAAG1B,IAAI,CAAC2B,GAAG,CAAC,CAAC,CAC1C,KAAM,CAAA5C,MAAM,CAACN,GAAG,CAACO,EAAE,CAAE,SAAS,CAAE0C,MAAM,CAAC,CAAE,CACvC,GAAGR,UAAU,CACbnB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFV,OAAO,CAACC,GAAG,CAAC,qCAAqCmC,MAAM,EAAE,CAAC,CAC1D,MAAO,CACLvB,EAAE,CAAEuB,MAAM,CACV,GAAGR,UAAU,CACbnB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACH,CAAE,MAAOmB,QAAQ,CAAE,CACjB7B,OAAO,CAACW,KAAK,CAAC,6CAA6C,CAAEkB,QAAQ,CAAC,CAEtE;AACA,KAAM,CAAAO,MAAM,CAAG,cAAc,CAAG1B,IAAI,CAAC2B,GAAG,CAAC,CAAC,CAC1C,MAAO,CACLxB,EAAE,CAAEuB,MAAM,CACV,GAAGR,UAAU,CACbnB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACH,CACF,CACF,CAAC,CAED,MAAO,MAAM,CAAA4B,YAAY,CAAG,KAAAA,CAAOzB,EAAE,CAAEe,UAAU,GAAK,CACpD,GAAI,CACF;AACA,KAAM,CAAAjC,gBAAgB,CAAC,SAAS,CAAC,CAEjCK,OAAO,CAACC,GAAG,CAAC,yCAAyCY,EAAE,GAAG,CAAEe,UAAU,CAAC,CACvE,KAAM,CAAAG,MAAM,CAAG5C,GAAG,CAACO,EAAE,CAAE,SAAS,CAAEmB,EAAE,CAAC,CACrC,KAAM,CAAAxB,SAAS,CAAC0C,MAAM,CAAE,CACtB,GAAGH,UAAU,CACbW,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFV,OAAO,CAACC,GAAG,CAAC,WAAWY,EAAE,yBAAyB,CAAC,CACnD,MAAO,CACLA,EAAE,CACF,GAAGe,UACL,CAAC,CACH,CAAE,MAAOjB,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,8CAA8CE,EAAE,GAAG,CAAEF,KAAK,CAAC,CACzEX,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAExD;AACA,GAAI,CACF,KAAM,CAAAR,MAAM,CAACN,GAAG,CAACO,EAAE,CAAE,SAAS,CAAEmB,EAAE,CAAC,CAAE,CACnC,GAAGe,UAAU,CACbW,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFV,OAAO,CAACC,GAAG,CAAC,WAAWY,EAAE,4BAA4B,CAAC,CACtD,MAAO,CACLA,EAAE,CACF,GAAGe,UAAU,CACbW,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CACtB,CAAC,CACH,CAAE,MAAO8B,QAAQ,CAAE,CACjBxC,OAAO,CAACW,KAAK,CAAC,wDAAwDE,EAAE,GAAG,CAAE2B,QAAQ,CAAC,CAEtF;AACA,MAAO,CACL3B,EAAE,CACF,GAAGe,UAAU,CACbW,SAAS,CAAE,GAAI,CAAA7B,IAAI,CAAC,CACtB,CAAC,CACH,CACF,CACF,CAAC,CAED,MAAO,MAAM,CAAA+B,YAAY,CAAG,KAAO,CAAA5B,EAAE,EAAK,CACxC,GAAI,CACFb,OAAO,CAACC,GAAG,CAAC,yCAAyCY,EAAE,EAAE,CAAC,CAC1D,KAAM,CAAAkB,MAAM,CAAG5C,GAAG,CAACO,EAAE,CAAE,SAAS,CAAEmB,EAAE,CAAC,CACrC,KAAM,CAAAvB,SAAS,CAACyC,MAAM,CAAC,CAEvB/B,OAAO,CAACC,GAAG,CAAC,WAAWY,EAAE,uBAAuB,CAAC,CACjD,MAAO,CAAAA,EAAE,CACX,CAAE,MAAOF,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,8CAA8CE,EAAE,GAAG,CAAEF,KAAK,CAAC,CACzEX,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CACxD;AACA,MAAO,CAAAY,EAAE,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}