{"ast":null,"code":"import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,orderBy,where,setDoc,Timestamp,limit}from'firebase/firestore';import{db}from'../firebase';// Collection de référence\nconst FORM_SUBMISSIONS_COLLECTION='formSubmissions';// Assurez-vous que la collection existe\nconst ensureCollection=async collectionName=>{try{// Vérifier si la collection existe en essayant de récupérer des documents\nconst collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,orderBy('submittedAt','desc')));// Si la collection n'existe pas ou est vide, créer un document initial\nif(snapshot.empty){console.log(`Collection ${collectionName} vide, création d'un document initial...`);const initialDoc={programmerId:'mock-programmer-1',programmerName:'Didier Exemple',businessName:'Association Culturelle du Sud',contact:'Didier Martin',role:'Programmateur',address:'45 rue des Arts, 13001 Marseille',venue:'Festival du Sud',vatNumber:'FR12345678901',siret:'123 456 789 00012',email:'didier.martin@festivaldusud.fr',phone:'06 12 34 56 78',website:'https://www.festivaldusud.fr',status:'pending',submittedAt:Timestamp.fromDate(new Date()),notes:'Formulaire exemple créé automatiquement'};await addDoc(collectionRef,initialDoc);console.log(`Document initial créé dans la collection ${collectionName}`);}return true;}catch(error){console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`,error);return false;}};// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockFormSubmissions=[{id:'mock-form-1',programmerId:'mock-programmer-1',programmerName:'Didier Exemple',businessName:'Association Culturelle du Sud',contact:'Didier Martin',role:'Programmateur',address:'45 rue des Arts, 13001 Marseille',venue:'Festival du Sud',vatNumber:'FR12345678901',siret:'123 456 789 00012',email:'didier.martin@festivaldusud.fr',phone:'06 12 34 56 78',website:'https://www.festivaldusud.fr',status:'pending',submittedAt:new Date(),notes:'Formulaire exemple',// Nouveaux champs pour lier au concert\nconcertId:'mock-concert-1',concertName:'Concert exemple',concertDate:new Date(),formLinkId:'mock-link-1'},{id:'mock-form-2',programmerId:'mock-programmer-2',programmerName:'Jean Martin',businessName:'SARL La Cigale',contact:'Jean Martin',role:'Gérant',address:'120 boulevard de Rochechouart, 75018 Paris',venue:'La Cigale',vatNumber:'FR45678901234',siret:'456 789 012 00013',email:'jean.martin@lacigale.fr',phone:'01 23 45 67 89',website:'https://www.lacigale.fr',status:'processed',submittedAt:new Date(Date.now()-7*24*60*60*1000),// 7 jours avant\nprocessedAt:new Date(Date.now()-5*24*60*60*1000),// 5 jours avant\nnotes:'Formulaire traité',// Nouveaux champs pour lier au concert\nconcertId:'mock-concert-2',concertName:'Concert exemple 2',concertDate:new Date(Date.now()+30*24*60*60*1000),// 30 jours après\nformLinkId:'mock-link-2'},{id:'mock-form-3',programmerId:null,programmerName:null,businessName:'Le Petit Théâtre',contact:'Sophie Dubois',role:'Directrice',address:'15 rue des Lilas, 69003 Lyon',venue:'Le Petit Théâtre',vatNumber:'FR98765432109',siret:'987 654 321 00014',email:'sophie.dubois@petittheatre.fr',phone:'04 56 78 90 12',website:'https://www.petittheatre.fr',status:'pending',submittedAt:new Date(Date.now()-2*24*60*60*1000),// 2 jours avant\nnotes:'Formulaire sans programmateur associé',// Nouveaux champs pour lier au concert\nconcertId:'mock-concert-3',concertName:'Concert exemple 3',concertDate:new Date(Date.now()+15*24*60*60*1000),// 15 jours après\nformLinkId:'mock-link-3'}];// Assurez-vous que la collection formSubmissions existe\nconst formSubmissionsCollection=collection(db,FORM_SUBMISSIONS_COLLECTION);/**\n * Récupère tous les formulaires soumis\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des formulaires soumis\n */export const getFormSubmissions=async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(\"Tentative de récupération des formulaires depuis Firebase...\");// Création d'une requête de base\nlet formQuery=formSubmissionsCollection;// Application des filtres si nécessaire\nif(filters){// Filtrer par statut\nif(filters.status){formQuery=query(formQuery,where('status','==',filters.status));}// Filtrer par programmateur\nif(filters.programmerId){formQuery=query(formQuery,where('programmerId','==',filters.programmerId));}// Filtrer par concert\nif(filters.concertId){formQuery=query(formQuery,where('concertId','==',filters.concertId));}// Filtrer par lien de formulaire\nif(filters.formLinkId){formQuery=query(formQuery,where('formLinkId','==',filters.formLinkId));}}// Ajout d'un tri par date de soumission (du plus récent au plus ancien)\nformQuery=query(formQuery,orderBy('submittedAt','desc'));// Exécution de la requête\nconst snapshot=await getDocs(formQuery);if(snapshot.empty){console.log(\"Aucun formulaire trouvé dans Firebase, utilisation des données simulées\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const form of mockFormSubmissions){const{id,...formData}=form;await setDoc(doc(db,FORM_SUBMISSIONS_COLLECTION,id),{...formData,submittedAt:Timestamp.fromDate(formData.submittedAt),processedAt:formData.processedAt?Timestamp.fromDate(formData.processedAt):null,concertDate:formData.concertDate?Timestamp.fromDate(formData.concertDate):null});}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}return mockFormSubmissions;}const formSubmissions=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${formSubmissions.length} formulaires récupérés depuis Firebase`);return formSubmissions;}catch(error){console.error(\"Erreur lors de la récupération des formulaires:\",error);console.log(\"Utilisation des données simulées pour les formulaires\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const form of mockFormSubmissions){const{id,...formData}=form;await setDoc(doc(db,FORM_SUBMISSIONS_COLLECTION,id),{...formData,submittedAt:Timestamp.fromDate(formData.submittedAt),processedAt:formData.processedAt?Timestamp.fromDate(formData.processedAt):null,concertDate:formData.concertDate?Timestamp.fromDate(formData.concertDate):null});}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}// Retourner des données simulées en cas d'erreur d'authentification\nreturn mockFormSubmissions;}};/**\n * Récupère un formulaire soumis par son ID\n * @param {string} id - ID du formulaire\n * @returns {Promise<Object>} Données du formulaire\n */export const getFormSubmissionById=async id=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de récupération du formulaire ${id} depuis Firebase...`);const docRef=doc(db,FORM_SUBMISSIONS_COLLECTION,id);const snapshot=await getDoc(docRef);if(snapshot.exists()){const formData={id:snapshot.id,...snapshot.data()};console.log(`Formulaire ${id} récupéré depuis Firebase:`,formData);return formData;}console.log(`Formulaire ${id} non trouvé dans Firebase`);return null;}catch(error){console.error(`Erreur lors de la récupération du formulaire ${id}:`,error);// Retourner un formulaire simulé en cas d'erreur\nconst mockForm=mockFormSubmissions.find(form=>form.id===id)||mockFormSubmissions[0];console.log(`Utilisation du formulaire simulé:`,mockForm);return mockForm;}};/**\n * Crée un nouveau formulaire soumis\n * @param {Object} formData - Données du formulaire\n * @returns {Promise<Object>} Formulaire créé avec ID\n */export const createFormSubmission=async formData=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);// S'assurer que les champs obligatoires sont présents\nconst completeFormData={...formData,status:formData.status||'pending',submittedAt:Timestamp.fromDate(new Date()),// Convertir la date du concert en Timestamp si elle existe\nconcertDate:formData.concertDate?formData.concertDate instanceof Date?Timestamp.fromDate(formData.concertDate):formData.concertDate:null};console.log(\"Tentative d'ajout d'un formulaire à Firebase:\",completeFormData);const docRef=await addDoc(formSubmissionsCollection,completeFormData);console.log(`Formulaire ajouté avec succès, ID: ${docRef.id}`);return{id:docRef.id,...completeFormData};}catch(error){console.error(\"Erreur lors de l'ajout du formulaire:\",error);console.log(\"Simulation de l'ajout d'un formulaire\");// Essayer d'ajouter le formulaire avec un ID généré manuellement\ntry{const mockId='mock-form-'+Date.now();const completeFormData={...formData,status:formData.status||'pending',submittedAt:Timestamp.fromDate(new Date()),// Convertir la date du concert en Timestamp si elle existe\nconcertDate:formData.concertDate?formData.concertDate instanceof Date?Timestamp.fromDate(formData.concertDate):formData.concertDate:null};await setDoc(doc(db,FORM_SUBMISSIONS_COLLECTION,mockId),completeFormData);console.log(`Formulaire ajouté avec un ID manuel: ${mockId}`);return{id:mockId,...completeFormData};}catch(addError){console.error(\"Erreur lors de l'ajout manuel du formulaire:\",addError);// Simuler l'ajout d'un formulaire en cas d'erreur\nconst mockId='mock-form-'+Date.now();return{id:mockId,...formData,status:formData.status||'pending',submittedAt:new Date(),concertDate:formData.concertDate||null};}}};/**\n * Met à jour un formulaire soumis existant\n * @param {string} id - ID du formulaire\n * @param {Object} formData - Nouvelles données du formulaire\n * @returns {Promise<Object>} Formulaire mis à jour\n */export const updateFormSubmission=async(id,formData)=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de mise à jour du formulaire ${id}:`,formData);const docRef=doc(db,FORM_SUBMISSIONS_COLLECTION,id);// Si le statut change à 'processed' ou 'rejected', ajouter la date de traitement\nconst updateData={...formData};if((formData.status==='processed'||formData.status==='rejected')&&!formData.processedAt){updateData.processedAt=Timestamp.fromDate(new Date());}// Convertir la date du concert en Timestamp si elle existe\nif(updateData.concertDate){updateData.concertDate=updateData.concertDate instanceof Date?Timestamp.fromDate(updateData.concertDate):updateData.concertDate;}await updateDoc(docRef,updateData);console.log(`Formulaire ${id} mis à jour avec succès`);return{id,...updateData};}catch(error){console.error(`Erreur lors de la mise à jour du formulaire ${id}:`,error);console.log(\"Simulation de la mise à jour d'un formulaire\");// Essayer de créer/remplacer le document\ntry{// Si le statut change à 'processed' ou 'rejected', ajouter la date de traitement\nconst updateData={...formData};if((formData.status==='processed'||formData.status==='rejected')&&!formData.processedAt){updateData.processedAt=Timestamp.fromDate(new Date());}// Convertir la date du concert en Timestamp si elle existe\nif(updateData.concertDate){updateData.concertDate=updateData.concertDate instanceof Date?Timestamp.fromDate(updateData.concertDate):updateData.concertDate;}await setDoc(doc(db,FORM_SUBMISSIONS_COLLECTION,id),updateData,{merge:true});console.log(`Formulaire ${id} créé/remplacé avec succès`);return{id,...updateData};}catch(setError){console.error(`Erreur lors de la création/remplacement du formulaire ${id}:`,setError);// Simuler la mise à jour d'un formulaire en cas d'erreur\nreturn{id,...formData,processedAt:formData.status==='processed'||formData.status==='rejected'?new Date():null};}}};/**\n * Supprime un formulaire soumis\n * @param {string} id - ID du formulaire\n * @returns {Promise<string>} ID du formulaire supprimé\n */export const deleteFormSubmission=async id=>{try{console.log(`Tentative de suppression du formulaire ${id}`);const docRef=doc(db,FORM_SUBMISSIONS_COLLECTION,id);await deleteDoc(docRef);console.log(`Formulaire ${id} supprimé avec succès`);return id;}catch(error){console.error(`Erreur lors de la suppression du formulaire ${id}:`,error);console.log(\"Simulation de la suppression d'un formulaire\");// Simuler la suppression d'un formulaire en cas d'erreur\nreturn id;}};/**\n * Récupère les formulaires soumis pour un programmateur spécifique\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des formulaires soumis\n */export const getFormSubmissionsByProgrammer=async programmerId=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de récupération des formulaires pour le programmateur ${programmerId}...`);const formQuery=query(formSubmissionsCollection,where('programmerId','==',programmerId),orderBy('submittedAt','desc'));const snapshot=await getDocs(formQuery);if(snapshot.empty){console.log(`Aucun formulaire trouvé pour le programmateur ${programmerId}`);return[];}const formSubmissions=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${formSubmissions.length} formulaires récupérés pour le programmateur ${programmerId}`);return formSubmissions;}catch(error){console.error(`Erreur lors de la récupération des formulaires pour le programmateur ${programmerId}:`,error);// Retourner des formulaires simulés pour ce programmateur\nconst mockForms=mockFormSubmissions.filter(form=>form.programmerId===programmerId);console.log(`Utilisation de ${mockForms.length} formulaires simulés pour le programmateur ${programmerId}`);return mockForms;}};/**\n * Récupère les formulaires soumis par statut\n * @param {string} status - Statut des formulaires ('pending', 'processed', 'rejected')\n * @returns {Promise<Array>} Liste des formulaires soumis\n */export const getFormSubmissionsByStatus=async status=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de récupération des formulaires avec le statut ${status}...`);const formQuery=query(formSubmissionsCollection,where('status','==',status),orderBy('submittedAt','desc'));const snapshot=await getDocs(formQuery);if(snapshot.empty){console.log(`Aucun formulaire trouvé avec le statut ${status}`);return[];}const formSubmissions=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${formSubmissions.length} formulaires récupérés avec le statut ${status}`);return formSubmissions;}catch(error){console.error(`Erreur lors de la récupération des formulaires avec le statut ${status}:`,error);// Retourner des formulaires simulés pour ce statut\nconst mockForms=mockFormSubmissions.filter(form=>form.status===status);console.log(`Utilisation de ${mockForms.length} formulaires simulés avec le statut ${status}`);return mockForms;}};/**\n * Récupère les formulaires soumis pour un concert spécifique\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des formulaires soumis\n */export const getFormSubmissionsByConcert=async concertId=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de récupération des formulaires pour le concert ${concertId}...`);const formQuery=query(formSubmissionsCollection,where('concertId','==',concertId),orderBy('submittedAt','desc'));const snapshot=await getDocs(formQuery);if(snapshot.empty){console.log(`Aucun formulaire trouvé pour le concert ${concertId}`);return[];}const formSubmissions=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${formSubmissions.length} formulaires récupérés pour le concert ${concertId}`);return formSubmissions;}catch(error){console.error(`Erreur lors de la récupération des formulaires pour le concert ${concertId}:`,error);// Retourner des formulaires simulés pour ce concert\nconst mockForms=mockFormSubmissions.filter(form=>form.concertId===concertId);console.log(`Utilisation de ${mockForms.length} formulaires simulés pour le concert ${concertId}`);return mockForms;}};/**\n * Récupère un formulaire soumis par l'ID du lien de formulaire\n * @param {string} formLinkId - ID du lien de formulaire\n * @returns {Promise<Object>} Données du formulaire\n */export const getFormSubmissionByFormLinkId=async formLinkId=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_SUBMISSIONS_COLLECTION);console.log(`Tentative de récupération du formulaire pour le lien ${formLinkId}...`);const formQuery=query(formSubmissionsCollection,where('formLinkId','==',formLinkId),limit(1));const snapshot=await getDocs(formQuery);if(snapshot.empty){console.log(`Aucun formulaire trouvé pour le lien ${formLinkId}`);return null;}const formData={id:snapshot.docs[0].id,...snapshot.docs[0].data()};console.log(`Formulaire pour le lien ${formLinkId} récupéré:`,formData);return formData;}catch(error){console.error(`Erreur lors de la récupération du formulaire pour le lien ${formLinkId}:`,error);// Retourner un formulaire simulé pour ce lien\nconst mockForm=mockFormSubmissions.find(form=>form.formLinkId===formLinkId);console.log(`Utilisation du formulaire simulé pour le lien ${formLinkId}:`,mockForm);return mockForm;}};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","where","setDoc","Timestamp","limit","db","FORM_SUBMISSIONS_COLLECTION","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","initialDoc","programmerId","programmerName","businessName","contact","role","address","venue","vatNumber","siret","email","phone","website","status","submittedAt","fromDate","Date","notes","error","mockFormSubmissions","id","concertId","concertName","concertDate","formLinkId","now","processedAt","formSubmissionsCollection","getFormSubmissions","filters","arguments","length","undefined","formQuery","form","formData","addError","formSubmissions","docs","map","data","getFormSubmissionById","docRef","exists","mockForm","find","createFormSubmission","completeFormData","mockId","updateFormSubmission","updateData","merge","setError","deleteFormSubmission","getFormSubmissionsByProgrammer","mockForms","filter","getFormSubmissionsByStatus","getFormSubmissionsByConcert","getFormSubmissionByFormLinkId"],"sources":["/workspaces/app-booking/client/src/services/formSubmissionsService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  where,\n  setDoc,\n  Timestamp,\n  limit\n} from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Collection de référence\nconst FORM_SUBMISSIONS_COLLECTION = 'formSubmissions';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('submittedAt', 'desc')));\n    \n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        programmerId: 'mock-programmer-1',\n        programmerName: 'Didier Exemple',\n        businessName: 'Association Culturelle du Sud',\n        contact: 'Didier Martin',\n        role: 'Programmateur',\n        address: '45 rue des Arts, 13001 Marseille',\n        venue: 'Festival du Sud',\n        vatNumber: 'FR12345678901',\n        siret: '123 456 789 00012',\n        email: 'didier.martin@festivaldusud.fr',\n        phone: '06 12 34 56 78',\n        website: 'https://www.festivaldusud.fr',\n        status: 'pending',\n        submittedAt: Timestamp.fromDate(new Date()),\n        notes: 'Formulaire exemple créé automatiquement'\n      };\n      \n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockFormSubmissions = [\n  {\n    id: 'mock-form-1',\n    programmerId: 'mock-programmer-1',\n    programmerName: 'Didier Exemple',\n    businessName: 'Association Culturelle du Sud',\n    contact: 'Didier Martin',\n    role: 'Programmateur',\n    address: '45 rue des Arts, 13001 Marseille',\n    venue: 'Festival du Sud',\n    vatNumber: 'FR12345678901',\n    siret: '123 456 789 00012',\n    email: 'didier.martin@festivaldusud.fr',\n    phone: '06 12 34 56 78',\n    website: 'https://www.festivaldusud.fr',\n    status: 'pending',\n    submittedAt: new Date(),\n    notes: 'Formulaire exemple',\n    // Nouveaux champs pour lier au concert\n    concertId: 'mock-concert-1',\n    concertName: 'Concert exemple',\n    concertDate: new Date(),\n    formLinkId: 'mock-link-1'\n  },\n  {\n    id: 'mock-form-2',\n    programmerId: 'mock-programmer-2',\n    programmerName: 'Jean Martin',\n    businessName: 'SARL La Cigale',\n    contact: 'Jean Martin',\n    role: 'Gérant',\n    address: '120 boulevard de Rochechouart, 75018 Paris',\n    venue: 'La Cigale',\n    vatNumber: 'FR45678901234',\n    siret: '456 789 012 00013',\n    email: 'jean.martin@lacigale.fr',\n    phone: '01 23 45 67 89',\n    website: 'https://www.lacigale.fr',\n    status: 'processed',\n    submittedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 jours avant\n    processedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 jours avant\n    notes: 'Formulaire traité',\n    // Nouveaux champs pour lier au concert\n    concertId: 'mock-concert-2',\n    concertName: 'Concert exemple 2',\n    concertDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours après\n    formLinkId: 'mock-link-2'\n  },\n  {\n    id: 'mock-form-3',\n    programmerId: null,\n    programmerName: null,\n    businessName: 'Le Petit Théâtre',\n    contact: 'Sophie Dubois',\n    role: 'Directrice',\n    address: '15 rue des Lilas, 69003 Lyon',\n    venue: 'Le Petit Théâtre',\n    vatNumber: 'FR98765432109',\n    siret: '987 654 321 00014',\n    email: 'sophie.dubois@petittheatre.fr',\n    phone: '04 56 78 90 12',\n    website: 'https://www.petittheatre.fr',\n    status: 'pending',\n    submittedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 jours avant\n    notes: 'Formulaire sans programmateur associé',\n    // Nouveaux champs pour lier au concert\n    concertId: 'mock-concert-3',\n    concertName: 'Concert exemple 3',\n    concertDate: new Date(Date.now() + 15 * 24 * 60 * 60 * 1000), // 15 jours après\n    formLinkId: 'mock-link-3'\n  }\n];\n\n// Assurez-vous que la collection formSubmissions existe\nconst formSubmissionsCollection = collection(db, FORM_SUBMISSIONS_COLLECTION);\n\n/**\n * Récupère tous les formulaires soumis\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des formulaires soumis\n */\nexport const getFormSubmissions = async (filters = {}) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(\"Tentative de récupération des formulaires depuis Firebase...\");\n    \n    // Création d'une requête de base\n    let formQuery = formSubmissionsCollection;\n    \n    // Application des filtres si nécessaire\n    if (filters) {\n      // Filtrer par statut\n      if (filters.status) {\n        formQuery = query(formQuery, where('status', '==', filters.status));\n      }\n      \n      // Filtrer par programmateur\n      if (filters.programmerId) {\n        formQuery = query(formQuery, where('programmerId', '==', filters.programmerId));\n      }\n      \n      // Filtrer par concert\n      if (filters.concertId) {\n        formQuery = query(formQuery, where('concertId', '==', filters.concertId));\n      }\n      \n      // Filtrer par lien de formulaire\n      if (filters.formLinkId) {\n        formQuery = query(formQuery, where('formLinkId', '==', filters.formLinkId));\n      }\n    }\n    \n    // Ajout d'un tri par date de soumission (du plus récent au plus ancien)\n    formQuery = query(formQuery, orderBy('submittedAt', 'desc'));\n    \n    // Exécution de la requête\n    const snapshot = await getDocs(formQuery);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun formulaire trouvé dans Firebase, utilisation des données simulées\");\n      \n      // Essayer d'ajouter les données simulées à Firebase\n      try {\n        console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n        for (const form of mockFormSubmissions) {\n          const { id, ...formData } = form;\n          await setDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, id), {\n            ...formData,\n            submittedAt: Timestamp.fromDate(formData.submittedAt),\n            processedAt: formData.processedAt ? Timestamp.fromDate(formData.processedAt) : null,\n            concertDate: formData.concertDate ? Timestamp.fromDate(formData.concertDate) : null\n          });\n        }\n        console.log(\"Données simulées ajoutées à Firebase avec succès\");\n      } catch (addError) {\n        console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n      }\n      \n      return mockFormSubmissions;\n    }\n    \n    const formSubmissions = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${formSubmissions.length} formulaires récupérés depuis Firebase`);\n    return formSubmissions;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des formulaires:\", error);\n    console.log(\"Utilisation des données simulées pour les formulaires\");\n    \n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const form of mockFormSubmissions) {\n        const { id, ...formData } = form;\n        await setDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, id), {\n          ...formData,\n          submittedAt: Timestamp.fromDate(formData.submittedAt),\n          processedAt: formData.processedAt ? Timestamp.fromDate(formData.processedAt) : null,\n          concertDate: formData.concertDate ? Timestamp.fromDate(formData.concertDate) : null\n        });\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n    \n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockFormSubmissions;\n  }\n};\n\n/**\n * Récupère un formulaire soumis par son ID\n * @param {string} id - ID du formulaire\n * @returns {Promise<Object>} Données du formulaire\n */\nexport const getFormSubmissionById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de récupération du formulaire ${id} depuis Firebase...`);\n    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const formData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Formulaire ${id} récupéré depuis Firebase:`, formData);\n      return formData;\n    }\n    \n    console.log(`Formulaire ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du formulaire ${id}:`, error);\n    // Retourner un formulaire simulé en cas d'erreur\n    const mockForm = mockFormSubmissions.find(form => form.id === id) || mockFormSubmissions[0];\n    console.log(`Utilisation du formulaire simulé:`, mockForm);\n    return mockForm;\n  }\n};\n\n/**\n * Crée un nouveau formulaire soumis\n * @param {Object} formData - Données du formulaire\n * @returns {Promise<Object>} Formulaire créé avec ID\n */\nexport const createFormSubmission = async (formData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    // S'assurer que les champs obligatoires sont présents\n    const completeFormData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submittedAt: Timestamp.fromDate(new Date()),\n      // Convertir la date du concert en Timestamp si elle existe\n      concertDate: formData.concertDate ? \n        (formData.concertDate instanceof Date ? \n          Timestamp.fromDate(formData.concertDate) : \n          formData.concertDate) : \n        null\n    };\n    \n    console.log(\"Tentative d'ajout d'un formulaire à Firebase:\", completeFormData);\n    const docRef = await addDoc(formSubmissionsCollection, completeFormData);\n    \n    console.log(`Formulaire ajouté avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...completeFormData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout du formulaire:\", error);\n    console.log(\"Simulation de l'ajout d'un formulaire\");\n    \n    // Essayer d'ajouter le formulaire avec un ID généré manuellement\n    try {\n      const mockId = 'mock-form-' + Date.now();\n      const completeFormData = {\n        ...formData,\n        status: formData.status || 'pending',\n        submittedAt: Timestamp.fromDate(new Date()),\n        // Convertir la date du concert en Timestamp si elle existe\n        concertDate: formData.concertDate ? \n          (formData.concertDate instanceof Date ? \n            Timestamp.fromDate(formData.concertDate) : \n            formData.concertDate) : \n          null\n      };\n      \n      await setDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, mockId), completeFormData);\n      \n      console.log(`Formulaire ajouté avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...completeFormData\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel du formulaire:\", addError);\n      \n      // Simuler l'ajout d'un formulaire en cas d'erreur\n      const mockId = 'mock-form-' + Date.now();\n      return {\n        id: mockId,\n        ...formData,\n        status: formData.status || 'pending',\n        submittedAt: new Date(),\n        concertDate: formData.concertDate || null\n      };\n    }\n  }\n};\n\n/**\n * Met à jour un formulaire soumis existant\n * @param {string} id - ID du formulaire\n * @param {Object} formData - Nouvelles données du formulaire\n * @returns {Promise<Object>} Formulaire mis à jour\n */\nexport const updateFormSubmission = async (id, formData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de mise à jour du formulaire ${id}:`, formData);\n    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);\n    \n    // Si le statut change à 'processed' ou 'rejected', ajouter la date de traitement\n    const updateData = { ...formData };\n    if ((formData.status === 'processed' || formData.status === 'rejected') && !formData.processedAt) {\n      updateData.processedAt = Timestamp.fromDate(new Date());\n    }\n    \n    // Convertir la date du concert en Timestamp si elle existe\n    if (updateData.concertDate) {\n      updateData.concertDate = updateData.concertDate instanceof Date ? \n        Timestamp.fromDate(updateData.concertDate) : \n        updateData.concertDate;\n    }\n    \n    await updateDoc(docRef, updateData);\n    \n    console.log(`Formulaire ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...updateData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour du formulaire ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un formulaire\");\n    \n    // Essayer de créer/remplacer le document\n    try {\n      // Si le statut change à 'processed' ou 'rejected', ajouter la date de traitement\n      const updateData = { ...formData };\n      if ((formData.status === 'processed' || formData.status === 'rejected') && !formData.processedAt) {\n        updateData.processedAt = Timestamp.fromDate(new Date());\n      }\n      \n      // Convertir la date du concert en Timestamp si elle existe\n      if (updateData.concertDate) {\n        updateData.concertDate = updateData.concertDate instanceof Date ? \n          Timestamp.fromDate(updateData.concertDate) : \n          updateData.concertDate;\n      }\n      \n      await setDoc(doc(db, FORM_SUBMISSIONS_COLLECTION, id), updateData, { merge: true });\n      \n      console.log(`Formulaire ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...updateData\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement du formulaire ${id}:`, setError);\n      \n      // Simuler la mise à jour d'un formulaire en cas d'erreur\n      return {\n        id,\n        ...formData,\n        processedAt: (formData.status === 'processed' || formData.status === 'rejected') ? new Date() : null\n      };\n    }\n  }\n};\n\n/**\n * Supprime un formulaire soumis\n * @param {string} id - ID du formulaire\n * @returns {Promise<string>} ID du formulaire supprimé\n */\nexport const deleteFormSubmission = async (id) => {\n  try {\n    console.log(`Tentative de suppression du formulaire ${id}`);\n    const docRef = doc(db, FORM_SUBMISSIONS_COLLECTION, id);\n    await deleteDoc(docRef);\n    \n    console.log(`Formulaire ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression du formulaire ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un formulaire\");\n    // Simuler la suppression d'un formulaire en cas d'erreur\n    return id;\n  }\n};\n\n/**\n * Récupère les formulaires soumis pour un programmateur spécifique\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des formulaires soumis\n */\nexport const getFormSubmissionsByProgrammer = async (programmerId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de récupération des formulaires pour le programmateur ${programmerId}...`);\n    const formQuery = query(\n      formSubmissionsCollection, \n      where('programmerId', '==', programmerId),\n      orderBy('submittedAt', 'desc')\n    );\n    \n    const snapshot = await getDocs(formQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun formulaire trouvé pour le programmateur ${programmerId}`);\n      return [];\n    }\n    \n    const formSubmissions = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${formSubmissions.length} formulaires récupérés pour le programmateur ${programmerId}`);\n    return formSubmissions;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération des formulaires pour le programmateur ${programmerId}:`, error);\n    // Retourner des formulaires simulés pour ce programmateur\n    const mockForms = mockFormSubmissions.filter(form => form.programmerId === programmerId);\n    console.log(`Utilisation de ${mockForms.length} formulaires simulés pour le programmateur ${programmerId}`);\n    return mockForms;\n  }\n};\n\n/**\n * Récupère les formulaires soumis par statut\n * @param {string} status - Statut des formulaires ('pending', 'processed', 'rejected')\n * @returns {Promise<Array>} Liste des formulaires soumis\n */\nexport const getFormSubmissionsByStatus = async (status) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de récupération des formulaires avec le statut ${status}...`);\n    const formQuery = query(\n      formSubmissionsCollection, \n      where('status', '==', status),\n      orderBy('submittedAt', 'desc')\n    );\n    \n    const snapshot = await getDocs(formQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun formulaire trouvé avec le statut ${status}`);\n      return [];\n    }\n    \n    const formSubmissions = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${formSubmissions.length} formulaires récupérés avec le statut ${status}`);\n    return formSubmissions;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération des formulaires avec le statut ${status}:`, error);\n    // Retourner des formulaires simulés pour ce statut\n    const mockForms = mockFormSubmissions.filter(form => form.status === status);\n    console.log(`Utilisation de ${mockForms.length} formulaires simulés avec le statut ${status}`);\n    return mockForms;\n  }\n};\n\n/**\n * Récupère les formulaires soumis pour un concert spécifique\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des formulaires soumis\n */\nexport const getFormSubmissionsByConcert = async (concertId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de récupération des formulaires pour le concert ${concertId}...`);\n    const formQuery = query(\n      formSubmissionsCollection, \n      where('concertId', '==', concertId),\n      orderBy('submittedAt', 'desc')\n    );\n    \n    const snapshot = await getDocs(formQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun formulaire trouvé pour le concert ${concertId}`);\n      return [];\n    }\n    \n    const formSubmissions = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${formSubmissions.length} formulaires récupérés pour le concert ${concertId}`);\n    return formSubmissions;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération des formulaires pour le concert ${concertId}:`, error);\n    // Retourner des formulaires simulés pour ce concert\n    const mockForms = mockFormSubmissions.filter(form => form.concertId === concertId);\n    console.log(`Utilisation de ${mockForms.length} formulaires simulés pour le concert ${concertId}`);\n    return mockForms;\n  }\n};\n\n/**\n * Récupère un formulaire soumis par l'ID du lien de formulaire\n * @param {string} formLinkId - ID du lien de formulaire\n * @returns {Promise<Object>} Données du formulaire\n */\nexport const getFormSubmissionByFormLinkId = async (formLinkId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_SUBMISSIONS_COLLECTION);\n    \n    console.log(`Tentative de récupération du formulaire pour le lien ${formLinkId}...`);\n    const formQuery = query(\n      formSubmissionsCollection, \n      where('formLinkId', '==', formLinkId),\n      limit(1)\n    );\n    \n    const snapshot = await getDocs(formQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun formulaire trouvé pour le lien ${formLinkId}`);\n      return null;\n    }\n    \n    const formData = {\n      id: snapshot.docs[0].id,\n      ...snapshot.docs[0].data()\n    };\n    \n    console.log(`Formulaire pour le lien ${formLinkId} récupéré:`, formData);\n    return formData;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du formulaire pour le lien ${formLinkId}:`, error);\n    // Retourner un formulaire simulé pour ce lien\n    const mockForm = mockFormSubmissions.find(form => form.formLinkId === formLinkId);\n    console.log(`Utilisation du formulaire simulé pour le lien ${formLinkId}:`, mockForm);\n    return mockForm;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}