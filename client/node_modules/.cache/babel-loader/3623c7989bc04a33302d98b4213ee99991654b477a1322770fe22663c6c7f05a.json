{"ast":null,"code":"var _jsxFileName = \"/workspaces/app-booking/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport PublicFormPage from './components/public/PublicFormPage';\nimport FormSubmittedPage from './components/public/FormSubmittedPage';\n\n// Fonction pour vérifier si l'URL actuelle est une route publique\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isPublicRoute = () => {\n  // Obtenir le hash de l'URL (pour HashRouter)\n  const hash = window.location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanPath = hash.replace(/^#/, '');\n  console.log('index.js - Hash brut:', hash);\n  console.log('index.js - Chemin nettoyé:', cleanPath);\n\n  // Vérifier si le chemin correspond à une route publique\n  const isPublic = cleanPath.startsWith('/form/') || cleanPath === '/form-submitted';\n  console.log('index.js - Est une route publique:', isPublic);\n  return isPublic;\n};\n\n// Extraire l'ID du concert de l'URL si c'est une route de formulaire\nconst extractConcertId = () => {\n  const hash = window.location.hash || '';\n  const match = hash.match(/^#\\/form\\/([^\\/]+)$/);\n  return match ? match[1] : null;\n};\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Si c'est une route publique, rendre directement le composant correspondant sans AuthProvider\nif (isPublicRoute()) {\n  const concertId = extractConcertId();\n  console.log('index.js - Rendu direct du composant public avec concertId:', concertId);\n\n  // Déterminer quel composant public rendre\n  const hash = window.location.hash || '';\n  const cleanPath = hash.replace(/^#/, '');\n  if (cleanPath === '/form-submitted') {\n    root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n      children: /*#__PURE__*/_jsxDEV(HashRouter, {\n        children: /*#__PURE__*/_jsxDEV(FormSubmittedPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n  } else {\n    root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n      children: /*#__PURE__*/_jsxDEV(HashRouter, {\n        children: /*#__PURE__*/_jsxDEV(PublicFormPage, {\n          concertId: concertId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this));\n  }\n} else {\n  // Pour les routes protégées, rendre l'application normale avec AuthProvider\n  console.log('index.js - Rendu de l\\'application normale avec AuthProvider');\n  root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: /*#__PURE__*/_jsxDEV(AuthProvider, {\n        children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this));\n}","map":{"version":3,"names":["React","ReactDOM","App","HashRouter","AuthProvider","PublicFormPage","FormSubmittedPage","jsxDEV","_jsxDEV","isPublicRoute","hash","window","location","cleanPath","replace","console","log","isPublic","startsWith","extractConcertId","match","root","createRoot","document","getElementById","concertId","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspaces/app-booking/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport { AuthProvider } from './context/AuthContext';\nimport PublicFormPage from './components/public/PublicFormPage';\nimport FormSubmittedPage from './components/public/FormSubmittedPage';\n\n// Fonction pour vérifier si l'URL actuelle est une route publique\nconst isPublicRoute = () => {\n  // Obtenir le hash de l'URL (pour HashRouter)\n  const hash = window.location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanPath = hash.replace(/^#/, '');\n  \n  console.log('index.js - Hash brut:', hash);\n  console.log('index.js - Chemin nettoyé:', cleanPath);\n  \n  // Vérifier si le chemin correspond à une route publique\n  const isPublic = cleanPath.startsWith('/form/') || cleanPath === '/form-submitted';\n  console.log('index.js - Est une route publique:', isPublic);\n  \n  return isPublic;\n};\n\n// Extraire l'ID du concert de l'URL si c'est une route de formulaire\nconst extractConcertId = () => {\n  const hash = window.location.hash || '';\n  const match = hash.match(/^#\\/form\\/([^\\/]+)$/);\n  return match ? match[1] : null;\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Si c'est une route publique, rendre directement le composant correspondant sans AuthProvider\nif (isPublicRoute()) {\n  const concertId = extractConcertId();\n  console.log('index.js - Rendu direct du composant public avec concertId:', concertId);\n  \n  // Déterminer quel composant public rendre\n  const hash = window.location.hash || '';\n  const cleanPath = hash.replace(/^#/, '');\n  \n  if (cleanPath === '/form-submitted') {\n    root.render(\n      <React.StrictMode>\n        <HashRouter>\n          <FormSubmittedPage />\n        </HashRouter>\n      </React.StrictMode>\n    );\n  } else {\n    root.render(\n      <React.StrictMode>\n        <HashRouter>\n          <PublicFormPage concertId={concertId} />\n        </HashRouter>\n      </React.StrictMode>\n    );\n  }\n} else {\n  // Pour les routes protégées, rendre l'application normale avec AuthProvider\n  console.log('index.js - Rendu de l\\'application normale avec AuthProvider');\n  root.render(\n    <React.StrictMode>\n      <HashRouter>\n        <AuthProvider>\n          <App />\n        </AuthProvider>\n      </HashRouter>\n    </React.StrictMode>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}