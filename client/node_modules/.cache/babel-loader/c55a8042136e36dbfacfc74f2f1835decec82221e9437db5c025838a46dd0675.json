{"ast":null,"code":"// client/src/services/contractsService.js\nimport{db}from'../firebase';import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,where,orderBy}from'firebase/firestore';// Collection de référence\nconst CONTRACTS_COLLECTION='contracts';/**\n * Récupère tous les contrats\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des contrats\n */export const fetchContracts=async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// Création d'une requête de base\nlet contractsQuery=collection(db,CONTRACTS_COLLECTION);// Application des filtres si nécessaire\nif(filters){// Filtrer par artiste\nif(filters.artist){contractsQuery=query(contractsQuery,where('artist.name','>=',filters.artist),where('artist.name','<=',filters.artist+'\\uf8ff'));}// Filtrer par lieu\nif(filters.venue){contractsQuery=query(contractsQuery,where('venue','>=',filters.venue),where('venue','<=',filters.venue+'\\uf8ff'));}// Filtrer par projet\nif(filters.project){contractsQuery=query(contractsQuery,where('project','>=',filters.project),where('project','<=',filters.project+'\\uf8ff'));}}// Ajout d'un tri par date\ncontractsQuery=query(contractsQuery,orderBy('date','desc'));// Exécution de la requête\nconst querySnapshot=await getDocs(contractsQuery);// Transformation des documents en objets JavaScript\nconst contracts=[];querySnapshot.forEach(doc=>{contracts.push({id:doc.id,...doc.data()});});return contracts;}catch(error){console.error('Erreur lors de la récupération des contrats:',error);// En cas d'erreur, retourner des données fictives pour le développement\nconst mockContracts=[{id:'1',concertId:'mock-concert-1',date:'2025-05-15',optionDate:'2025-03-01',artist:{id:'a1',name:'Les Harmonies Urbaines'},project:'Tournée Printemps',venue:'L\\'Olympia',city:'Paris',programmer:{id:'p1',name:'Jean Dupont'},amount:2500,formStatus:'validated',contractSentStatus:'validated',contractSignedStatus:'pending',invoiceStatus:'pending',status:'en_cours'},{id:'2',concertId:'mock-concert-2',date:'2025-06-20',optionDate:'2025-04-01',artist:{id:'a2',name:'Échos Poétiques'},project:'Festival d\\'été',venue:'Zénith',city:'Lille',programmer:{id:'p2',name:'Marie Martin'},amount:3000,formStatus:'validated',contractSentStatus:'validated',contractSignedStatus:'validated',invoiceStatus:'pending',status:'confirmé'},{id:'3',concertId:'mock-concert-3',date:'2025-07-10',optionDate:null,artist:{id:'a3',name:'Rythmes Solaires'},project:'Showcase',venue:'La Cigale',city:'Paris',programmer:{id:'p3',name:'Sophie Lefebvre'},amount:1800,formStatus:'pending',contractSentStatus:'pending',contractSignedStatus:'pending',invoiceStatus:'pending',status:'en_négociation'},{id:'4',concertId:'mock-concert-4',date:'2025-08-05',optionDate:'2025-05-15',artist:{id:'a4',name:'Jazz Fusion Quartet'},project:'Jazz Tour',venue:'New Morning',city:'Paris',programmer:{id:'p4',name:'Pierre Dubois'},amount:2200,formStatus:'validated',contractSentStatus:'validated',contractSignedStatus:'validated',invoiceStatus:'validated',status:'confirmé'},{id:'5',concertId:'mock-concert-5',date:'2025-09-12',optionDate:'2025-06-20',artist:{id:'a5',name:'Électro Symphonie'},project:'Électro Night',venue:'Bataclan',city:'Paris',programmer:{id:'p5',name:'Lucie Moreau'},amount:2800,formStatus:'validated',contractSentStatus:'cancelled',contractSignedStatus:'pending',invoiceStatus:'pending',status:'en_négociation'}];return mockContracts;}};/**\n * Récupère un contrat par son ID\n * @param {string} id - ID du contrat\n * @returns {Promise<Object>} Données du contrat\n */export const getContractById=async id=>{try{const contractDoc=await getDoc(doc(db,CONTRACTS_COLLECTION,id));if(contractDoc.exists()){return{id:contractDoc.id,...contractDoc.data()};}else{throw new Error('Contrat non trouvé');}}catch(error){console.error('Erreur lors de la récupération du contrat:',error);throw error;}};/**\n * Crée un nouveau contrat\n * @param {Object} contractData - Données du contrat\n * @returns {Promise<Object>} Contrat créé avec ID\n */export const createContract=async contractData=>{try{// S'assurer que les nouveaux champs sont présents\nconst completeContractData={...contractData,project:contractData.project||null,optionDate:contractData.optionDate||null,amount:contractData.amount||0,formStatus:contractData.formStatus||'pending',contractSentStatus:contractData.contractSentStatus||'pending',contractSignedStatus:contractData.contractSignedStatus||'pending',invoiceStatus:contractData.invoiceStatus||'pending'};const docRef=await addDoc(collection(db,CONTRACTS_COLLECTION),completeContractData);return{id:docRef.id,...completeContractData};}catch(error){console.error('Erreur lors de la création du contrat:',error);// En cas d'erreur, simuler la création d'un contrat\nconst mockId='mock-contract-'+Date.now();return{id:mockId,...contractData};}};/**\n * Met à jour un contrat existant\n * @param {string} id - ID du contrat\n * @param {Object} contractData - Nouvelles données du contrat\n * @returns {Promise<Object>} Contrat mis à jour\n */export const updateContract=async(id,contractData)=>{try{await updateDoc(doc(db,CONTRACTS_COLLECTION,id),contractData);return{id,...contractData};}catch(error){console.error('Erreur lors de la mise à jour du contrat:',error);throw error;}};/**\n * Supprime un contrat\n * @param {string} id - ID du contrat\n * @returns {Promise<string>} ID du contrat supprimé\n */export const deleteContract=async id=>{try{await deleteDoc(doc(db,CONTRACTS_COLLECTION,id));return id;}catch(error){console.error('Erreur lors de la suppression du contrat:',error);throw error;}};/**\n * Supprime les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des IDs des contrats supprimés\n */export const deleteContractsByConcert=async concertId=>{try{// Récupérer tous les contrats liés au concert\nconst contractsQuery=query(collection(db,CONTRACTS_COLLECTION),where('concertId','==',concertId));const querySnapshot=await getDocs(contractsQuery);// Si aucun contrat n'est trouvé, retourner un tableau vide\nif(querySnapshot.empty){return[];}// Supprimer chaque contrat et collecter les IDs\nconst deletedIds=[];const deletePromises=[];querySnapshot.forEach(doc=>{deletedIds.push(doc.id);deletePromises.push(deleteDoc(doc.ref));});// Attendre que toutes les suppressions soient terminées\nawait Promise.all(deletePromises);console.log(`${deletedIds.length} contrats liés au concert ${concertId} ont été supprimés`);return deletedIds;}catch(error){console.error(`Erreur lors de la suppression des contrats liés au concert ${concertId}:`,error);throw error;}};/**\n * Récupère les contrats liés à un artiste\n * @param {string} artistId - ID de l'artiste\n * @returns {Promise<Array>} Liste des contrats\n */export const getContractsByArtist=async artistId=>{try{const contractsQuery=query(collection(db,CONTRACTS_COLLECTION),where('artist.id','==',artistId),orderBy('date','desc'));const querySnapshot=await getDocs(contractsQuery);const contracts=[];querySnapshot.forEach(doc=>{contracts.push({id:doc.id,...doc.data()});});return contracts;}catch(error){console.error('Erreur lors de la récupération des contrats par artiste:',error);throw error;}};/**\n * Récupère les contrats liés à un programmateur\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des contrats\n */export const getContractsByProgrammer=async programmerId=>{try{const contractsQuery=query(collection(db,CONTRACTS_COLLECTION),where('programmer.id','==',programmerId),orderBy('date','desc'));const querySnapshot=await getDocs(contractsQuery);const contracts=[];querySnapshot.forEach(doc=>{contracts.push({id:doc.id,...doc.data()});});return contracts;}catch(error){console.error('Erreur lors de la récupération des contrats par programmateur:',error);throw error;}};/**\n * Récupère les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des contrats\n */export const getContractsByConcert=async concertId=>{try{const contractsQuery=query(collection(db,CONTRACTS_COLLECTION),where('concertId','==',concertId));const querySnapshot=await getDocs(contractsQuery);const contracts=[];querySnapshot.forEach(doc=>{contracts.push({id:doc.id,...doc.data()});});return contracts;}catch(error){console.error('Erreur lors de la récupération des contrats par concert:',error);throw error;}};/**\n * Récupère les contrats par projet\n * @param {string} project - Nom du projet\n * @returns {Promise<Array>} Liste des contrats\n */export const getContractsByProject=async project=>{try{const contractsQuery=query(collection(db,CONTRACTS_COLLECTION),where('project','==',project),orderBy('date','desc'));const querySnapshot=await getDocs(contractsQuery);const contracts=[];querySnapshot.forEach(doc=>{contracts.push({id:doc.id,...doc.data()});});return contracts;}catch(error){console.error('Erreur lors de la récupération des contrats par projet:',error);throw error;}};","map":{"version":3,"names":["db","collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","orderBy","CONTRACTS_COLLECTION","fetchContracts","filters","arguments","length","undefined","contractsQuery","artist","venue","project","querySnapshot","contracts","forEach","push","id","data","error","console","mockContracts","concertId","date","optionDate","name","city","programmer","amount","formStatus","contractSentStatus","contractSignedStatus","invoiceStatus","status","getContractById","contractDoc","exists","Error","createContract","contractData","completeContractData","docRef","mockId","Date","now","updateContract","deleteContract","deleteContractsByConcert","empty","deletedIds","deletePromises","ref","Promise","all","log","getContractsByArtist","artistId","getContractsByProgrammer","programmerId","getContractsByConcert","getContractsByProject"],"sources":["/workspaces/app-booking/client/src/services/contractsService.js"],"sourcesContent":["// client/src/services/contractsService.js\nimport { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\n\n// Collection de référence\nconst CONTRACTS_COLLECTION = 'contracts';\n\n/**\n * Récupère tous les contrats\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const fetchContracts = async (filters = {}) => {\n  try {\n    // Création d'une requête de base\n    let contractsQuery = collection(db, CONTRACTS_COLLECTION);\n    \n    // Application des filtres si nécessaire\n    if (filters) {\n      // Filtrer par artiste\n      if (filters.artist) {\n        contractsQuery = query(contractsQuery, where('artist.name', '>=', filters.artist), \n                                             where('artist.name', '<=', filters.artist + '\\uf8ff'));\n      }\n      \n      // Filtrer par lieu\n      if (filters.venue) {\n        contractsQuery = query(contractsQuery, where('venue', '>=', filters.venue), \n                                             where('venue', '<=', filters.venue + '\\uf8ff'));\n      }\n      \n      // Filtrer par projet\n      if (filters.project) {\n        contractsQuery = query(contractsQuery, where('project', '>=', filters.project), \n                                             where('project', '<=', filters.project + '\\uf8ff'));\n      }\n    }\n    \n    // Ajout d'un tri par date\n    contractsQuery = query(contractsQuery, orderBy('date', 'desc'));\n    \n    // Exécution de la requête\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    // Transformation des documents en objets JavaScript\n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats:', error);\n    \n    // En cas d'erreur, retourner des données fictives pour le développement\n    const mockContracts = [\n      {\n        id: '1',\n        concertId: 'mock-concert-1',\n        date: '2025-05-15',\n        optionDate: '2025-03-01',\n        artist: { id: 'a1', name: 'Les Harmonies Urbaines' },\n        project: 'Tournée Printemps',\n        venue: 'L\\'Olympia',\n        city: 'Paris',\n        programmer: { id: 'p1', name: 'Jean Dupont' },\n        amount: 2500,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_cours'\n      },\n      {\n        id: '2',\n        concertId: 'mock-concert-2',\n        date: '2025-06-20',\n        optionDate: '2025-04-01',\n        artist: { id: 'a2', name: 'Échos Poétiques' },\n        project: 'Festival d\\'été',\n        venue: 'Zénith',\n        city: 'Lille',\n        programmer: { id: 'p2', name: 'Marie Martin' },\n        amount: 3000,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'validated',\n        invoiceStatus: 'pending',\n        status: 'confirmé'\n      },\n      {\n        id: '3',\n        concertId: 'mock-concert-3',\n        date: '2025-07-10',\n        optionDate: null,\n        artist: { id: 'a3', name: 'Rythmes Solaires' },\n        project: 'Showcase',\n        venue: 'La Cigale',\n        city: 'Paris',\n        programmer: { id: 'p3', name: 'Sophie Lefebvre' },\n        amount: 1800,\n        formStatus: 'pending',\n        contractSentStatus: 'pending',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_négociation'\n      },\n      {\n        id: '4',\n        concertId: 'mock-concert-4',\n        date: '2025-08-05',\n        optionDate: '2025-05-15',\n        artist: { id: 'a4', name: 'Jazz Fusion Quartet' },\n        project: 'Jazz Tour',\n        venue: 'New Morning',\n        city: 'Paris',\n        programmer: { id: 'p4', name: 'Pierre Dubois' },\n        amount: 2200,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'validated',\n        invoiceStatus: 'validated',\n        status: 'confirmé'\n      },\n      {\n        id: '5',\n        concertId: 'mock-concert-5',\n        date: '2025-09-12',\n        optionDate: '2025-06-20',\n        artist: { id: 'a5', name: 'Électro Symphonie' },\n        project: 'Électro Night',\n        venue: 'Bataclan',\n        city: 'Paris',\n        programmer: { id: 'p5', name: 'Lucie Moreau' },\n        amount: 2800,\n        formStatus: 'validated',\n        contractSentStatus: 'cancelled',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_négociation'\n      }\n    ];\n    \n    return mockContracts;\n  }\n};\n\n/**\n * Récupère un contrat par son ID\n * @param {string} id - ID du contrat\n * @returns {Promise<Object>} Données du contrat\n */\nexport const getContractById = async (id) => {\n  try {\n    const contractDoc = await getDoc(doc(db, CONTRACTS_COLLECTION, id));\n    \n    if (contractDoc.exists()) {\n      return {\n        id: contractDoc.id,\n        ...contractDoc.data()\n      };\n    } else {\n      throw new Error('Contrat non trouvé');\n    }\n  } catch (error) {\n    console.error('Erreur lors de la récupération du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Crée un nouveau contrat\n * @param {Object} contractData - Données du contrat\n * @returns {Promise<Object>} Contrat créé avec ID\n */\nexport const createContract = async (contractData) => {\n  try {\n    // S'assurer que les nouveaux champs sont présents\n    const completeContractData = {\n      ...contractData,\n      project: contractData.project || null,\n      optionDate: contractData.optionDate || null,\n      amount: contractData.amount || 0,\n      formStatus: contractData.formStatus || 'pending',\n      contractSentStatus: contractData.contractSentStatus || 'pending',\n      contractSignedStatus: contractData.contractSignedStatus || 'pending',\n      invoiceStatus: contractData.invoiceStatus || 'pending'\n    };\n    \n    const docRef = await addDoc(collection(db, CONTRACTS_COLLECTION), completeContractData);\n    return {\n      id: docRef.id,\n      ...completeContractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création du contrat:', error);\n    \n    // En cas d'erreur, simuler la création d'un contrat\n    const mockId = 'mock-contract-' + Date.now();\n    return {\n      id: mockId,\n      ...contractData\n    };\n  }\n};\n\n/**\n * Met à jour un contrat existant\n * @param {string} id - ID du contrat\n * @param {Object} contractData - Nouvelles données du contrat\n * @returns {Promise<Object>} Contrat mis à jour\n */\nexport const updateContract = async (id, contractData) => {\n  try {\n    await updateDoc(doc(db, CONTRACTS_COLLECTION, id), contractData);\n    return {\n      id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la mise à jour du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime un contrat\n * @param {string} id - ID du contrat\n * @returns {Promise<string>} ID du contrat supprimé\n */\nexport const deleteContract = async (id) => {\n  try {\n    await deleteDoc(doc(db, CONTRACTS_COLLECTION, id));\n    return id;\n  } catch (error) {\n    console.error('Erreur lors de la suppression du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des IDs des contrats supprimés\n */\nexport const deleteContractsByConcert = async (concertId) => {\n  try {\n    // Récupérer tous les contrats liés au concert\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('concertId', '==', concertId)\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    // Si aucun contrat n'est trouvé, retourner un tableau vide\n    if (querySnapshot.empty) {\n      return [];\n    }\n    \n    // Supprimer chaque contrat et collecter les IDs\n    const deletedIds = [];\n    const deletePromises = [];\n    \n    querySnapshot.forEach((doc) => {\n      deletedIds.push(doc.id);\n      deletePromises.push(deleteDoc(doc.ref));\n    });\n    \n    // Attendre que toutes les suppressions soient terminées\n    await Promise.all(deletePromises);\n    \n    console.log(`${deletedIds.length} contrats liés au concert ${concertId} ont été supprimés`);\n    return deletedIds;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression des contrats liés au concert ${concertId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un artiste\n * @param {string} artistId - ID de l'artiste\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByArtist = async (artistId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('artist.id', '==', artistId),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par artiste:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un programmateur\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProgrammer = async (programmerId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('programmer.id', '==', programmerId),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par programmateur:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByConcert = async (concertId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('concertId', '==', concertId)\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par concert:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats par projet\n * @param {string} project - Nom du projet\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProject = async (project) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('project', '==', project),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par projet:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}