{"ast":null,"code":"import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,orderBy,where,setDoc}from'firebase/firestore';import{db}from'../firebase';import{createContract,deleteContractsByConcert}from'./contractsService';// Assurez-vous que la collection existe\nconst ensureCollection=async collectionName=>{try{// Vérifier si la collection existe en essayant de récupérer des documents\nconst collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,orderBy('date','desc')));// Si la collection n'existe pas ou est vide, créer un document initial\nif(snapshot.empty){console.log(`Collection ${collectionName} vide, création d'un document initial...`);const initialDoc={artist:{id:'mock-artist-1',name:'Artiste Exemple'},programmer:{id:'mock-programmer-1',name:'Programmateur Exemple',structure:'Salle Exemple'},date:'2025-12-31',time:'20:00',venue:'Salle de concert',city:'Paris',price:25,status:'En attente',notes:'Concert exemple créé automatiquement',createdAt:new Date()};await addDoc(collectionRef,initialDoc);console.log(`Document initial créé dans la collection ${collectionName}`);}return true;}catch(error){console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`,error);return false;}};// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockConcerts=[{id:'mock-concert-1',artist:{id:'mock-artist-1',name:'The Weeknd'},programmer:{id:'mock-programmer-1',name:'Marie Dupont',structure:'Association Vibrations'},date:'2025-06-15',time:'20:00',venue:'Stade de France',city:'Paris',price:85,status:'Confirmé',notes:'Concert complet',createdAt:new Date()},{id:'mock-concert-2',artist:{id:'mock-artist-2',name:'Daft Punk'},programmer:{id:'mock-programmer-2',name:'Jean Martin',structure:'La Cigale'},date:'2025-07-20',time:'21:00',venue:'La Cigale',city:'Paris',price:65,status:'En attente',notes:'Tournée de retour',createdAt:new Date()}];// Assurez-vous que la collection concerts existe\nconst concertsCollection=collection(db,'concerts');export const getConcerts=async()=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(\"Tentative de récupération des concerts depuis Firebase...\");const q=query(concertsCollection,orderBy('date','desc'));const snapshot=await getDocs(q);if(snapshot.empty){console.log(\"Aucun concert trouvé dans Firebase, utilisation des données simulées\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const concert of mockConcerts){const{id,...concertData}=concert;await setDoc(doc(db,'concerts',id),concertData);}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}return mockConcerts;}const concerts=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${concerts.length} concerts récupérés depuis Firebase`);return concerts;}catch(error){console.error(\"Erreur lors de la récupération des concerts:\",error);console.log(\"Utilisation des données simulées pour les concerts\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const concert of mockConcerts){const{id,...concertData}=concert;await setDoc(doc(db,'concerts',id),concertData);}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}// Retourner des données simulées en cas d'erreur d'authentification\nreturn mockConcerts;}};export const getConcertsByArtist=async artistId=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(`Tentative de récupération des concerts pour l'artiste ${artistId}...`);const q=query(concertsCollection,where('artist.id','==',artistId),orderBy('date','desc'));const snapshot=await getDocs(q);if(snapshot.empty){console.log(`Aucun concert trouvé pour l'artiste ${artistId}`);return[];}const concerts=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${concerts.length} concerts récupérés pour l'artiste ${artistId}`);return concerts;}catch(error){console.error(`Erreur lors de la récupération des concerts pour l'artiste ${artistId}:`,error);// Retourner des concerts simulés pour cet artiste\nconst mockArtistConcerts=mockConcerts.filter(concert=>concert.artist.id===artistId);console.log(`Utilisation de ${mockArtistConcerts.length} concerts simulés pour l'artiste ${artistId}`);return mockArtistConcerts;}};export const getConcertsByProgrammer=async programmerId=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(`Tentative de récupération des concerts pour le programmateur ${programmerId}...`);const q=query(concertsCollection,where('programmer.id','==',programmerId),orderBy('date','desc'));const snapshot=await getDocs(q);if(snapshot.empty){console.log(`Aucun concert trouvé pour le programmateur ${programmerId}`);return[];}const concerts=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${concerts.length} concerts récupérés pour le programmateur ${programmerId}`);return concerts;}catch(error){console.error(`Erreur lors de la récupération des concerts pour le programmateur ${programmerId}:`,error);// Retourner des concerts simulés pour ce programmateur\nconst mockProgrammerConcerts=mockConcerts.filter(concert=>concert.programmer.id===programmerId);console.log(`Utilisation de ${mockProgrammerConcerts.length} concerts simulés pour le programmateur ${programmerId}`);return mockProgrammerConcerts;}};export const getConcertById=async id=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(`Tentative de récupération du concert ${id} depuis Firebase...`);const docRef=doc(db,'concerts',id);const snapshot=await getDoc(docRef);if(snapshot.exists()){const concertData={id:snapshot.id,...snapshot.data()};console.log(`Concert ${id} récupéré depuis Firebase:`,concertData);return concertData;}console.log(`Concert ${id} non trouvé dans Firebase`);return null;}catch(error){console.error(`Erreur lors de la récupération du concert ${id}:`,error);// Retourner un concert simulé en cas d'erreur\nconst mockConcert=mockConcerts.find(concert=>concert.id===id)||mockConcerts[0];console.log(`Utilisation du concert simulé:`,mockConcert);return mockConcert;}};export const addConcert=async concertData=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(\"Tentative d'ajout d'un concert à Firebase:\",concertData);const docRef=await addDoc(concertsCollection,{...concertData,createdAt:new Date()});console.log(`Concert ajouté avec succès, ID: ${docRef.id}`);// Créer automatiquement un contrat associé au concert\ntry{const contractData={concertId:docRef.id,date:concertData.date,optionDate:concertData.optionDate||null,artist:concertData.artist,project:concertData.project||null,venue:concertData.venue,city:concertData.city,programmer:concertData.programmer,amount:concertData.price||0,formStatus:'pending',contractSentStatus:'pending',contractSignedStatus:'pending',invoiceStatus:'pending',status:'en_cours',createdAt:new Date()};const newContract=await createContract(contractData);console.log(`Contrat créé automatiquement pour le concert ${docRef.id}:`,newContract);}catch(contractError){console.error(\"Erreur lors de la création automatique du contrat:\",contractError);}return{id:docRef.id,...concertData};}catch(error){console.error(\"Erreur lors de l'ajout du concert:\",error);console.log(\"Simulation de l'ajout d'un concert\");// Essayer d'ajouter le concert avec un ID généré manuellement\ntry{const mockId='mock-concert-'+Date.now();await setDoc(doc(db,'concerts',mockId),{...concertData,createdAt:new Date()});console.log(`Concert ajouté avec un ID manuel: ${mockId}`);// Créer automatiquement un contrat associé au concert simulé\ntry{const contractData={concertId:mockId,date:concertData.date,optionDate:concertData.optionDate||null,artist:concertData.artist,project:concertData.project||null,venue:concertData.venue,city:concertData.city,programmer:concertData.programmer,amount:concertData.price||0,formStatus:'pending',contractSentStatus:'pending',contractSignedStatus:'pending',invoiceStatus:'pending',status:'en_cours',createdAt:new Date()};const newContract=await createContract(contractData);console.log(`Contrat créé automatiquement pour le concert simulé ${mockId}:`,newContract);}catch(contractError){console.error(\"Erreur lors de la création automatique du contrat simulé:\",contractError);}return{id:mockId,...concertData,createdAt:new Date()};}catch(addError){console.error(\"Erreur lors de l'ajout manuel du concert:\",addError);// Simuler l'ajout d'un concert en cas d'erreur\nconst mockId='mock-concert-'+Date.now();return{id:mockId,...concertData,createdAt:new Date()};}}};export const updateConcert=async(id,concertData)=>{try{// S'assurer que la collection existe\nawait ensureCollection('concerts');console.log(`Tentative de mise à jour du concert ${id}:`,concertData);const docRef=doc(db,'concerts',id);await updateDoc(docRef,{...concertData,updatedAt:new Date()});console.log(`Concert ${id} mis à jour avec succès`);return{id,...concertData};}catch(error){console.error(`Erreur lors de la mise à jour du concert ${id}:`,error);console.log(\"Simulation de la mise à jour d'un concert\");// Essayer de créer/remplacer le document\ntry{await setDoc(doc(db,'concerts',id),{...concertData,updatedAt:new Date()});console.log(`Concert ${id} créé/remplacé avec succès`);return{id,...concertData,updatedAt:new Date()};}catch(setError){console.error(`Erreur lors de la création/remplacement du concert ${id}:`,setError);// Simuler la mise à jour d'un concert en cas d'erreur\nreturn{id,...concertData,updatedAt:new Date()};}}};export const deleteConcert=async id=>{try{console.log(`Tentative de suppression du concert ${id}`);const docRef=doc(db,'concerts',id);await deleteDoc(docRef);// Supprimer également tous les contrats liés à ce concert\ntry{const deletedContractIds=await deleteContractsByConcert(id);console.log(`Concert ${id} et ${deletedContractIds.length} contrats associés supprimés avec succès`);}catch(contractError){console.error(`Erreur lors de la suppression des contrats liés au concert ${id}:`,contractError);}return id;}catch(error){console.error(`Erreur lors de la suppression du concert ${id}:`,error);console.log(\"Simulation de la suppression d'un concert\");// Tenter de supprimer les contrats associés même en cas d'erreur\ntry{const deletedContractIds=await deleteContractsByConcert(id);console.log(`${deletedContractIds.length} contrats associés au concert ${id} supprimés avec succès`);}catch(contractError){console.error(`Erreur lors de la suppression des contrats liés au concert ${id}:`,contractError);}// Simuler la suppression d'un concert en cas d'erreur\nreturn id;}};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","where","setDoc","db","createContract","deleteContractsByConcert","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","initialDoc","artist","id","name","programmer","structure","date","time","venue","city","price","status","notes","createdAt","Date","error","mockConcerts","concertsCollection","getConcerts","q","concert","concertData","addError","concerts","docs","map","data","length","getConcertsByArtist","artistId","mockArtistConcerts","filter","getConcertsByProgrammer","programmerId","mockProgrammerConcerts","getConcertById","docRef","exists","mockConcert","find","addConcert","contractData","concertId","optionDate","project","amount","formStatus","contractSentStatus","contractSignedStatus","invoiceStatus","newContract","contractError","mockId","now","updateConcert","updatedAt","setError","deleteConcert","deletedContractIds"],"sources":["/workspaces/app-booking/client/src/services/concertsService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  where,\n  setDoc\n} from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { createContract, deleteContractsByConcert } from './contractsService';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('date', 'desc')));\n    \n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        artist: {\n          id: 'mock-artist-1',\n          name: 'Artiste Exemple'\n        },\n        programmer: {\n          id: 'mock-programmer-1',\n          name: 'Programmateur Exemple',\n          structure: 'Salle Exemple'\n        },\n        date: '2025-12-31',\n        time: '20:00',\n        venue: 'Salle de concert',\n        city: 'Paris',\n        price: 25,\n        status: 'En attente',\n        notes: 'Concert exemple créé automatiquement',\n        createdAt: new Date()\n      };\n      \n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockConcerts = [\n  {\n    id: 'mock-concert-1',\n    artist: {\n      id: 'mock-artist-1',\n      name: 'The Weeknd'\n    },\n    programmer: {\n      id: 'mock-programmer-1',\n      name: 'Marie Dupont',\n      structure: 'Association Vibrations'\n    },\n    date: '2025-06-15',\n    time: '20:00',\n    venue: 'Stade de France',\n    city: 'Paris',\n    price: 85,\n    status: 'Confirmé',\n    notes: 'Concert complet',\n    createdAt: new Date()\n  },\n  {\n    id: 'mock-concert-2',\n    artist: {\n      id: 'mock-artist-2',\n      name: 'Daft Punk'\n    },\n    programmer: {\n      id: 'mock-programmer-2',\n      name: 'Jean Martin',\n      structure: 'La Cigale'\n    },\n    date: '2025-07-20',\n    time: '21:00',\n    venue: 'La Cigale',\n    city: 'Paris',\n    price: 65,\n    status: 'En attente',\n    notes: 'Tournée de retour',\n    createdAt: new Date()\n  }\n];\n\n// Assurez-vous que la collection concerts existe\nconst concertsCollection = collection(db, 'concerts');\n\nexport const getConcerts = async () => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(\"Tentative de récupération des concerts depuis Firebase...\");\n    const q = query(concertsCollection, orderBy('date', 'desc'));\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun concert trouvé dans Firebase, utilisation des données simulées\");\n      \n      // Essayer d'ajouter les données simulées à Firebase\n      try {\n        console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n        for (const concert of mockConcerts) {\n          const { id, ...concertData } = concert;\n          await setDoc(doc(db, 'concerts', id), concertData);\n        }\n        console.log(\"Données simulées ajoutées à Firebase avec succès\");\n      } catch (addError) {\n        console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n      }\n      \n      return mockConcerts;\n    }\n    \n    const concerts = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${concerts.length} concerts récupérés depuis Firebase`);\n    return concerts;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des concerts:\", error);\n    console.log(\"Utilisation des données simulées pour les concerts\");\n    \n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const concert of mockConcerts) {\n        const { id, ...concertData } = concert;\n        await setDoc(doc(db, 'concerts', id), concertData);\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n    \n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockConcerts;\n  }\n};\n\nexport const getConcertsByArtist = async (artistId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(`Tentative de récupération des concerts pour l'artiste ${artistId}...`);\n    const q = query(\n      concertsCollection, \n      where('artist.id', '==', artistId),\n      orderBy('date', 'desc')\n    );\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun concert trouvé pour l'artiste ${artistId}`);\n      return [];\n    }\n    \n    const concerts = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${concerts.length} concerts récupérés pour l'artiste ${artistId}`);\n    return concerts;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération des concerts pour l'artiste ${artistId}:`, error);\n    // Retourner des concerts simulés pour cet artiste\n    const mockArtistConcerts = mockConcerts.filter(concert => concert.artist.id === artistId);\n    console.log(`Utilisation de ${mockArtistConcerts.length} concerts simulés pour l'artiste ${artistId}`);\n    return mockArtistConcerts;\n  }\n};\n\nexport const getConcertsByProgrammer = async (programmerId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(`Tentative de récupération des concerts pour le programmateur ${programmerId}...`);\n    const q = query(\n      concertsCollection, \n      where('programmer.id', '==', programmerId),\n      orderBy('date', 'desc')\n    );\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun concert trouvé pour le programmateur ${programmerId}`);\n      return [];\n    }\n    \n    const concerts = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${concerts.length} concerts récupérés pour le programmateur ${programmerId}`);\n    return concerts;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération des concerts pour le programmateur ${programmerId}:`, error);\n    // Retourner des concerts simulés pour ce programmateur\n    const mockProgrammerConcerts = mockConcerts.filter(concert => concert.programmer.id === programmerId);\n    console.log(`Utilisation de ${mockProgrammerConcerts.length} concerts simulés pour le programmateur ${programmerId}`);\n    return mockProgrammerConcerts;\n  }\n};\n\nexport const getConcertById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(`Tentative de récupération du concert ${id} depuis Firebase...`);\n    const docRef = doc(db, 'concerts', id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const concertData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Concert ${id} récupéré depuis Firebase:`, concertData);\n      return concertData;\n    }\n    \n    console.log(`Concert ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du concert ${id}:`, error);\n    // Retourner un concert simulé en cas d'erreur\n    const mockConcert = mockConcerts.find(concert => concert.id === id) || mockConcerts[0];\n    console.log(`Utilisation du concert simulé:`, mockConcert);\n    return mockConcert;\n  }\n};\n\nexport const addConcert = async (concertData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(\"Tentative d'ajout d'un concert à Firebase:\", concertData);\n    const docRef = await addDoc(concertsCollection, {\n      ...concertData,\n      createdAt: new Date()\n    });\n    \n    console.log(`Concert ajouté avec succès, ID: ${docRef.id}`);\n    \n    // Créer automatiquement un contrat associé au concert\n    try {\n      const contractData = {\n        concertId: docRef.id,\n        date: concertData.date,\n        optionDate: concertData.optionDate || null,\n        artist: concertData.artist,\n        project: concertData.project || null,\n        venue: concertData.venue,\n        city: concertData.city,\n        programmer: concertData.programmer,\n        amount: concertData.price || 0,\n        formStatus: 'pending',\n        contractSentStatus: 'pending',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_cours',\n        createdAt: new Date()\n      };\n      \n      const newContract = await createContract(contractData);\n      console.log(`Contrat créé automatiquement pour le concert ${docRef.id}:`, newContract);\n    } catch (contractError) {\n      console.error(\"Erreur lors de la création automatique du contrat:\", contractError);\n    }\n    \n    return {\n      id: docRef.id,\n      ...concertData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout du concert:\", error);\n    console.log(\"Simulation de l'ajout d'un concert\");\n    \n    // Essayer d'ajouter le concert avec un ID généré manuellement\n    try {\n      const mockId = 'mock-concert-' + Date.now();\n      await setDoc(doc(db, 'concerts', mockId), {\n        ...concertData,\n        createdAt: new Date()\n      });\n      \n      console.log(`Concert ajouté avec un ID manuel: ${mockId}`);\n      \n      // Créer automatiquement un contrat associé au concert simulé\n      try {\n        const contractData = {\n          concertId: mockId,\n          date: concertData.date,\n          optionDate: concertData.optionDate || null,\n          artist: concertData.artist,\n          project: concertData.project || null,\n          venue: concertData.venue,\n          city: concertData.city,\n          programmer: concertData.programmer,\n          amount: concertData.price || 0,\n          formStatus: 'pending',\n          contractSentStatus: 'pending',\n          contractSignedStatus: 'pending',\n          invoiceStatus: 'pending',\n          status: 'en_cours',\n          createdAt: new Date()\n        };\n        \n        const newContract = await createContract(contractData);\n        console.log(`Contrat créé automatiquement pour le concert simulé ${mockId}:`, newContract);\n      } catch (contractError) {\n        console.error(\"Erreur lors de la création automatique du contrat simulé:\", contractError);\n      }\n      \n      return {\n        id: mockId,\n        ...concertData,\n        createdAt: new Date()\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel du concert:\", addError);\n      \n      // Simuler l'ajout d'un concert en cas d'erreur\n      const mockId = 'mock-concert-' + Date.now();\n      return {\n        id: mockId,\n        ...concertData,\n        createdAt: new Date()\n      };\n    }\n  }\n};\n\nexport const updateConcert = async (id, concertData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('concerts');\n    \n    console.log(`Tentative de mise à jour du concert ${id}:`, concertData);\n    const docRef = doc(db, 'concerts', id);\n    await updateDoc(docRef, {\n      ...concertData,\n      updatedAt: new Date()\n    });\n    \n    console.log(`Concert ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...concertData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour du concert ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un concert\");\n    \n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, 'concerts', id), {\n        ...concertData,\n        updatedAt: new Date()\n      });\n      \n      console.log(`Concert ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...concertData,\n        updatedAt: new Date()\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement du concert ${id}:`, setError);\n      \n      // Simuler la mise à jour d'un concert en cas d'erreur\n      return {\n        id,\n        ...concertData,\n        updatedAt: new Date()\n      };\n    }\n  }\n};\n\nexport const deleteConcert = async (id) => {\n  try {\n    console.log(`Tentative de suppression du concert ${id}`);\n    const docRef = doc(db, 'concerts', id);\n    await deleteDoc(docRef);\n    \n    // Supprimer également tous les contrats liés à ce concert\n    try {\n      const deletedContractIds = await deleteContractsByConcert(id);\n      console.log(`Concert ${id} et ${deletedContractIds.length} contrats associés supprimés avec succès`);\n    } catch (contractError) {\n      console.error(`Erreur lors de la suppression des contrats liés au concert ${id}:`, contractError);\n    }\n    \n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression du concert ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un concert\");\n    \n    // Tenter de supprimer les contrats associés même en cas d'erreur\n    try {\n      const deletedContractIds = await deleteContractsByConcert(id);\n      console.log(`${deletedContractIds.length} contrats associés au concert ${id} supprimés avec succès`);\n    } catch (contractError) {\n      console.error(`Erreur lors de la suppression des contrats liés au concert ${id}:`, contractError);\n    }\n    \n    // Simuler la suppression d'un concert en cas d'erreur\n    return id;\n  }\n};\n"],"mappings":"AAAA,OACEA,UAAU,CACVC,OAAO,CACPC,MAAM,CACNC,GAAG,CACHC,MAAM,CACNC,SAAS,CACTC,SAAS,CACTC,KAAK,CACLC,OAAO,CACPC,KAAK,CACLC,MAAM,KACD,oBAAoB,CAC3B,OAASC,EAAE,KAAQ,aAAa,CAChC,OAASC,cAAc,CAAEC,wBAAwB,KAAQ,oBAAoB,CAE7E;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,cAAc,EAAK,CACjD,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAGhB,UAAU,CAACW,EAAE,CAAEI,cAAc,CAAC,CACpD,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAhB,OAAO,CAACM,KAAK,CAACS,aAAa,CAAER,OAAO,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CAAC,CAE7E;AACA,GAAIS,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,cAAcL,cAAc,0CAA0C,CAAC,CACnF,KAAM,CAAAM,UAAU,CAAG,CACjBC,MAAM,CAAE,CACNC,EAAE,CAAE,eAAe,CACnBC,IAAI,CAAE,iBACR,CAAC,CACDC,UAAU,CAAE,CACVF,EAAE,CAAE,mBAAmB,CACvBC,IAAI,CAAE,uBAAuB,CAC7BE,SAAS,CAAE,eACb,CAAC,CACDC,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,kBAAkB,CACzBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,YAAY,CACpBC,KAAK,CAAE,sCAAsC,CAC7CC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAA/B,MAAM,CAACY,aAAa,CAAEK,UAAU,CAAC,CACvCF,OAAO,CAACC,GAAG,CAAC,4CAA4CL,cAAc,EAAE,CAAC,CAC3E,CAEA,MAAO,KAAI,CACb,CAAE,MAAOqB,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,4DAA4DrB,cAAc,GAAG,CAAEqB,KAAK,CAAC,CACnG,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAG,CACnB,CACEd,EAAE,CAAE,gBAAgB,CACpBD,MAAM,CAAE,CACNC,EAAE,CAAE,eAAe,CACnBC,IAAI,CAAE,YACR,CAAC,CACDC,UAAU,CAAE,CACVF,EAAE,CAAE,mBAAmB,CACvBC,IAAI,CAAE,cAAc,CACpBE,SAAS,CAAE,wBACb,CAAC,CACDC,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,iBAAiB,CACxBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,UAAU,CAClBC,KAAK,CAAE,iBAAiB,CACxBC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACD,CACEZ,EAAE,CAAE,gBAAgB,CACpBD,MAAM,CAAE,CACNC,EAAE,CAAE,eAAe,CACnBC,IAAI,CAAE,WACR,CAAC,CACDC,UAAU,CAAE,CACVF,EAAE,CAAE,mBAAmB,CACvBC,IAAI,CAAE,aAAa,CACnBE,SAAS,CAAE,WACb,CAAC,CACDC,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,WAAW,CAClBC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,YAAY,CACpBC,KAAK,CAAE,mBAAmB,CAC1BC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACF,CAED;AACA,KAAM,CAAAG,kBAAkB,CAAGtC,UAAU,CAACW,EAAE,CAAE,UAAU,CAAC,CAErD,MAAO,MAAM,CAAA4B,WAAW,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,CACF;AACA,KAAM,CAAAzB,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC,CACxE,KAAM,CAAAoB,CAAC,CAAGjC,KAAK,CAAC+B,kBAAkB,CAAE9B,OAAO,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CAC5D,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAhB,OAAO,CAACuC,CAAC,CAAC,CAEjC,GAAIvB,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC,CAEnF;AACA,GAAI,CACFD,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,IAAK,KAAM,CAAAqB,OAAO,GAAI,CAAAJ,YAAY,CAAE,CAClC,KAAM,CAAEd,EAAE,CAAE,GAAGmB,WAAY,CAAC,CAAGD,OAAO,CACtC,KAAM,CAAA/B,MAAM,CAACP,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CAAEmB,WAAW,CAAC,CACpD,CACAvB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CACjE,CAAE,MAAOuB,QAAQ,CAAE,CACjBxB,OAAO,CAACiB,KAAK,CAAC,8CAA8C,CAAEO,QAAQ,CAAC,CACzE,CAEA,MAAO,CAAAN,YAAY,CACrB,CAEA,KAAM,CAAAO,QAAQ,CAAG3B,QAAQ,CAAC4B,IAAI,CAACC,GAAG,CAAC3C,GAAG,GAAK,CACzCoB,EAAE,CAAEpB,GAAG,CAACoB,EAAE,CACV,GAAGpB,GAAG,CAAC4C,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEH5B,OAAO,CAACC,GAAG,CAAC,GAAGwB,QAAQ,CAACI,MAAM,qCAAqC,CAAC,CACpE,MAAO,CAAAJ,QAAQ,CACjB,CAAE,MAAOR,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,8CAA8C,CAAEA,KAAK,CAAC,CACpEjB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC,CAEjE;AACA,GAAI,CACFD,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACnE,IAAK,KAAM,CAAAqB,OAAO,GAAI,CAAAJ,YAAY,CAAE,CAClC,KAAM,CAAEd,EAAE,CAAE,GAAGmB,WAAY,CAAC,CAAGD,OAAO,CACtC,KAAM,CAAA/B,MAAM,CAACP,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CAAEmB,WAAW,CAAC,CACpD,CACAvB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CACjE,CAAE,MAAOuB,QAAQ,CAAE,CACjBxB,OAAO,CAACiB,KAAK,CAAC,8CAA8C,CAAEO,QAAQ,CAAC,CACzE,CAEA;AACA,MAAO,CAAAN,YAAY,CACrB,CACF,CAAC,CAED,MAAO,MAAM,CAAAY,mBAAmB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CACrD,GAAI,CACF;AACA,KAAM,CAAApC,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,yDAAyD8B,QAAQ,KAAK,CAAC,CACnF,KAAM,CAAAV,CAAC,CAAGjC,KAAK,CACb+B,kBAAkB,CAClB7B,KAAK,CAAC,WAAW,CAAE,IAAI,CAAEyC,QAAQ,CAAC,CAClC1C,OAAO,CAAC,MAAM,CAAE,MAAM,CACxB,CAAC,CACD,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAhB,OAAO,CAACuC,CAAC,CAAC,CAEjC,GAAIvB,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,uCAAuC8B,QAAQ,EAAE,CAAC,CAC9D,MAAO,EAAE,CACX,CAEA,KAAM,CAAAN,QAAQ,CAAG3B,QAAQ,CAAC4B,IAAI,CAACC,GAAG,CAAC3C,GAAG,GAAK,CACzCoB,EAAE,CAAEpB,GAAG,CAACoB,EAAE,CACV,GAAGpB,GAAG,CAAC4C,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEH5B,OAAO,CAACC,GAAG,CAAC,GAAGwB,QAAQ,CAACI,MAAM,sCAAsCE,QAAQ,EAAE,CAAC,CAC/E,MAAO,CAAAN,QAAQ,CACjB,CAAE,MAAOR,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,8DAA8Dc,QAAQ,GAAG,CAAEd,KAAK,CAAC,CAC/F;AACA,KAAM,CAAAe,kBAAkB,CAAGd,YAAY,CAACe,MAAM,CAACX,OAAO,EAAIA,OAAO,CAACnB,MAAM,CAACC,EAAE,GAAK2B,QAAQ,CAAC,CACzF/B,OAAO,CAACC,GAAG,CAAC,kBAAkB+B,kBAAkB,CAACH,MAAM,oCAAoCE,QAAQ,EAAE,CAAC,CACtG,MAAO,CAAAC,kBAAkB,CAC3B,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,uBAAuB,CAAG,KAAO,CAAAC,YAAY,EAAK,CAC7D,GAAI,CACF;AACA,KAAM,CAAAxC,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,gEAAgEkC,YAAY,KAAK,CAAC,CAC9F,KAAM,CAAAd,CAAC,CAAGjC,KAAK,CACb+B,kBAAkB,CAClB7B,KAAK,CAAC,eAAe,CAAE,IAAI,CAAE6C,YAAY,CAAC,CAC1C9C,OAAO,CAAC,MAAM,CAAE,MAAM,CACxB,CAAC,CACD,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAhB,OAAO,CAACuC,CAAC,CAAC,CAEjC,GAAIvB,QAAQ,CAACC,KAAK,CAAE,CAClBC,OAAO,CAACC,GAAG,CAAC,8CAA8CkC,YAAY,EAAE,CAAC,CACzE,MAAO,EAAE,CACX,CAEA,KAAM,CAAAV,QAAQ,CAAG3B,QAAQ,CAAC4B,IAAI,CAACC,GAAG,CAAC3C,GAAG,GAAK,CACzCoB,EAAE,CAAEpB,GAAG,CAACoB,EAAE,CACV,GAAGpB,GAAG,CAAC4C,IAAI,CAAC,CACd,CAAC,CAAC,CAAC,CAEH5B,OAAO,CAACC,GAAG,CAAC,GAAGwB,QAAQ,CAACI,MAAM,6CAA6CM,YAAY,EAAE,CAAC,CAC1F,MAAO,CAAAV,QAAQ,CACjB,CAAE,MAAOR,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,qEAAqEkB,YAAY,GAAG,CAAElB,KAAK,CAAC,CAC1G;AACA,KAAM,CAAAmB,sBAAsB,CAAGlB,YAAY,CAACe,MAAM,CAACX,OAAO,EAAIA,OAAO,CAAChB,UAAU,CAACF,EAAE,GAAK+B,YAAY,CAAC,CACrGnC,OAAO,CAACC,GAAG,CAAC,kBAAkBmC,sBAAsB,CAACP,MAAM,2CAA2CM,YAAY,EAAE,CAAC,CACrH,MAAO,CAAAC,sBAAsB,CAC/B,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAO,CAAAjC,EAAE,EAAK,CAC1C,GAAI,CACF;AACA,KAAM,CAAAT,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,wCAAwCG,EAAE,qBAAqB,CAAC,CAC5E,KAAM,CAAAkC,MAAM,CAAGtD,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CACtC,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAf,MAAM,CAACuD,MAAM,CAAC,CAErC,GAAIxC,QAAQ,CAACyC,MAAM,CAAC,CAAC,CAAE,CACrB,KAAM,CAAAhB,WAAW,CAAG,CAClBnB,EAAE,CAAEN,QAAQ,CAACM,EAAE,CACf,GAAGN,QAAQ,CAAC8B,IAAI,CAAC,CACnB,CAAC,CACD5B,OAAO,CAACC,GAAG,CAAC,WAAWG,EAAE,4BAA4B,CAAEmB,WAAW,CAAC,CACnE,MAAO,CAAAA,WAAW,CACpB,CAEAvB,OAAO,CAACC,GAAG,CAAC,WAAWG,EAAE,2BAA2B,CAAC,CACrD,MAAO,KAAI,CACb,CAAE,MAAOa,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,6CAA6Cb,EAAE,GAAG,CAAEa,KAAK,CAAC,CACxE;AACA,KAAM,CAAAuB,WAAW,CAAGtB,YAAY,CAACuB,IAAI,CAACnB,OAAO,EAAIA,OAAO,CAAClB,EAAE,GAAKA,EAAE,CAAC,EAAIc,YAAY,CAAC,CAAC,CAAC,CACtFlB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAEuC,WAAW,CAAC,CAC1D,MAAO,CAAAA,WAAW,CACpB,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,UAAU,CAAG,KAAO,CAAAnB,WAAW,EAAK,CAC/C,GAAI,CACF;AACA,KAAM,CAAA5B,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAEsB,WAAW,CAAC,CACtE,KAAM,CAAAe,MAAM,CAAG,KAAM,CAAArD,MAAM,CAACkC,kBAAkB,CAAE,CAC9C,GAAGI,WAAW,CACdR,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFhB,OAAO,CAACC,GAAG,CAAC,mCAAmCqC,MAAM,CAAClC,EAAE,EAAE,CAAC,CAE3D;AACA,GAAI,CACF,KAAM,CAAAuC,YAAY,CAAG,CACnBC,SAAS,CAAEN,MAAM,CAAClC,EAAE,CACpBI,IAAI,CAAEe,WAAW,CAACf,IAAI,CACtBqC,UAAU,CAAEtB,WAAW,CAACsB,UAAU,EAAI,IAAI,CAC1C1C,MAAM,CAAEoB,WAAW,CAACpB,MAAM,CAC1B2C,OAAO,CAAEvB,WAAW,CAACuB,OAAO,EAAI,IAAI,CACpCpC,KAAK,CAAEa,WAAW,CAACb,KAAK,CACxBC,IAAI,CAAEY,WAAW,CAACZ,IAAI,CACtBL,UAAU,CAAEiB,WAAW,CAACjB,UAAU,CAClCyC,MAAM,CAAExB,WAAW,CAACX,KAAK,EAAI,CAAC,CAC9BoC,UAAU,CAAE,SAAS,CACrBC,kBAAkB,CAAE,SAAS,CAC7BC,oBAAoB,CAAE,SAAS,CAC/BC,aAAa,CAAE,SAAS,CACxBtC,MAAM,CAAE,UAAU,CAClBE,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAAoC,WAAW,CAAG,KAAM,CAAA3D,cAAc,CAACkD,YAAY,CAAC,CACtD3C,OAAO,CAACC,GAAG,CAAC,gDAAgDqC,MAAM,CAAClC,EAAE,GAAG,CAAEgD,WAAW,CAAC,CACxF,CAAE,MAAOC,aAAa,CAAE,CACtBrD,OAAO,CAACiB,KAAK,CAAC,oDAAoD,CAAEoC,aAAa,CAAC,CACpF,CAEA,MAAO,CACLjD,EAAE,CAAEkC,MAAM,CAAClC,EAAE,CACb,GAAGmB,WACL,CAAC,CACH,CAAE,MAAON,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1DjB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAEjD;AACA,GAAI,CACF,KAAM,CAAAqD,MAAM,CAAG,eAAe,CAAGtC,IAAI,CAACuC,GAAG,CAAC,CAAC,CAC3C,KAAM,CAAAhE,MAAM,CAACP,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAE8D,MAAM,CAAC,CAAE,CACxC,GAAG/B,WAAW,CACdR,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFhB,OAAO,CAACC,GAAG,CAAC,qCAAqCqD,MAAM,EAAE,CAAC,CAE1D;AACA,GAAI,CACF,KAAM,CAAAX,YAAY,CAAG,CACnBC,SAAS,CAAEU,MAAM,CACjB9C,IAAI,CAAEe,WAAW,CAACf,IAAI,CACtBqC,UAAU,CAAEtB,WAAW,CAACsB,UAAU,EAAI,IAAI,CAC1C1C,MAAM,CAAEoB,WAAW,CAACpB,MAAM,CAC1B2C,OAAO,CAAEvB,WAAW,CAACuB,OAAO,EAAI,IAAI,CACpCpC,KAAK,CAAEa,WAAW,CAACb,KAAK,CACxBC,IAAI,CAAEY,WAAW,CAACZ,IAAI,CACtBL,UAAU,CAAEiB,WAAW,CAACjB,UAAU,CAClCyC,MAAM,CAAExB,WAAW,CAACX,KAAK,EAAI,CAAC,CAC9BoC,UAAU,CAAE,SAAS,CACrBC,kBAAkB,CAAE,SAAS,CAC7BC,oBAAoB,CAAE,SAAS,CAC/BC,aAAa,CAAE,SAAS,CACxBtC,MAAM,CAAE,UAAU,CAClBE,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAAoC,WAAW,CAAG,KAAM,CAAA3D,cAAc,CAACkD,YAAY,CAAC,CACtD3C,OAAO,CAACC,GAAG,CAAC,uDAAuDqD,MAAM,GAAG,CAAEF,WAAW,CAAC,CAC5F,CAAE,MAAOC,aAAa,CAAE,CACtBrD,OAAO,CAACiB,KAAK,CAAC,2DAA2D,CAAEoC,aAAa,CAAC,CAC3F,CAEA,MAAO,CACLjD,EAAE,CAAEkD,MAAM,CACV,GAAG/B,WAAW,CACdR,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACH,CAAE,MAAOQ,QAAQ,CAAE,CACjBxB,OAAO,CAACiB,KAAK,CAAC,2CAA2C,CAAEO,QAAQ,CAAC,CAEpE;AACA,KAAM,CAAA8B,MAAM,CAAG,eAAe,CAAGtC,IAAI,CAACuC,GAAG,CAAC,CAAC,CAC3C,MAAO,CACLnD,EAAE,CAAEkD,MAAM,CACV,GAAG/B,WAAW,CACdR,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACtB,CAAC,CACH,CACF,CACF,CAAC,CAED,MAAO,MAAM,CAAAwC,aAAa,CAAG,KAAAA,CAAOpD,EAAE,CAAEmB,WAAW,GAAK,CACtD,GAAI,CACF;AACA,KAAM,CAAA5B,gBAAgB,CAAC,UAAU,CAAC,CAElCK,OAAO,CAACC,GAAG,CAAC,uCAAuCG,EAAE,GAAG,CAAEmB,WAAW,CAAC,CACtE,KAAM,CAAAe,MAAM,CAAGtD,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CACtC,KAAM,CAAAlB,SAAS,CAACoD,MAAM,CAAE,CACtB,GAAGf,WAAW,CACdkC,SAAS,CAAE,GAAI,CAAAzC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFhB,OAAO,CAACC,GAAG,CAAC,WAAWG,EAAE,yBAAyB,CAAC,CACnD,MAAO,CACLA,EAAE,CACF,GAAGmB,WACL,CAAC,CACH,CAAE,MAAON,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,4CAA4Cb,EAAE,GAAG,CAAEa,KAAK,CAAC,CACvEjB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAExD;AACA,GAAI,CACF,KAAM,CAAAV,MAAM,CAACP,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CAAE,CACpC,GAAGmB,WAAW,CACdkC,SAAS,CAAE,GAAI,CAAAzC,IAAI,CAAC,CACtB,CAAC,CAAC,CAEFhB,OAAO,CAACC,GAAG,CAAC,WAAWG,EAAE,4BAA4B,CAAC,CACtD,MAAO,CACLA,EAAE,CACF,GAAGmB,WAAW,CACdkC,SAAS,CAAE,GAAI,CAAAzC,IAAI,CAAC,CACtB,CAAC,CACH,CAAE,MAAO0C,QAAQ,CAAE,CACjB1D,OAAO,CAACiB,KAAK,CAAC,sDAAsDb,EAAE,GAAG,CAAEsD,QAAQ,CAAC,CAEpF;AACA,MAAO,CACLtD,EAAE,CACF,GAAGmB,WAAW,CACdkC,SAAS,CAAE,GAAI,CAAAzC,IAAI,CAAC,CACtB,CAAC,CACH,CACF,CACF,CAAC,CAED,MAAO,MAAM,CAAA2C,aAAa,CAAG,KAAO,CAAAvD,EAAE,EAAK,CACzC,GAAI,CACFJ,OAAO,CAACC,GAAG,CAAC,uCAAuCG,EAAE,EAAE,CAAC,CACxD,KAAM,CAAAkC,MAAM,CAAGtD,GAAG,CAACQ,EAAE,CAAE,UAAU,CAAEY,EAAE,CAAC,CACtC,KAAM,CAAAjB,SAAS,CAACmD,MAAM,CAAC,CAEvB;AACA,GAAI,CACF,KAAM,CAAAsB,kBAAkB,CAAG,KAAM,CAAAlE,wBAAwB,CAACU,EAAE,CAAC,CAC7DJ,OAAO,CAACC,GAAG,CAAC,WAAWG,EAAE,OAAOwD,kBAAkB,CAAC/B,MAAM,0CAA0C,CAAC,CACtG,CAAE,MAAOwB,aAAa,CAAE,CACtBrD,OAAO,CAACiB,KAAK,CAAC,8DAA8Db,EAAE,GAAG,CAAEiD,aAAa,CAAC,CACnG,CAEA,MAAO,CAAAjD,EAAE,CACX,CAAE,MAAOa,KAAK,CAAE,CACdjB,OAAO,CAACiB,KAAK,CAAC,4CAA4Cb,EAAE,GAAG,CAAEa,KAAK,CAAC,CACvEjB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAExD;AACA,GAAI,CACF,KAAM,CAAA2D,kBAAkB,CAAG,KAAM,CAAAlE,wBAAwB,CAACU,EAAE,CAAC,CAC7DJ,OAAO,CAACC,GAAG,CAAC,GAAG2D,kBAAkB,CAAC/B,MAAM,iCAAiCzB,EAAE,wBAAwB,CAAC,CACtG,CAAE,MAAOiD,aAAa,CAAE,CACtBrD,OAAO,CAACiB,KAAK,CAAC,8DAA8Db,EAAE,GAAG,CAAEiD,aAAa,CAAC,CACnG,CAEA;AACA,MAAO,CAAAjD,EAAE,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}