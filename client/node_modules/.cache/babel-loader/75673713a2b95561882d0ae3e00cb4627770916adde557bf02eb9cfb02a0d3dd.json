{"ast":null,"code":"import{db}from'../firebase';import{collection,getDocs,doc,getDoc,addDoc,updateDoc,query,where}from'firebase/firestore';// Récupérer toutes les soumissions de formulaire\nexport const getAllFormSubmissions=async()=>{try{const submissionsCollection=collection(db,'formSubmissions');const submissionsSnapshot=await getDocs(submissionsCollection);const submissionsList=submissionsSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));// Mettre à jour les soumissions sans statut\nfor(const submission of submissionsList){if(!submission.status){await updateFormSubmissionStatus(submission.id,'pending');submission.status='pending';}}return submissionsList;}catch(error){console.error(\"Erreur lors de la récupération des soumissions:\",error);return[];}};// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions=async()=>{try{const submissionsCollection=collection(db,'formSubmissions');const q=query(submissionsCollection,where(\"status\",\"==\",\"pending\"));const submissionsSnapshot=await getDocs(q);return submissionsSnapshot.docs.map(doc=>({id:doc.id,...doc.data()}));}catch(error){console.error(\"Erreur lors de la récupération des soumissions en attente:\",error);return[];}};// Récupérer une soumission par ID\nexport const getFormSubmissionById=async id=>{try{const submissionDoc=doc(db,'formSubmissions',id);const submissionSnapshot=await getDoc(submissionDoc);if(submissionSnapshot.exists()){return{id:submissionSnapshot.id,...submissionSnapshot.data()};}else{console.log(\"Aucune soumission trouvée avec cet ID\");return null;}}catch(error){console.error(\"Erreur lors de la récupération de la soumission:\",error);return null;}};// Créer une nouvelle soumission de formulaire\nexport const createFormSubmission=async formData=>{try{// S'assurer que le statut est défini\nconst dataWithStatus={...formData,status:formData.status||'pending',createdAt:new Date()};const submissionsCollection=collection(db,'formSubmissions');const docRef=await addDoc(submissionsCollection,dataWithStatus);return{id:docRef.id,...dataWithStatus};}catch(error){console.error(\"Erreur lors de la création de la soumission:\",error);throw error;}};// Mettre à jour le statut d'une soumission\nexport const updateFormSubmissionStatus=async(id,status)=>{try{const submissionDoc=doc(db,'formSubmissions',id);await updateDoc(submissionDoc,{status});return true;}catch(error){console.error(\"Erreur lors de la mise à jour du statut:\",error);return false;}};// Mettre à jour une soumission avec les données validées\nexport const updateFormSubmissionWithValidatedData=async(id,validatedData)=>{try{const submissionDoc=doc(db,'formSubmissions',id);await updateDoc(submissionDoc,{...validatedData,status:'validated',validatedAt:new Date()});return true;}catch(error){console.error(\"Erreur lors de la mise à jour des données validées:\",error);return false;}};// Mettre à jour les entités liées via le token commun\nexport const updateLinkedEntities=async(commonToken,validatedData)=>{try{// Rechercher toutes les soumissions avec ce token commun\nconst submissionsCollection=collection(db,'formSubmissions');const q=query(submissionsCollection,where(\"commonToken\",\"==\",commonToken));const submissionsSnapshot=await getDocs(q);// Mettre à jour chaque soumission\nconst updatePromises=submissionsSnapshot.docs.map(async submission=>{const submissionDoc=doc(db,'formSubmissions',submission.id);await updateDoc(submissionDoc,{...validatedData,status:'validated',validatedAt:new Date()});});await Promise.all(updatePromises);return true;}catch(error){console.error(\"Erreur lors de la mise à jour des entités liées:\",error);return false;}};","map":{"version":3,"names":["db","collection","getDocs","doc","getDoc","addDoc","updateDoc","query","where","getAllFormSubmissions","submissionsCollection","submissionsSnapshot","submissionsList","docs","map","id","data","submission","status","updateFormSubmissionStatus","error","console","getPendingFormSubmissions","q","getFormSubmissionById","submissionDoc","submissionSnapshot","exists","log","createFormSubmission","formData","dataWithStatus","createdAt","Date","docRef","updateFormSubmissionWithValidatedData","validatedData","validatedAt","updateLinkedEntities","commonToken","updatePromises","Promise","all"],"sources":["/workspaces/app-booking/client/src/services/formSubmissionsService.js"],"sourcesContent":["import { db } from '../firebase';\nimport { collection, getDocs, doc, getDoc, addDoc, updateDoc, query, where } from 'firebase/firestore';\n\n// Récupérer toutes les soumissions de formulaire\nexport const getAllFormSubmissions = async () => {\n  try {\n    const submissionsCollection = collection(db, 'formSubmissions');\n    const submissionsSnapshot = await getDocs(submissionsCollection);\n    const submissionsList = submissionsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    // Mettre à jour les soumissions sans statut\n    for (const submission of submissionsList) {\n      if (!submission.status) {\n        await updateFormSubmissionStatus(submission.id, 'pending');\n        submission.status = 'pending';\n      }\n    }\n    \n    return submissionsList;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des soumissions:\", error);\n    return [];\n  }\n};\n\n// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions = async () => {\n  try {\n    const submissionsCollection = collection(db, 'formSubmissions');\n    const q = query(submissionsCollection, where(\"status\", \"==\", \"pending\"));\n    const submissionsSnapshot = await getDocs(q);\n    return submissionsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des soumissions en attente:\", error);\n    return [];\n  }\n};\n\n// Récupérer une soumission par ID\nexport const getFormSubmissionById = async (id) => {\n  try {\n    const submissionDoc = doc(db, 'formSubmissions', id);\n    const submissionSnapshot = await getDoc(submissionDoc);\n    \n    if (submissionSnapshot.exists()) {\n      return {\n        id: submissionSnapshot.id,\n        ...submissionSnapshot.data()\n      };\n    } else {\n      console.log(\"Aucune soumission trouvée avec cet ID\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération de la soumission:\", error);\n    return null;\n  }\n};\n\n// Créer une nouvelle soumission de formulaire\nexport const createFormSubmission = async (formData) => {\n  try {\n    // S'assurer que le statut est défini\n    const dataWithStatus = {\n      ...formData,\n      status: formData.status || 'pending',\n      createdAt: new Date()\n    };\n    \n    const submissionsCollection = collection(db, 'formSubmissions');\n    const docRef = await addDoc(submissionsCollection, dataWithStatus);\n    \n    return {\n      id: docRef.id,\n      ...dataWithStatus\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la création de la soumission:\", error);\n    throw error;\n  }\n};\n\n// Mettre à jour le statut d'une soumission\nexport const updateFormSubmissionStatus = async (id, status) => {\n  try {\n    const submissionDoc = doc(db, 'formSubmissions', id);\n    await updateDoc(submissionDoc, { status });\n    return true;\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour du statut:\", error);\n    return false;\n  }\n};\n\n// Mettre à jour une soumission avec les données validées\nexport const updateFormSubmissionWithValidatedData = async (id, validatedData) => {\n  try {\n    const submissionDoc = doc(db, 'formSubmissions', id);\n    await updateDoc(submissionDoc, { \n      ...validatedData,\n      status: 'validated',\n      validatedAt: new Date()\n    });\n    return true;\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour des données validées:\", error);\n    return false;\n  }\n};\n\n// Mettre à jour les entités liées via le token commun\nexport const updateLinkedEntities = async (commonToken, validatedData) => {\n  try {\n    // Rechercher toutes les soumissions avec ce token commun\n    const submissionsCollection = collection(db, 'formSubmissions');\n    const q = query(submissionsCollection, where(\"commonToken\", \"==\", commonToken));\n    const submissionsSnapshot = await getDocs(q);\n    \n    // Mettre à jour chaque soumission\n    const updatePromises = submissionsSnapshot.docs.map(async (submission) => {\n      const submissionDoc = doc(db, 'formSubmissions', submission.id);\n      await updateDoc(submissionDoc, { \n        ...validatedData,\n        status: 'validated',\n        validatedAt: new Date()\n      });\n    });\n    \n    await Promise.all(updatePromises);\n    return true;\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour des entités liées:\", error);\n    return false;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}