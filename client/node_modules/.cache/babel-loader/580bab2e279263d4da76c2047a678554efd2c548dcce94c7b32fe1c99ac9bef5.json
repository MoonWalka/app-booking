{"ast":null,"code":"import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,orderBy,setDoc}from'firebase/firestore';import{db}from'../firebase';// Assurez-vous que la collection existe\nconst ensureCollection=async collectionName=>{try{// Vérifier si la collection existe en essayant de récupérer des documents\nconst collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,orderBy('createdAt','desc')));// Si la collection n'existe pas ou est vide, créer un document initial\nif(snapshot.empty){console.log(`Collection ${collectionName} vide, création d'un document initial...`);const initialDoc={businessName:\"Salle de Concert Exemple\",contact:\"Jean Dupont\",role:\"Programmateur\",address:\"123 rue de la Musique, 75001 Paris\",venue:\"La Scène Parisienne\",vatNumber:\"FR12345678901\",siret:\"123 456 789 00012\",email:\"contact@exemple.fr\",phone:\"01 23 45 67 89\",website:\"https://www.exemple.fr\",notes:\"Programmateur exemple créé automatiquement\",createdAt:new Date()};await addDoc(collectionRef,initialDoc);console.log(`Document initial créé dans la collection ${collectionName}`);}return true;}catch(error){console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`,error);return false;}};// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockProgrammers=[{id:'mock-programmer-1',businessName:\"Association Vibrations\",contact:\"Marie Dupont\",role:\"Présidente\",address:\"45 rue de la République, 69001 Lyon\",venue:\"Festival Vibrations\",vatNumber:\"FR98765432101\",siret:\"987 654 321 00011\",email:'marie.dupont@vibrations.fr',phone:'06 12 34 56 78',website:'https://www.vibrations-asso.fr',notes:'Programmation de musiques actuelles',createdAt:new Date()},{id:'mock-programmer-2',businessName:\"SARL La Cigale\",contact:\"Jean Martin\",role:\"Gérant\",address:\"120 boulevard de Rochechouart, 75018 Paris\",venue:\"La Cigale\",vatNumber:\"FR45678901234\",siret:\"456 789 012 00013\",email:'jean.martin@lacigale.fr',phone:'01 23 45 67 89',website:'https://www.lacigale.fr',notes:'Salle de concert parisienne',createdAt:new Date()}];// Assurez-vous que la collection programmers existe\nconst programmersCollection=collection(db,'programmers');export const getProgrammers=async()=>{try{// S'assurer que la collection existe\nawait ensureCollection('programmers');console.log(\"Tentative de récupération des programmateurs depuis Firebase...\");const q=query(programmersCollection,orderBy('createdAt','desc'));const snapshot=await getDocs(q);if(snapshot.empty){console.log(\"Aucun programmateur trouvé dans Firebase, utilisation des données simulées\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const programmer of mockProgrammers){const{id,...programmerData}=programmer;await setDoc(doc(db,'programmers',id),programmerData);}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}return mockProgrammers;}const programmers=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${programmers.length} programmateurs récupérés depuis Firebase`);return programmers;}catch(error){console.error(\"Erreur lors de la récupération des programmateurs:\",error);console.log(\"Utilisation des données simulées pour les programmateurs\");// Essayer d'ajouter les données simulées à Firebase\ntry{console.log(\"Tentative d'ajout des données simulées à Firebase...\");for(const programmer of mockProgrammers){const{id,...programmerData}=programmer;await setDoc(doc(db,'programmers',id),programmerData);}console.log(\"Données simulées ajoutées à Firebase avec succès\");}catch(addError){console.error(\"Erreur lors de l'ajout des données simulées:\",addError);}// Retourner des données simulées en cas d'erreur d'authentification\nreturn mockProgrammers;}};export const getProgrammerById=async id=>{try{// S'assurer que la collection existe\nawait ensureCollection('programmers');console.log(`Tentative de récupération du programmateur ${id} depuis Firebase...`);const docRef=doc(db,'programmers',id);const snapshot=await getDoc(docRef);if(snapshot.exists()){const programmerData={id:snapshot.id,...snapshot.data()};console.log(`Programmateur ${id} récupéré depuis Firebase:`,programmerData);return programmerData;}console.log(`Programmateur ${id} non trouvé dans Firebase`);return null;}catch(error){console.error(`Erreur lors de la récupération du programmateur ${id}:`,error);// Retourner un programmateur simulé en cas d'erreur\nconst mockProgrammer=mockProgrammers.find(programmer=>programmer.id===id)||mockProgrammers[0];console.log(`Utilisation du programmateur simulé:`,mockProgrammer);return mockProgrammer;}};export const addProgrammer=async programmerData=>{try{// S'assurer que la collection existe\nawait ensureCollection('programmers');console.log(\"Tentative d'ajout d'un programmateur à Firebase:\",programmerData);const docRef=await addDoc(programmersCollection,{...programmerData,createdAt:new Date()});console.log(`Programmateur ajouté avec succès, ID: ${docRef.id}`);return{id:docRef.id,...programmerData};}catch(error){console.error(\"Erreur lors de l'ajout du programmateur:\",error);console.log(\"Simulation de l'ajout d'un programmateur\");// Essayer d'ajouter le programmateur avec un ID généré manuellement\ntry{const mockId='mock-programmer-'+Date.now();await setDoc(doc(db,'programmers',mockId),{...programmerData,createdAt:new Date()});console.log(`Programmateur ajouté avec un ID manuel: ${mockId}`);return{id:mockId,...programmerData,createdAt:new Date()};}catch(addError){console.error(\"Erreur lors de l'ajout manuel du programmateur:\",addError);// Simuler l'ajout d'un programmateur en cas d'erreur\nconst mockId='mock-programmer-'+Date.now();return{id:mockId,...programmerData,createdAt:new Date()};}}};export const updateProgrammer=async(id,programmerData)=>{try{// S'assurer que la collection existe\nawait ensureCollection('programmers');console.log(`Tentative de mise à jour du programmateur ${id}:`,programmerData);const docRef=doc(db,'programmers',id);await updateDoc(docRef,{...programmerData,updatedAt:new Date()});console.log(`Programmateur ${id} mis à jour avec succès`);return{id,...programmerData};}catch(error){console.error(`Erreur lors de la mise à jour du programmateur ${id}:`,error);console.log(\"Simulation de la mise à jour d'un programmateur\");// Essayer de créer/remplacer le document\ntry{await setDoc(doc(db,'programmers',id),{...programmerData,updatedAt:new Date()});console.log(`Programmateur ${id} créé/remplacé avec succès`);return{id,...programmerData,updatedAt:new Date()};}catch(setError){console.error(`Erreur lors de la création/remplacement du programmateur ${id}:`,setError);// Simuler la mise à jour d'un programmateur en cas d'erreur\nreturn{id,...programmerData,updatedAt:new Date()};}}};export const deleteProgrammer=async id=>{try{console.log(`Tentative de suppression du programmateur ${id}`);const docRef=doc(db,'programmers',id);await deleteDoc(docRef);console.log(`Programmateur ${id} supprimé avec succès`);return id;}catch(error){console.error(`Erreur lors de la suppression du programmateur ${id}:`,error);console.log(\"Simulation de la suppression d'un programmateur\");// Simuler la suppression d'un programmateur en cas d'erreur\nreturn id;}};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","setDoc","db","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","initialDoc","businessName","contact","role","address","venue","vatNumber","siret","email","phone","website","notes","createdAt","Date","error","mockProgrammers","id","programmersCollection","getProgrammers","q","programmer","programmerData","addError","programmers","docs","map","data","length","getProgrammerById","docRef","exists","mockProgrammer","find","addProgrammer","mockId","now","updateProgrammer","updatedAt","setError","deleteProgrammer"],"sources":["/workspaces/app-booking/client/src/services/programmersService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  setDoc\n} from 'firebase/firestore';\nimport { db } from '../firebase';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('createdAt', 'desc')));\n    \n    // Si la collection n'existe pas ou est vide, créer un document initial\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, création d'un document initial...`);\n      const initialDoc = {\n        businessName: \"Salle de Concert Exemple\",\n        contact: \"Jean Dupont\",\n        role: \"Programmateur\",\n        address: \"123 rue de la Musique, 75001 Paris\",\n        venue: \"La Scène Parisienne\",\n        vatNumber: \"FR12345678901\",\n        siret: \"123 456 789 00012\",\n        email: \"contact@exemple.fr\",\n        phone: \"01 23 45 67 89\",\n        website: \"https://www.exemple.fr\",\n        notes: \"Programmateur exemple créé automatiquement\",\n        createdAt: new Date()\n      };\n      \n      await addDoc(collectionRef, initialDoc);\n      console.log(`Document initial créé dans la collection ${collectionName}`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Données simulées pour le fallback en cas d'erreur d'authentification\nconst mockProgrammers = [\n  {\n    id: 'mock-programmer-1',\n    businessName: \"Association Vibrations\",\n    contact: \"Marie Dupont\",\n    role: \"Présidente\",\n    address: \"45 rue de la République, 69001 Lyon\",\n    venue: \"Festival Vibrations\",\n    vatNumber: \"FR98765432101\",\n    siret: \"987 654 321 00011\",\n    email: 'marie.dupont@vibrations.fr',\n    phone: '06 12 34 56 78',\n    website: 'https://www.vibrations-asso.fr',\n    notes: 'Programmation de musiques actuelles',\n    createdAt: new Date()\n  },\n  {\n    id: 'mock-programmer-2',\n    businessName: \"SARL La Cigale\",\n    contact: \"Jean Martin\",\n    role: \"Gérant\",\n    address: \"120 boulevard de Rochechouart, 75018 Paris\",\n    venue: \"La Cigale\",\n    vatNumber: \"FR45678901234\",\n    siret: \"456 789 012 00013\",\n    email: 'jean.martin@lacigale.fr',\n    phone: '01 23 45 67 89',\n    website: 'https://www.lacigale.fr',\n    notes: 'Salle de concert parisienne',\n    createdAt: new Date()\n  }\n];\n\n// Assurez-vous que la collection programmers existe\nconst programmersCollection = collection(db, 'programmers');\n\nexport const getProgrammers = async () => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('programmers');\n    \n    console.log(\"Tentative de récupération des programmateurs depuis Firebase...\");\n    const q = query(programmersCollection, orderBy('createdAt', 'desc'));\n    const snapshot = await getDocs(q);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun programmateur trouvé dans Firebase, utilisation des données simulées\");\n      \n      // Essayer d'ajouter les données simulées à Firebase\n      try {\n        console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n        for (const programmer of mockProgrammers) {\n          const { id, ...programmerData } = programmer;\n          await setDoc(doc(db, 'programmers', id), programmerData);\n        }\n        console.log(\"Données simulées ajoutées à Firebase avec succès\");\n      } catch (addError) {\n        console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n      }\n      \n      return mockProgrammers;\n    }\n    \n    const programmers = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${programmers.length} programmateurs récupérés depuis Firebase`);\n    return programmers;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des programmateurs:\", error);\n    console.log(\"Utilisation des données simulées pour les programmateurs\");\n    \n    // Essayer d'ajouter les données simulées à Firebase\n    try {\n      console.log(\"Tentative d'ajout des données simulées à Firebase...\");\n      for (const programmer of mockProgrammers) {\n        const { id, ...programmerData } = programmer;\n        await setDoc(doc(db, 'programmers', id), programmerData);\n      }\n      console.log(\"Données simulées ajoutées à Firebase avec succès\");\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout des données simulées:\", addError);\n    }\n    \n    // Retourner des données simulées en cas d'erreur d'authentification\n    return mockProgrammers;\n  }\n};\n\nexport const getProgrammerById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('programmers');\n    \n    console.log(`Tentative de récupération du programmateur ${id} depuis Firebase...`);\n    const docRef = doc(db, 'programmers', id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const programmerData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Programmateur ${id} récupéré depuis Firebase:`, programmerData);\n      return programmerData;\n    }\n    \n    console.log(`Programmateur ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du programmateur ${id}:`, error);\n    // Retourner un programmateur simulé en cas d'erreur\n    const mockProgrammer = mockProgrammers.find(programmer => programmer.id === id) || mockProgrammers[0];\n    console.log(`Utilisation du programmateur simulé:`, mockProgrammer);\n    return mockProgrammer;\n  }\n};\n\nexport const addProgrammer = async (programmerData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('programmers');\n    \n    console.log(\"Tentative d'ajout d'un programmateur à Firebase:\", programmerData);\n    const docRef = await addDoc(programmersCollection, {\n      ...programmerData,\n      createdAt: new Date()\n    });\n    \n    console.log(`Programmateur ajouté avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...programmerData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de l'ajout du programmateur:\", error);\n    console.log(\"Simulation de l'ajout d'un programmateur\");\n    \n    // Essayer d'ajouter le programmateur avec un ID généré manuellement\n    try {\n      const mockId = 'mock-programmer-' + Date.now();\n      await setDoc(doc(db, 'programmers', mockId), {\n        ...programmerData,\n        createdAt: new Date()\n      });\n      \n      console.log(`Programmateur ajouté avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...programmerData,\n        createdAt: new Date()\n      };\n    } catch (addError) {\n      console.error(\"Erreur lors de l'ajout manuel du programmateur:\", addError);\n      \n      // Simuler l'ajout d'un programmateur en cas d'erreur\n      const mockId = 'mock-programmer-' + Date.now();\n      return {\n        id: mockId,\n        ...programmerData,\n        createdAt: new Date()\n      };\n    }\n  }\n};\n\nexport const updateProgrammer = async (id, programmerData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection('programmers');\n    \n    console.log(`Tentative de mise à jour du programmateur ${id}:`, programmerData);\n    const docRef = doc(db, 'programmers', id);\n    await updateDoc(docRef, {\n      ...programmerData,\n      updatedAt: new Date()\n    });\n    \n    console.log(`Programmateur ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...programmerData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour du programmateur ${id}:`, error);\n    console.log(\"Simulation de la mise à jour d'un programmateur\");\n    \n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, 'programmers', id), {\n        ...programmerData,\n        updatedAt: new Date()\n      });\n      \n      console.log(`Programmateur ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...programmerData,\n        updatedAt: new Date()\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement du programmateur ${id}:`, setError);\n      \n      // Simuler la mise à jour d'un programmateur en cas d'erreur\n      return {\n        id,\n        ...programmerData,\n        updatedAt: new Date()\n      };\n    }\n  }\n};\n\nexport const deleteProgrammer = async (id) => {\n  try {\n    console.log(`Tentative de suppression du programmateur ${id}`);\n    const docRef = doc(db, 'programmers', id);\n    await deleteDoc(docRef);\n    \n    console.log(`Programmateur ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression du programmateur ${id}:`, error);\n    console.log(\"Simulation de la suppression d'un programmateur\");\n    // Simuler la suppression d'un programmateur en cas d'erreur\n    return id;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}