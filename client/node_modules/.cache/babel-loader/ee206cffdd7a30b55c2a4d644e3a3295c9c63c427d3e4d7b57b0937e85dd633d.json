{"ast":null,"code":"import { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\nconst COLLECTION_NAME = 'formSubmissions';\n\n// Récupérer toutes les soumissions de formulaire\nexport const getFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération de toutes les soumissions...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const submissionsSnapshot = await getDocs(submissionsCollection);\n    const submissions = submissionsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    console.log(`FormSubmissionsService - ${submissions.length} soumissions récupérées`);\n\n    // Mettre à jour les soumissions sans statut\n    const submissionsToUpdate = submissions.filter(submission => !submission.status);\n    if (submissionsToUpdate.length > 0) {\n      console.log(`FormSubmissionsService - Mise à jour de ${submissionsToUpdate.length} soumissions sans statut...`);\n      for (const submission of submissionsToUpdate) {\n        await updateFormSubmissionStatus(submission.id, 'pending');\n      }\n\n      // Récupérer à nouveau les soumissions après la mise à jour\n      const updatedSubmissionsSnapshot = await getDocs(submissionsCollection);\n      const updatedSubmissions = updatedSubmissionsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(`FormSubmissionsService - ${updatedSubmissions.length} soumissions récupérées après mise à jour`);\n      return updatedSubmissions;\n    }\n    return submissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions:', error);\n    throw new Error('Erreur lors de la récupération des soumissions de formulaire');\n  }\n};\n\n// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération des soumissions en attente...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const pendingQuery = query(submissionsCollection, where('status', '==', 'pending'), orderBy('submissionDate', 'desc'));\n    const pendingSnapshot = await getDocs(pendingQuery);\n    const pendingSubmissions = pendingSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    console.log(`FormSubmissionsService - ${pendingSubmissions.length} soumissions en attente récupérées`);\n    return pendingSubmissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions en attente:', error);\n    throw new Error('Erreur lors de la récupération des soumissions en attente');\n  }\n};\n\n// Récupérer une soumission de formulaire par ID\nexport const getFormSubmission = async id => {\n  try {\n    console.log(`FormSubmissionsService - Récupération de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    const submissionSnapshot = await getDoc(submissionDoc);\n    if (!submissionSnapshot.exists()) {\n      console.error(`FormSubmissionsService - Soumission ${id} non trouvée`);\n      throw new Error('Soumission de formulaire non trouvée');\n    }\n    const submission = {\n      id: submissionSnapshot.id,\n      ...submissionSnapshot.data()\n    };\n    console.log(`FormSubmissionsService - Soumission ${id} récupérée:`, submission);\n    return submission;\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la récupération de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la récupération de la soumission de formulaire');\n  }\n};\n\n// Ajouter une nouvelle soumission de formulaire\nexport const addFormSubmission = async formData => {\n  try {\n    console.log('FormSubmissionsService - Ajout d\\'une nouvelle soumission:', formData);\n\n    // S'assurer que le statut est défini\n    const submissionData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submissionDate: new Date()\n    };\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const docRef = await addDoc(submissionsCollection, submissionData);\n    const newSubmission = {\n      id: docRef.id,\n      ...submissionData\n    };\n    console.log('FormSubmissionsService - Nouvelle soumission ajoutée:', newSubmission);\n    return newSubmission;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de l\\'ajout de la soumission:', error);\n    throw new Error('Erreur lors de l\\'ajout de la soumission de formulaire');\n  }\n};\n\n// Mettre à jour le statut d'une soumission de formulaire\nexport const updateFormSubmissionStatus = async (id, status) => {\n  try {\n    console.log(`FormSubmissionsService - Mise à jour du statut de la soumission ${id} à ${status}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    await updateDoc(submissionDoc, {\n      status\n    });\n    console.log(`FormSubmissionsService - Statut de la soumission ${id} mis à jour à ${status}`);\n    return {\n      id,\n      status\n    };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la mise à jour du statut de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la mise à jour du statut de la soumission');\n  }\n};\n\n// Supprimer une soumission de formulaire\nexport const deleteFormSubmission = async id => {\n  try {\n    console.log(`FormSubmissionsService - Suppression de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    await deleteDoc(submissionDoc);\n    console.log(`FormSubmissionsService - Soumission ${id} supprimée`);\n    return {\n      id\n    };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la suppression de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la suppression de la soumission de formulaire');\n  }\n};\n\n// Récupérer les statistiques des soumissions\nexport const getFormSubmissionsStats = async () => {\n  try {\n    console.log('FormSubmissionsService - Calcul des statistiques des soumissions...');\n    const submissions = await getFormSubmissions();\n\n    // Compter les soumissions par statut\n    const statusCounts = submissions.reduce((counts, submission) => {\n      const status = submission.status || 'pending';\n      counts[status] = (counts[status] || 0) + 1;\n      return counts;\n    }, {});\n\n    // Compter les soumissions avec et sans token commun\n    const withCommonToken = submissions.filter(submission => submission.commonToken).length;\n    const withoutCommonToken = submissions.length - withCommonToken;\n\n    // Compter les soumissions en attente\n    const pendingCount = statusCounts.pending || 0;\n    const stats = {\n      total: submissions.length,\n      pendingCount,\n      statusCounts,\n      withCommonToken,\n      withoutCommonToken\n    };\n    console.log('FormSubmissionsService - Statistiques calculées:', stats);\n    return stats;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors du calcul des statistiques:', error);\n    throw new Error('Erreur lors du calcul des statistiques des soumissions');\n  }\n};\n\n// Créer une nouvelle soumission de formulaire (alias pour addFormSubmission)\nexport const createFormSubmission = async formData => {\n  try {\n    console.log('FormSubmissionsService - Création d\\'une nouvelle soumission:', formData);\n\n    // S'assurer que le statut est défini\n    const submissionData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submissionDate: new Date()\n    };\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const docRef = await addDoc(submissionsCollection, submissionData);\n    const newSubmission = {\n      id: docRef.id,\n      ...submissionData\n    };\n    console.log('FormSubmissionsService - Nouvelle soumission créée:', newSubmission);\n    return newSubmission;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la création de la soumission:', error);\n    throw new Error('Erreur lors de la création de la soumission de formulaire');\n  }\n};\n\n// Mettre à jour une soumission de formulaire avec les données du programmateur\nexport const updateFormSubmissionWithProgrammerData = async (submissionId, programmerData) => {\n  try {\n    console.log(`FormSubmissionsService - Mise à jour de la soumission ${submissionId} avec les données du programmateur:`, programmerData);\n    const submissionDoc = doc(db, COLLECTION_NAME, submissionId);\n\n    // Mettre à jour uniquement les champs pertinents\n    const updateData = {\n      status: 'approved',\n      processedAt: new Date(),\n      processedData: programmerData\n    };\n    await updateDoc(submissionDoc, updateData);\n    console.log(`FormSubmissionsService - Soumission ${submissionId} mise à jour avec les données du programmateur`);\n    return {\n      id: submissionId,\n      ...updateData\n    };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la mise à jour de la soumission ${submissionId}:`, error);\n    throw new Error('Erreur lors de la mise à jour de la soumission avec les données du programmateur');\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","orderBy","COLLECTION_NAME","getFormSubmissions","console","log","submissionsCollection","submissionsSnapshot","submissions","docs","map","id","data","length","submissionsToUpdate","filter","submission","status","updateFormSubmissionStatus","updatedSubmissionsSnapshot","updatedSubmissions","error","Error","getPendingFormSubmissions","pendingQuery","pendingSnapshot","pendingSubmissions","getFormSubmission","submissionDoc","submissionSnapshot","exists","addFormSubmission","formData","submissionData","submissionDate","Date","docRef","newSubmission","deleteFormSubmission","getFormSubmissionsStats","statusCounts","reduce","counts","withCommonToken","commonToken","withoutCommonToken","pendingCount","pending","stats","total","createFormSubmission","updateFormSubmissionWithProgrammerData","submissionId","programmerData","updateData","processedAt","processedData"],"sources":["/workspaces/app-booking/client/src/services/formSubmissionsService.js"],"sourcesContent":["import { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\n\nconst COLLECTION_NAME = 'formSubmissions';\n\n// Récupérer toutes les soumissions de formulaire\nexport const getFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération de toutes les soumissions...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const submissionsSnapshot = await getDocs(submissionsCollection);\n    \n    const submissions = submissionsSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`FormSubmissionsService - ${submissions.length} soumissions récupérées`);\n    \n    // Mettre à jour les soumissions sans statut\n    const submissionsToUpdate = submissions.filter(submission => !submission.status);\n    if (submissionsToUpdate.length > 0) {\n      console.log(`FormSubmissionsService - Mise à jour de ${submissionsToUpdate.length} soumissions sans statut...`);\n      for (const submission of submissionsToUpdate) {\n        await updateFormSubmissionStatus(submission.id, 'pending');\n      }\n      \n      // Récupérer à nouveau les soumissions après la mise à jour\n      const updatedSubmissionsSnapshot = await getDocs(submissionsCollection);\n      const updatedSubmissions = updatedSubmissionsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      \n      console.log(`FormSubmissionsService - ${updatedSubmissions.length} soumissions récupérées après mise à jour`);\n      return updatedSubmissions;\n    }\n    \n    return submissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions:', error);\n    throw new Error('Erreur lors de la récupération des soumissions de formulaire');\n  }\n};\n\n// Récupérer les soumissions en attente\nexport const getPendingFormSubmissions = async () => {\n  try {\n    console.log('FormSubmissionsService - Récupération des soumissions en attente...');\n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const pendingQuery = query(\n      submissionsCollection,\n      where('status', '==', 'pending'),\n      orderBy('submissionDate', 'desc')\n    );\n    \n    const pendingSnapshot = await getDocs(pendingQuery);\n    const pendingSubmissions = pendingSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`FormSubmissionsService - ${pendingSubmissions.length} soumissions en attente récupérées`);\n    return pendingSubmissions;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la récupération des soumissions en attente:', error);\n    throw new Error('Erreur lors de la récupération des soumissions en attente');\n  }\n};\n\n// Récupérer une soumission de formulaire par ID\nexport const getFormSubmission = async (id) => {\n  try {\n    console.log(`FormSubmissionsService - Récupération de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    const submissionSnapshot = await getDoc(submissionDoc);\n    \n    if (!submissionSnapshot.exists()) {\n      console.error(`FormSubmissionsService - Soumission ${id} non trouvée`);\n      throw new Error('Soumission de formulaire non trouvée');\n    }\n    \n    const submission = {\n      id: submissionSnapshot.id,\n      ...submissionSnapshot.data()\n    };\n    \n    console.log(`FormSubmissionsService - Soumission ${id} récupérée:`, submission);\n    return submission;\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la récupération de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la récupération de la soumission de formulaire');\n  }\n};\n\n// Ajouter une nouvelle soumission de formulaire\nexport const addFormSubmission = async (formData) => {\n  try {\n    console.log('FormSubmissionsService - Ajout d\\'une nouvelle soumission:', formData);\n    \n    // S'assurer que le statut est défini\n    const submissionData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submissionDate: new Date()\n    };\n    \n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const docRef = await addDoc(submissionsCollection, submissionData);\n    \n    const newSubmission = {\n      id: docRef.id,\n      ...submissionData\n    };\n    \n    console.log('FormSubmissionsService - Nouvelle soumission ajoutée:', newSubmission);\n    return newSubmission;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de l\\'ajout de la soumission:', error);\n    throw new Error('Erreur lors de l\\'ajout de la soumission de formulaire');\n  }\n};\n\n// Mettre à jour le statut d'une soumission de formulaire\nexport const updateFormSubmissionStatus = async (id, status) => {\n  try {\n    console.log(`FormSubmissionsService - Mise à jour du statut de la soumission ${id} à ${status}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    \n    await updateDoc(submissionDoc, { status });\n    \n    console.log(`FormSubmissionsService - Statut de la soumission ${id} mis à jour à ${status}`);\n    return { id, status };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la mise à jour du statut de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la mise à jour du statut de la soumission');\n  }\n};\n\n// Supprimer une soumission de formulaire\nexport const deleteFormSubmission = async (id) => {\n  try {\n    console.log(`FormSubmissionsService - Suppression de la soumission ${id}...`);\n    const submissionDoc = doc(db, COLLECTION_NAME, id);\n    \n    await deleteDoc(submissionDoc);\n    \n    console.log(`FormSubmissionsService - Soumission ${id} supprimée`);\n    return { id };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la suppression de la soumission ${id}:`, error);\n    throw new Error('Erreur lors de la suppression de la soumission de formulaire');\n  }\n};\n\n// Récupérer les statistiques des soumissions\nexport const getFormSubmissionsStats = async () => {\n  try {\n    console.log('FormSubmissionsService - Calcul des statistiques des soumissions...');\n    const submissions = await getFormSubmissions();\n    \n    // Compter les soumissions par statut\n    const statusCounts = submissions.reduce((counts, submission) => {\n      const status = submission.status || 'pending';\n      counts[status] = (counts[status] || 0) + 1;\n      return counts;\n    }, {});\n    \n    // Compter les soumissions avec et sans token commun\n    const withCommonToken = submissions.filter(submission => submission.commonToken).length;\n    const withoutCommonToken = submissions.length - withCommonToken;\n    \n    // Compter les soumissions en attente\n    const pendingCount = statusCounts.pending || 0;\n    \n    const stats = {\n      total: submissions.length,\n      pendingCount,\n      statusCounts,\n      withCommonToken,\n      withoutCommonToken\n    };\n    \n    console.log('FormSubmissionsService - Statistiques calculées:', stats);\n    return stats;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors du calcul des statistiques:', error);\n    throw new Error('Erreur lors du calcul des statistiques des soumissions');\n  }\n};\n\n// Créer une nouvelle soumission de formulaire (alias pour addFormSubmission)\nexport const createFormSubmission = async (formData) => {\n  try {\n    console.log('FormSubmissionsService - Création d\\'une nouvelle soumission:', formData);\n    \n    // S'assurer que le statut est défini\n    const submissionData = {\n      ...formData,\n      status: formData.status || 'pending',\n      submissionDate: new Date()\n    };\n    \n    const submissionsCollection = collection(db, COLLECTION_NAME);\n    const docRef = await addDoc(submissionsCollection, submissionData);\n    \n    const newSubmission = {\n      id: docRef.id,\n      ...submissionData\n    };\n    \n    console.log('FormSubmissionsService - Nouvelle soumission créée:', newSubmission);\n    return newSubmission;\n  } catch (error) {\n    console.error('FormSubmissionsService - Erreur lors de la création de la soumission:', error);\n    throw new Error('Erreur lors de la création de la soumission de formulaire');\n  }\n};\n\n// Mettre à jour une soumission de formulaire avec les données du programmateur\nexport const updateFormSubmissionWithProgrammerData = async (submissionId, programmerData) => {\n  try {\n    console.log(`FormSubmissionsService - Mise à jour de la soumission ${submissionId} avec les données du programmateur:`, programmerData);\n    const submissionDoc = doc(db, COLLECTION_NAME, submissionId);\n    \n    // Mettre à jour uniquement les champs pertinents\n    const updateData = {\n      status: 'approved',\n      processedAt: new Date(),\n      processedData: programmerData\n    };\n    \n    await updateDoc(submissionDoc, updateData);\n    \n    console.log(`FormSubmissionsService - Soumission ${submissionId} mise à jour avec les données du programmateur`);\n    return { id: submissionId, ...updateData };\n  } catch (error) {\n    console.error(`FormSubmissionsService - Erreur lors de la mise à jour de la soumission ${submissionId}:`, error);\n    throw new Error('Erreur lors de la mise à jour de la soumission avec les données du programmateur');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}