{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{getAuth,signInWithEmailAndPassword,signOut,onAuthStateChanged}from'firebase/auth';import{app}from'../firebase';import{useLocation}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>useContext(AuthContext);// Configuration pour le mode bypass d'authentification\nconst BYPASS_AUTH=true;// Mettre à false pour activer l'authentification réelle\nconst TEST_USER={id:'test-user-id',email:'test@example.com',name:'Utilisateur Test',role:'admin'};// Fonction pour vérifier si une route est publique - adaptée pour HashRouter\nconst isPublicRoute=path=>{// Nettoyer le chemin pour HashRouter (enlever le # au début si présent)\nconst cleanPath=path.replace(/^#/,'');// Si le chemin commence par un slash, l'utiliser tel quel, sinon ajouter un slash\nconst normalizedPath=cleanPath.startsWith('/')?cleanPath:`/${cleanPath}`;console.log('AuthContext - isPublicRoute - chemin original:',path);console.log('AuthContext - isPublicRoute - chemin nettoyé:',cleanPath);console.log('AuthContext - isPublicRoute - chemin normalisé:',normalizedPath);const isPublic=normalizedPath.startsWith('/form/')||normalizedPath==='/form-submitted';console.log('AuthContext - isPublicRoute - est une route publique:',isPublic);return isPublic;};export const AuthProvider=_ref=>{let{children}=_ref;const location=useLocation();// Obtenir le chemin actuel à partir du hash (pour HashRouter)\nconst currentHash=location.hash||'';// Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\nconst cleanHash=currentHash.replace(/^#/,'');// Vérifier si la route actuelle est une route publique\nconst isCurrentRoutePublic=isPublicRoute(currentHash);console.log('AuthContext - Route actuelle (hash brut):',currentHash);console.log('AuthContext - Route actuelle (hash nettoyé):',cleanHash);console.log('AuthContext - Est une route publique:',isCurrentRoutePublic);// Désactiver le bypass d'authentification pour les routes publiques\nconst effectiveBypass=BYPASS_AUTH&&!isCurrentRoutePublic;console.log('AuthContext - BYPASS_AUTH global:',BYPASS_AUTH);console.log('AuthContext - Bypass effectif pour cette route:',effectiveBypass);const[currentUser,setCurrentUser]=useState(effectiveBypass?TEST_USER:null);const[isAuthenticated,setIsAuthenticated]=useState(effectiveBypass);const[loading,setLoading]=useState(!effectiveBypass);const[error,setError]=useState(null);const auth=getAuth(app);useEffect(()=>{// Mettre à jour l'état d'authentification lorsque la route change\nif(isCurrentRoutePublic){console.log('AuthContext - Route publique détectée, désactivation du bypass d\\'authentification');setIsAuthenticated(false);setCurrentUser(null);}else if(BYPASS_AUTH){console.log('AuthContext - Route protégée avec bypass activé, authentification simulée');setIsAuthenticated(true);setCurrentUser(TEST_USER);}if(BYPASS_AUTH&&!isCurrentRoutePublic){console.log('AuthContext - Mode bypass d\\'authentification activé pour route protégée');return;}const unsubscribe=onAuthStateChanged(auth,user=>{if(user){// Utilisateur connecté\nconsole.log('AuthContext - Utilisateur connecté:',user.email);setCurrentUser({id:user.uid,email:user.email,name:user.displayName||user.email.split('@')[0],role:'admin'// Par défaut, tous les utilisateurs sont admin pour l'instant\n});setIsAuthenticated(true);}else{// Utilisateur déconnecté\nconsole.log('AuthContext - Utilisateur déconnecté');setCurrentUser(null);setIsAuthenticated(false);}setLoading(false);});return()=>unsubscribe();},[auth,isCurrentRoutePublic,BYPASS_AUTH,location]);const login=async(email,password)=>{if(BYPASS_AUTH){console.log('AuthContext - Mode bypass d\\'authentification activé - Login simulé');setCurrentUser(TEST_USER);setIsAuthenticated(true);setError(null);return true;}try{setLoading(true);await signInWithEmailAndPassword(auth,email,password);setError(null);return true;}catch(error){console.error('AuthContext - Erreur de connexion:',error);setError(error.message);return false;}finally{setLoading(false);}};const logout=async()=>{if(BYPASS_AUTH){console.log('AuthContext - Mode bypass d\\'authentification activé - Logout ignoré');return;}try{await signOut(auth);}catch(error){console.error('AuthContext - Erreur lors de la déconnexion:',error);}};return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(AuthContext.Provider,{value:{currentUser,isAuthenticated,loading,error,login,logout,bypassEnabled:BYPASS_AUTH,isPublicRoute:isPublicRoute,isCurrentRoutePublic:isCurrentRoutePublic},children:children})});};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getAuth","signInWithEmailAndPassword","signOut","onAuthStateChanged","app","useLocation","jsx","_jsx","AuthContext","useAuth","BYPASS_AUTH","TEST_USER","id","email","name","role","isPublicRoute","path","cleanPath","replace","normalizedPath","startsWith","console","log","isPublic","AuthProvider","_ref","children","location","currentHash","hash","cleanHash","isCurrentRoutePublic","effectiveBypass","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","auth","unsubscribe","user","uid","displayName","split","login","password","message","logout","Fragment","Provider","value","bypassEnabled"],"sources":["/workspaces/app-booking/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { app } from '../firebase';\nimport { useLocation } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\n// Configuration pour le mode bypass d'authentification\nconst BYPASS_AUTH = true; // Mettre à false pour activer l'authentification réelle\nconst TEST_USER = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Utilisateur Test',\n  role: 'admin'\n};\n\n// Fonction pour vérifier si une route est publique - adaptée pour HashRouter\nconst isPublicRoute = (path) => {\n  // Nettoyer le chemin pour HashRouter (enlever le # au début si présent)\n  const cleanPath = path.replace(/^#/, '');\n  \n  // Si le chemin commence par un slash, l'utiliser tel quel, sinon ajouter un slash\n  const normalizedPath = cleanPath.startsWith('/') ? cleanPath : `/${cleanPath}`;\n  \n  console.log('AuthContext - isPublicRoute - chemin original:', path);\n  console.log('AuthContext - isPublicRoute - chemin nettoyé:', cleanPath);\n  console.log('AuthContext - isPublicRoute - chemin normalisé:', normalizedPath);\n  \n  const isPublic = normalizedPath.startsWith('/form/') || normalizedPath === '/form-submitted';\n  console.log('AuthContext - isPublicRoute - est une route publique:', isPublic);\n  \n  return isPublic;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const location = useLocation();\n  \n  // Obtenir le chemin actuel à partir du hash (pour HashRouter)\n  const currentHash = location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanHash = currentHash.replace(/^#/, '');\n  // Vérifier si la route actuelle est une route publique\n  const isCurrentRoutePublic = isPublicRoute(currentHash);\n  \n  console.log('AuthContext - Route actuelle (hash brut):', currentHash);\n  console.log('AuthContext - Route actuelle (hash nettoyé):', cleanHash);\n  console.log('AuthContext - Est une route publique:', isCurrentRoutePublic);\n  \n  // Désactiver le bypass d'authentification pour les routes publiques\n  const effectiveBypass = BYPASS_AUTH && !isCurrentRoutePublic;\n  console.log('AuthContext - BYPASS_AUTH global:', BYPASS_AUTH);\n  console.log('AuthContext - Bypass effectif pour cette route:', effectiveBypass);\n  \n  const [currentUser, setCurrentUser] = useState(effectiveBypass ? TEST_USER : null);\n  const [isAuthenticated, setIsAuthenticated] = useState(effectiveBypass);\n  const [loading, setLoading] = useState(!effectiveBypass);\n  const [error, setError] = useState(null);\n  const auth = getAuth(app);\n\n  useEffect(() => {\n    // Mettre à jour l'état d'authentification lorsque la route change\n    if (isCurrentRoutePublic) {\n      console.log('AuthContext - Route publique détectée, désactivation du bypass d\\'authentification');\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } else if (BYPASS_AUTH) {\n      console.log('AuthContext - Route protégée avec bypass activé, authentification simulée');\n      setIsAuthenticated(true);\n      setCurrentUser(TEST_USER);\n    }\n    \n    if (BYPASS_AUTH && !isCurrentRoutePublic) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé pour route protégée');\n      return;\n    }\n\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // Utilisateur connecté\n        console.log('AuthContext - Utilisateur connecté:', user.email);\n        setCurrentUser({\n          id: user.uid,\n          email: user.email,\n          name: user.displayName || user.email.split('@')[0],\n          role: 'admin' // Par défaut, tous les utilisateurs sont admin pour l'instant\n        });\n        setIsAuthenticated(true);\n      } else {\n        // Utilisateur déconnecté\n        console.log('AuthContext - Utilisateur déconnecté');\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [auth, isCurrentRoutePublic, BYPASS_AUTH, location]);\n\n  const login = async (email, password) => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Login simulé');\n      setCurrentUser(TEST_USER);\n      setIsAuthenticated(true);\n      setError(null);\n      return true;\n    }\n\n    try {\n      setLoading(true);\n      await signInWithEmailAndPassword(auth, email, password);\n      setError(null);\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur de connexion:', error);\n      setError(error.message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Logout ignoré');\n      return;\n    }\n\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('AuthContext - Erreur lors de la déconnexion:', error);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <AuthContext.Provider value={{ \n        currentUser, \n        isAuthenticated, \n        loading, \n        error, \n        login, \n        logout,\n        bypassEnabled: BYPASS_AUTH,\n        isPublicRoute: isPublicRoute,\n        isCurrentRoutePublic: isCurrentRoutePublic\n      }}>\n        {children}\n      </AuthContext.Provider>\n    </React.Fragment>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}