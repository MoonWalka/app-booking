{"ast":null,"code":"// client/src/services/contractsService.js\nimport { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\n\n// Collection de référence\nconst CONTRACTS_COLLECTION = 'contracts';\n\n/**\n * Récupère tous les contrats\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const fetchContracts = async (filters = {}) => {\n  try {\n    // Création d'une requête de base\n    let contractsQuery = collection(db, CONTRACTS_COLLECTION);\n\n    // Application des filtres si nécessaire\n    if (filters) {\n      // Filtrer par artiste\n      if (filters.artist) {\n        contractsQuery = query(contractsQuery, where('artist.name', '>=', filters.artist), where('artist.name', '<=', filters.artist + '\\uf8ff'));\n      }\n\n      // Filtrer par lieu\n      if (filters.venue) {\n        contractsQuery = query(contractsQuery, where('venue', '>=', filters.venue), where('venue', '<=', filters.venue + '\\uf8ff'));\n      }\n\n      // Filtrer par projet\n      if (filters.project) {\n        contractsQuery = query(contractsQuery, where('project', '>=', filters.project), where('project', '<=', filters.project + '\\uf8ff'));\n      }\n    }\n\n    // Ajout d'un tri par date\n    contractsQuery = query(contractsQuery, orderBy('date', 'desc'));\n\n    // Exécution de la requête\n    const querySnapshot = await getDocs(contractsQuery);\n\n    // Transformation des documents en objets JavaScript\n    const contracts = [];\n    querySnapshot.forEach(doc => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats:', error);\n\n    // En cas d'erreur, retourner des données fictives pour le développement\n    const mockContracts = [{\n      id: '1',\n      concertId: 'mock-concert-1',\n      date: '2025-05-15',\n      optionDate: '2025-03-01',\n      artist: {\n        id: 'a1',\n        name: 'Les Harmonies Urbaines'\n      },\n      project: 'Tournée Printemps',\n      venue: 'L\\'Olympia',\n      city: 'Paris',\n      programmer: {\n        id: 'p1',\n        name: 'Jean Dupont'\n      },\n      amount: 2500,\n      formStatus: 'validated',\n      contractSentStatus: 'validated',\n      contractSignedStatus: 'pending',\n      invoiceStatus: 'pending',\n      status: 'en_cours'\n    }, {\n      id: '2',\n      concertId: 'mock-concert-2',\n      date: '2025-06-20',\n      optionDate: '2025-04-01',\n      artist: {\n        id: 'a2',\n        name: 'Échos Poétiques'\n      },\n      project: 'Festival d\\'été',\n      venue: 'Zénith',\n      city: 'Lille',\n      programmer: {\n        id: 'p2',\n        name: 'Marie Martin'\n      },\n      amount: 3000,\n      formStatus: 'validated',\n      contractSentStatus: 'validated',\n      contractSignedStatus: 'validated',\n      invoiceStatus: 'pending',\n      status: 'confirmé'\n    }, {\n      id: '3',\n      concertId: 'mock-concert-3',\n      date: '2025-07-10',\n      optionDate: null,\n      artist: {\n        id: 'a3',\n        name: 'Rythmes Solaires'\n      },\n      project: 'Showcase',\n      venue: 'La Cigale',\n      city: 'Paris',\n      programmer: {\n        id: 'p3',\n        name: 'Sophie Lefebvre'\n      },\n      amount: 1800,\n      formStatus: 'pending',\n      contractSentStatus: 'pending',\n      contractSignedStatus: 'pending',\n      invoiceStatus: 'pending',\n      status: 'en_négociation'\n    }, {\n      id: '4',\n      concertId: 'mock-concert-4',\n      date: '2025-08-05',\n      optionDate: '2025-05-15',\n      artist: {\n        id: 'a4',\n        name: 'Jazz Fusion Quartet'\n      },\n      project: 'Jazz Tour',\n      venue: 'New Morning',\n      city: 'Paris',\n      programmer: {\n        id: 'p4',\n        name: 'Pierre Dubois'\n      },\n      amount: 2200,\n      formStatus: 'validated',\n      contractSentStatus: 'validated',\n      contractSignedStatus: 'validated',\n      invoiceStatus: 'validated',\n      status: 'confirmé'\n    }, {\n      id: '5',\n      concertId: 'mock-concert-5',\n      date: '2025-09-12',\n      optionDate: '2025-06-20',\n      artist: {\n        id: 'a5',\n        name: 'Électro Symphonie'\n      },\n      project: 'Électro Night',\n      venue: 'Bataclan',\n      city: 'Paris',\n      programmer: {\n        id: 'p5',\n        name: 'Lucie Moreau'\n      },\n      amount: 2800,\n      formStatus: 'validated',\n      contractSentStatus: 'cancelled',\n      contractSignedStatus: 'pending',\n      invoiceStatus: 'pending',\n      status: 'en_négociation'\n    }];\n    return mockContracts;\n  }\n};\n\n/**\n * Récupère un contrat par son ID\n * @param {string} id - ID du contrat\n * @returns {Promise<Object>} Données du contrat\n */\nexport const getContractById = async id => {\n  try {\n    const contractDoc = await getDoc(doc(db, CONTRACTS_COLLECTION, id));\n    if (contractDoc.exists()) {\n      return {\n        id: contractDoc.id,\n        ...contractDoc.data()\n      };\n    } else {\n      throw new Error('Contrat non trouvé');\n    }\n  } catch (error) {\n    console.error('Erreur lors de la récupération du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Crée un nouveau contrat\n * @param {Object} contractData - Données du contrat\n * @returns {Promise<Object>} Contrat créé avec ID\n */\nexport const createContract = async contractData => {\n  try {\n    // S'assurer que les nouveaux champs sont présents\n    const completeContractData = {\n      ...contractData,\n      project: contractData.project || null,\n      optionDate: contractData.optionDate || null,\n      amount: contractData.amount || 0,\n      formStatus: contractData.formStatus || 'pending',\n      contractSentStatus: contractData.contractSentStatus || 'pending',\n      contractSignedStatus: contractData.contractSignedStatus || 'pending',\n      invoiceStatus: contractData.invoiceStatus || 'pending'\n    };\n    const docRef = await addDoc(collection(db, CONTRACTS_COLLECTION), completeContractData);\n    return {\n      id: docRef.id,\n      ...completeContractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création du contrat:', error);\n\n    // En cas d'erreur, simuler la création d'un contrat\n    const mockId = 'mock-contract-' + Date.now();\n    return {\n      id: mockId,\n      ...contractData\n    };\n  }\n};\n\n/**\n * Met à jour un contrat existant\n * @param {string} id - ID du contrat\n * @param {Object} contractData - Nouvelles données du contrat\n * @returns {Promise<Object>} Contrat mis à jour\n */\nexport const updateContract = async (id, contractData) => {\n  try {\n    await updateDoc(doc(db, CONTRACTS_COLLECTION, id), contractData);\n    return {\n      id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la mise à jour du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime un contrat\n * @param {string} id - ID du contrat\n * @returns {Promise<string>} ID du contrat supprimé\n */\nexport const deleteContract = async id => {\n  try {\n    await deleteDoc(doc(db, CONTRACTS_COLLECTION, id));\n    return id;\n  } catch (error) {\n    console.error('Erreur lors de la suppression du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des IDs des contrats supprimés\n */\nexport const deleteContractsByConcert = async concertId => {\n  try {\n    // Récupérer tous les contrats liés au concert\n    const contractsQuery = query(collection(db, CONTRACTS_COLLECTION), where('concertId', '==', concertId));\n    const querySnapshot = await getDocs(contractsQuery);\n\n    // Si aucun contrat n'est trouvé, retourner un tableau vide\n    if (querySnapshot.empty) {\n      return [];\n    }\n\n    // Supprimer chaque contrat et collecter les IDs\n    const deletedIds = [];\n    const deletePromises = [];\n    querySnapshot.forEach(doc => {\n      deletedIds.push(doc.id);\n      deletePromises.push(deleteDoc(doc.ref));\n    });\n\n    // Attendre que toutes les suppressions soient terminées\n    await Promise.all(deletePromises);\n    console.log(`${deletedIds.length} contrats liés au concert ${concertId} ont été supprimés`);\n    return deletedIds;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression des contrats liés au concert ${concertId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un artiste\n * @param {string} artistId - ID de l'artiste\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByArtist = async artistId => {\n  try {\n    const contractsQuery = query(collection(db, CONTRACTS_COLLECTION), where('artist.id', '==', artistId), orderBy('date', 'desc'));\n    const querySnapshot = await getDocs(contractsQuery);\n    const contracts = [];\n    querySnapshot.forEach(doc => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par artiste:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un programmateur\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProgrammer = async programmerId => {\n  try {\n    const contractsQuery = query(collection(db, CONTRACTS_COLLECTION), where('programmer.id', '==', programmerId), orderBy('date', 'desc'));\n    const querySnapshot = await getDocs(contractsQuery);\n    const contracts = [];\n    querySnapshot.forEach(doc => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par programmateur:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByConcert = async concertId => {\n  try {\n    const contractsQuery = query(collection(db, CONTRACTS_COLLECTION), where('concertId', '==', concertId));\n    const querySnapshot = await getDocs(contractsQuery);\n    const contracts = [];\n    querySnapshot.forEach(doc => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par concert:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats par projet\n * @param {string} project - Nom du projet\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProject = async project => {\n  try {\n    const contractsQuery = query(collection(db, CONTRACTS_COLLECTION), where('project', '==', project), orderBy('date', 'desc'));\n    const querySnapshot = await getDocs(contractsQuery);\n    const contracts = [];\n    querySnapshot.forEach(doc => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par projet:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","where","orderBy","CONTRACTS_COLLECTION","fetchContracts","filters","contractsQuery","artist","venue","project","querySnapshot","contracts","forEach","push","id","data","error","console","mockContracts","concertId","date","optionDate","name","city","programmer","amount","formStatus","contractSentStatus","contractSignedStatus","invoiceStatus","status","getContractById","contractDoc","exists","Error","createContract","contractData","completeContractData","docRef","mockId","Date","now","updateContract","deleteContract","deleteContractsByConcert","empty","deletedIds","deletePromises","ref","Promise","all","log","length","getContractsByArtist","artistId","getContractsByProgrammer","programmerId","getContractsByConcert","getContractsByProject"],"sources":["/workspaces/app-booking/client/src/services/contractsService.js"],"sourcesContent":["// client/src/services/contractsService.js\nimport { db } from '../firebase';\nimport { collection, getDocs, getDoc, doc, addDoc, updateDoc, deleteDoc, query, where, orderBy } from 'firebase/firestore';\n\n// Collection de référence\nconst CONTRACTS_COLLECTION = 'contracts';\n\n/**\n * Récupère tous les contrats\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const fetchContracts = async (filters = {}) => {\n  try {\n    // Création d'une requête de base\n    let contractsQuery = collection(db, CONTRACTS_COLLECTION);\n    \n    // Application des filtres si nécessaire\n    if (filters) {\n      // Filtrer par artiste\n      if (filters.artist) {\n        contractsQuery = query(contractsQuery, where('artist.name', '>=', filters.artist), \n                                             where('artist.name', '<=', filters.artist + '\\uf8ff'));\n      }\n      \n      // Filtrer par lieu\n      if (filters.venue) {\n        contractsQuery = query(contractsQuery, where('venue', '>=', filters.venue), \n                                             where('venue', '<=', filters.venue + '\\uf8ff'));\n      }\n      \n      // Filtrer par projet\n      if (filters.project) {\n        contractsQuery = query(contractsQuery, where('project', '>=', filters.project), \n                                             where('project', '<=', filters.project + '\\uf8ff'));\n      }\n    }\n    \n    // Ajout d'un tri par date\n    contractsQuery = query(contractsQuery, orderBy('date', 'desc'));\n    \n    // Exécution de la requête\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    // Transformation des documents en objets JavaScript\n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats:', error);\n    \n    // En cas d'erreur, retourner des données fictives pour le développement\n    const mockContracts = [\n      {\n        id: '1',\n        concertId: 'mock-concert-1',\n        date: '2025-05-15',\n        optionDate: '2025-03-01',\n        artist: { id: 'a1', name: 'Les Harmonies Urbaines' },\n        project: 'Tournée Printemps',\n        venue: 'L\\'Olympia',\n        city: 'Paris',\n        programmer: { id: 'p1', name: 'Jean Dupont' },\n        amount: 2500,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_cours'\n      },\n      {\n        id: '2',\n        concertId: 'mock-concert-2',\n        date: '2025-06-20',\n        optionDate: '2025-04-01',\n        artist: { id: 'a2', name: 'Échos Poétiques' },\n        project: 'Festival d\\'été',\n        venue: 'Zénith',\n        city: 'Lille',\n        programmer: { id: 'p2', name: 'Marie Martin' },\n        amount: 3000,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'validated',\n        invoiceStatus: 'pending',\n        status: 'confirmé'\n      },\n      {\n        id: '3',\n        concertId: 'mock-concert-3',\n        date: '2025-07-10',\n        optionDate: null,\n        artist: { id: 'a3', name: 'Rythmes Solaires' },\n        project: 'Showcase',\n        venue: 'La Cigale',\n        city: 'Paris',\n        programmer: { id: 'p3', name: 'Sophie Lefebvre' },\n        amount: 1800,\n        formStatus: 'pending',\n        contractSentStatus: 'pending',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_négociation'\n      },\n      {\n        id: '4',\n        concertId: 'mock-concert-4',\n        date: '2025-08-05',\n        optionDate: '2025-05-15',\n        artist: { id: 'a4', name: 'Jazz Fusion Quartet' },\n        project: 'Jazz Tour',\n        venue: 'New Morning',\n        city: 'Paris',\n        programmer: { id: 'p4', name: 'Pierre Dubois' },\n        amount: 2200,\n        formStatus: 'validated',\n        contractSentStatus: 'validated',\n        contractSignedStatus: 'validated',\n        invoiceStatus: 'validated',\n        status: 'confirmé'\n      },\n      {\n        id: '5',\n        concertId: 'mock-concert-5',\n        date: '2025-09-12',\n        optionDate: '2025-06-20',\n        artist: { id: 'a5', name: 'Électro Symphonie' },\n        project: 'Électro Night',\n        venue: 'Bataclan',\n        city: 'Paris',\n        programmer: { id: 'p5', name: 'Lucie Moreau' },\n        amount: 2800,\n        formStatus: 'validated',\n        contractSentStatus: 'cancelled',\n        contractSignedStatus: 'pending',\n        invoiceStatus: 'pending',\n        status: 'en_négociation'\n      }\n    ];\n    \n    return mockContracts;\n  }\n};\n\n/**\n * Récupère un contrat par son ID\n * @param {string} id - ID du contrat\n * @returns {Promise<Object>} Données du contrat\n */\nexport const getContractById = async (id) => {\n  try {\n    const contractDoc = await getDoc(doc(db, CONTRACTS_COLLECTION, id));\n    \n    if (contractDoc.exists()) {\n      return {\n        id: contractDoc.id,\n        ...contractDoc.data()\n      };\n    } else {\n      throw new Error('Contrat non trouvé');\n    }\n  } catch (error) {\n    console.error('Erreur lors de la récupération du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Crée un nouveau contrat\n * @param {Object} contractData - Données du contrat\n * @returns {Promise<Object>} Contrat créé avec ID\n */\nexport const createContract = async (contractData) => {\n  try {\n    // S'assurer que les nouveaux champs sont présents\n    const completeContractData = {\n      ...contractData,\n      project: contractData.project || null,\n      optionDate: contractData.optionDate || null,\n      amount: contractData.amount || 0,\n      formStatus: contractData.formStatus || 'pending',\n      contractSentStatus: contractData.contractSentStatus || 'pending',\n      contractSignedStatus: contractData.contractSignedStatus || 'pending',\n      invoiceStatus: contractData.invoiceStatus || 'pending'\n    };\n    \n    const docRef = await addDoc(collection(db, CONTRACTS_COLLECTION), completeContractData);\n    return {\n      id: docRef.id,\n      ...completeContractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la création du contrat:', error);\n    \n    // En cas d'erreur, simuler la création d'un contrat\n    const mockId = 'mock-contract-' + Date.now();\n    return {\n      id: mockId,\n      ...contractData\n    };\n  }\n};\n\n/**\n * Met à jour un contrat existant\n * @param {string} id - ID du contrat\n * @param {Object} contractData - Nouvelles données du contrat\n * @returns {Promise<Object>} Contrat mis à jour\n */\nexport const updateContract = async (id, contractData) => {\n  try {\n    await updateDoc(doc(db, CONTRACTS_COLLECTION, id), contractData);\n    return {\n      id,\n      ...contractData\n    };\n  } catch (error) {\n    console.error('Erreur lors de la mise à jour du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime un contrat\n * @param {string} id - ID du contrat\n * @returns {Promise<string>} ID du contrat supprimé\n */\nexport const deleteContract = async (id) => {\n  try {\n    await deleteDoc(doc(db, CONTRACTS_COLLECTION, id));\n    return id;\n  } catch (error) {\n    console.error('Erreur lors de la suppression du contrat:', error);\n    throw error;\n  }\n};\n\n/**\n * Supprime les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des IDs des contrats supprimés\n */\nexport const deleteContractsByConcert = async (concertId) => {\n  try {\n    // Récupérer tous les contrats liés au concert\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('concertId', '==', concertId)\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    // Si aucun contrat n'est trouvé, retourner un tableau vide\n    if (querySnapshot.empty) {\n      return [];\n    }\n    \n    // Supprimer chaque contrat et collecter les IDs\n    const deletedIds = [];\n    const deletePromises = [];\n    \n    querySnapshot.forEach((doc) => {\n      deletedIds.push(doc.id);\n      deletePromises.push(deleteDoc(doc.ref));\n    });\n    \n    // Attendre que toutes les suppressions soient terminées\n    await Promise.all(deletePromises);\n    \n    console.log(`${deletedIds.length} contrats liés au concert ${concertId} ont été supprimés`);\n    return deletedIds;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression des contrats liés au concert ${concertId}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un artiste\n * @param {string} artistId - ID de l'artiste\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByArtist = async (artistId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('artist.id', '==', artistId),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par artiste:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un programmateur\n * @param {string} programmerId - ID du programmateur\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProgrammer = async (programmerId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('programmer.id', '==', programmerId),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par programmateur:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats liés à un concert\n * @param {string} concertId - ID du concert\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByConcert = async (concertId) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('concertId', '==', concertId)\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par concert:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère les contrats par projet\n * @param {string} project - Nom du projet\n * @returns {Promise<Array>} Liste des contrats\n */\nexport const getContractsByProject = async (project) => {\n  try {\n    const contractsQuery = query(\n      collection(db, CONTRACTS_COLLECTION), \n      where('project', '==', project),\n      orderBy('date', 'desc')\n    );\n    const querySnapshot = await getDocs(contractsQuery);\n    \n    const contracts = [];\n    querySnapshot.forEach((doc) => {\n      contracts.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    \n    return contracts;\n  } catch (error) {\n    console.error('Erreur lors de la récupération des contrats par projet:', error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}