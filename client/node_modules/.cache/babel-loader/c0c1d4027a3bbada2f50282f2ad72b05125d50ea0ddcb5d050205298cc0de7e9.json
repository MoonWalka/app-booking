{"ast":null,"code":"var _jsxFileName = \"/workspaces/app-booking/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { app } from '../firebase';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Configuration pour le mode bypass d'authentification\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst BYPASS_AUTH = true; // Mettre à false pour activer l'authentification réelle\nconst TEST_USER = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Utilisateur Test',\n  role: 'admin'\n};\n\n// Fonction pour vérifier si une route est publique - adaptée pour HashRouter\nconst isPublicRoute = path => {\n  // Nettoyer le chemin pour HashRouter (enlever le # au début si présent)\n  const cleanPath = path.replace(/^#/, '');\n\n  // Si le chemin commence par un slash, l'utiliser tel quel, sinon ajouter un slash\n  const normalizedPath = cleanPath.startsWith('/') ? cleanPath : `/${cleanPath}`;\n  console.log('AuthContext - isPublicRoute - chemin original:', path);\n  console.log('AuthContext - isPublicRoute - chemin nettoyé:', cleanPath);\n  console.log('AuthContext - isPublicRoute - chemin normalisé:', normalizedPath);\n  const isPublic = normalizedPath.startsWith('/form/') || normalizedPath === '/form-submitted';\n  console.log('AuthContext - isPublicRoute - est une route publique:', isPublic);\n  return isPublic;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const location = useLocation();\n\n  // Obtenir le chemin actuel à partir du hash (pour HashRouter)\n  const currentHash = location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanHash = currentHash.replace(/^#/, '');\n  // Vérifier si la route actuelle est une route publique\n  const isCurrentRoutePublic = isPublicRoute(currentHash);\n  console.log('AuthContext - Route actuelle (hash brut):', currentHash);\n  console.log('AuthContext - Route actuelle (hash nettoyé):', cleanHash);\n  console.log('AuthContext - Est une route publique:', isCurrentRoutePublic);\n\n  // Désactiver le bypass d'authentification pour les routes publiques\n  const effectiveBypass = BYPASS_AUTH && !isCurrentRoutePublic;\n  console.log('AuthContext - BYPASS_AUTH global:', BYPASS_AUTH);\n  console.log('AuthContext - Bypass effectif pour cette route:', effectiveBypass);\n  const [currentUser, setCurrentUser] = useState(effectiveBypass ? TEST_USER : null);\n  const [isAuthenticated, setIsAuthenticated] = useState(effectiveBypass);\n  const [loading, setLoading] = useState(!effectiveBypass);\n  const [error, setError] = useState(null);\n  const auth = getAuth(app);\n  useEffect(() => {\n    // Mettre à jour l'état d'authentification lorsque la route change\n    if (isCurrentRoutePublic) {\n      console.log('AuthContext - Route publique détectée, désactivation du bypass d\\'authentification');\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } else if (BYPASS_AUTH) {\n      console.log('AuthContext - Route protégée avec bypass activé, authentification simulée');\n      setIsAuthenticated(true);\n      setCurrentUser(TEST_USER);\n    }\n    if (BYPASS_AUTH && !isCurrentRoutePublic) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé pour route protégée');\n      return;\n    }\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        // Utilisateur connecté\n        console.log('AuthContext - Utilisateur connecté:', user.email);\n        setCurrentUser({\n          id: user.uid,\n          email: user.email,\n          name: user.displayName || user.email.split('@')[0],\n          role: 'admin' // Par défaut, tous les utilisateurs sont admin pour l'instant\n        });\n        setIsAuthenticated(true);\n      } else {\n        // Utilisateur déconnecté\n        console.log('AuthContext - Utilisateur déconnecté');\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, [auth, isCurrentRoutePublic, BYPASS_AUTH, location]);\n  const login = async (email, password) => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Login simulé');\n      setCurrentUser(TEST_USER);\n      setIsAuthenticated(true);\n      setError(null);\n      return true;\n    }\n    try {\n      setLoading(true);\n      await signInWithEmailAndPassword(auth, email, password);\n      setError(null);\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur de connexion:', error);\n      setError(error.message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Logout ignoré');\n      return;\n    }\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('AuthContext - Erreur lors de la déconnexion:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        currentUser,\n        isAuthenticated,\n        loading,\n        error,\n        login,\n        logout,\n        bypassEnabled: BYPASS_AUTH,\n        isPublicRoute: isPublicRoute,\n        isCurrentRoutePublic: isCurrentRoutePublic\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"o4nARXvLroTudD95Qq66U0OK3Y8=\", false, function () {\n  return [useLocation];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getAuth","signInWithEmailAndPassword","signOut","onAuthStateChanged","app","useLocation","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","BYPASS_AUTH","TEST_USER","id","email","name","role","isPublicRoute","path","cleanPath","replace","normalizedPath","startsWith","console","log","isPublic","AuthProvider","children","_s2","location","currentHash","hash","cleanHash","isCurrentRoutePublic","effectiveBypass","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","auth","unsubscribe","user","uid","displayName","split","login","password","message","logout","Fragment","Provider","value","bypassEnabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/app-booking/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { app } from '../firebase';\nimport { useLocation } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n\n// Configuration pour le mode bypass d'authentification\nconst BYPASS_AUTH = true; // Mettre à false pour activer l'authentification réelle\nconst TEST_USER = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Utilisateur Test',\n  role: 'admin'\n};\n\n// Fonction pour vérifier si une route est publique - adaptée pour HashRouter\nconst isPublicRoute = (path) => {\n  // Nettoyer le chemin pour HashRouter (enlever le # au début si présent)\n  const cleanPath = path.replace(/^#/, '');\n  \n  // Si le chemin commence par un slash, l'utiliser tel quel, sinon ajouter un slash\n  const normalizedPath = cleanPath.startsWith('/') ? cleanPath : `/${cleanPath}`;\n  \n  console.log('AuthContext - isPublicRoute - chemin original:', path);\n  console.log('AuthContext - isPublicRoute - chemin nettoyé:', cleanPath);\n  console.log('AuthContext - isPublicRoute - chemin normalisé:', normalizedPath);\n  \n  const isPublic = normalizedPath.startsWith('/form/') || normalizedPath === '/form-submitted';\n  console.log('AuthContext - isPublicRoute - est une route publique:', isPublic);\n  \n  return isPublic;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const location = useLocation();\n  \n  // Obtenir le chemin actuel à partir du hash (pour HashRouter)\n  const currentHash = location.hash || '';\n  // Nettoyer le hash pour obtenir le chemin réel (enlever le # au début)\n  const cleanHash = currentHash.replace(/^#/, '');\n  // Vérifier si la route actuelle est une route publique\n  const isCurrentRoutePublic = isPublicRoute(currentHash);\n  \n  console.log('AuthContext - Route actuelle (hash brut):', currentHash);\n  console.log('AuthContext - Route actuelle (hash nettoyé):', cleanHash);\n  console.log('AuthContext - Est une route publique:', isCurrentRoutePublic);\n  \n  // Désactiver le bypass d'authentification pour les routes publiques\n  const effectiveBypass = BYPASS_AUTH && !isCurrentRoutePublic;\n  console.log('AuthContext - BYPASS_AUTH global:', BYPASS_AUTH);\n  console.log('AuthContext - Bypass effectif pour cette route:', effectiveBypass);\n  \n  const [currentUser, setCurrentUser] = useState(effectiveBypass ? TEST_USER : null);\n  const [isAuthenticated, setIsAuthenticated] = useState(effectiveBypass);\n  const [loading, setLoading] = useState(!effectiveBypass);\n  const [error, setError] = useState(null);\n  const auth = getAuth(app);\n\n  useEffect(() => {\n    // Mettre à jour l'état d'authentification lorsque la route change\n    if (isCurrentRoutePublic) {\n      console.log('AuthContext - Route publique détectée, désactivation du bypass d\\'authentification');\n      setIsAuthenticated(false);\n      setCurrentUser(null);\n    } else if (BYPASS_AUTH) {\n      console.log('AuthContext - Route protégée avec bypass activé, authentification simulée');\n      setIsAuthenticated(true);\n      setCurrentUser(TEST_USER);\n    }\n    \n    if (BYPASS_AUTH && !isCurrentRoutePublic) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé pour route protégée');\n      return;\n    }\n\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        // Utilisateur connecté\n        console.log('AuthContext - Utilisateur connecté:', user.email);\n        setCurrentUser({\n          id: user.uid,\n          email: user.email,\n          name: user.displayName || user.email.split('@')[0],\n          role: 'admin' // Par défaut, tous les utilisateurs sont admin pour l'instant\n        });\n        setIsAuthenticated(true);\n      } else {\n        // Utilisateur déconnecté\n        console.log('AuthContext - Utilisateur déconnecté');\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, [auth, isCurrentRoutePublic, BYPASS_AUTH, location]);\n\n  const login = async (email, password) => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Login simulé');\n      setCurrentUser(TEST_USER);\n      setIsAuthenticated(true);\n      setError(null);\n      return true;\n    }\n\n    try {\n      setLoading(true);\n      await signInWithEmailAndPassword(auth, email, password);\n      setError(null);\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur de connexion:', error);\n      setError(error.message);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    if (BYPASS_AUTH) {\n      console.log('AuthContext - Mode bypass d\\'authentification activé - Logout ignoré');\n      return;\n    }\n\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('AuthContext - Erreur lors de la déconnexion:', error);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <AuthContext.Provider value={{ \n        currentUser, \n        isAuthenticated, \n        loading, \n        error, \n        login, \n        logout,\n        bypassEnabled: BYPASS_AUTH,\n        isPublicRoute: isPublicRoute,\n        isCurrentRoutePublic: isCurrentRoutePublic\n      }}>\n        {children}\n      </AuthContext.Provider>\n    </React.Fragment>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}