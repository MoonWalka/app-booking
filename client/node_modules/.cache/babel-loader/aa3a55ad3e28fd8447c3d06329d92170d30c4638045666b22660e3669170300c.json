{"ast":null,"code":"import React,{useState,useEffect}from'react';import{getFormSubmissions,updateFormSubmission,updateSubmissionsWithoutStatus}from'../../services/formSubmissionsService';import{getProgrammerById,updateProgrammer}from'../../services/programmersService';import{getConcertById,updateConcert}from'../../services/concertsService';import ComparisonTable from'./ComparisonTable';import'./FormValidationList.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FormValidationList=()=>{const[formSubmissions,setFormSubmissions]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[selectedSubmission,setSelectedSubmission]=useState(null);const[programmerData,setProgrammerData]=useState(null);const[showComparisonTable,setShowComparisonTable]=useState(false);const[updateStatus,setUpdateStatus]=useState({status:'',message:''});const[refreshCount,setRefreshCount]=useState(0);const[debugInfo,setDebugInfo]=useState(null);// Charger les soumissions de formulaire\nuseEffect(()=>{const fetchFormSubmissions=async()=>{try{setLoading(true);console.log('FormValidationList - Chargement des soumissions en attente...');// Mettre à jour les soumissions sans statut\nconst updatedCount=await updateSubmissionsWithoutStatus();if(updatedCount>0){console.log(`FormValidationList - ${updatedCount} soumissions mises à jour avec statut 'pending'`);}// Récupérer toutes les soumissions pour le débogage\nconst allSubmissions=await getFormSubmissions({});console.log(`FormValidationList - ${allSubmissions.length} soumissions totales récupérées`);// Filtrer pour n'obtenir que les soumissions en attente\nconst pendingSubmissions=await getFormSubmissions({status:'pending'});console.log(`FormValidationList - ${pendingSubmissions.length} soumissions en attente récupérées`);// Collecter des informations de débogage\nconst debug={totalCount:allSubmissions.length,pendingCount:pendingSubmissions.length,statusDistribution:{},hasCommonToken:0,missingCommonToken:0};// Analyser la distribution des statuts\nallSubmissions.forEach(submission=>{const status=submission.status||'non défini';debug.statusDistribution[status]=(debug.statusDistribution[status]||0)+1;if(submission.commonToken){debug.hasCommonToken++;}else{debug.missingCommonToken++;}});setDebugInfo(debug);setFormSubmissions(pendingSubmissions);setLoading(false);}catch(err){console.error('FormValidationList - Erreur lors du chargement des soumissions:',err);setError('Erreur lors du chargement des soumissions. Veuillez réessayer.');setLoading(false);}};fetchFormSubmissions();// Mettre en place un intervalle pour rafraîchir les soumissions toutes les 30 secondes\nconst refreshInterval=setInterval(()=>{console.log('FormValidationList - Rafraîchissement automatique des soumissions');setRefreshCount(prev=>prev+1);},30000);// Nettoyer l'intervalle lors du démontage du composant\nreturn()=>clearInterval(refreshInterval);},[refreshCount]);// Gérer la sélection d'une soumission\nconst handleSelectSubmission=async submission=>{console.log('FormValidationList - Sélection de la soumission:',submission);setSelectedSubmission(submission);setUpdateStatus({status:'',message:''});try{// Rechercher le programmateur associé par token commun\nlet programmer=null;if(submission.commonToken){console.log(`FormValidationList - Recherche du programmateur avec token: ${submission.commonToken}`);// Rechercher par token commun\nconst programmers=await getProgrammerById(submission.commonToken);if(programmers){programmer=programmers;console.log('FormValidationList - Programmateur trouvé:',programmer);}else{console.log('FormValidationList - Aucun programmateur trouvé avec ce token');}}else{console.log('FormValidationList - Pas de token commun dans la soumission');}// Si aucun programmateur n'est trouvé, créer un objet vide\nif(!programmer){console.log('FormValidationList - Création d\\'un objet programmateur vide');programmer={id:null,businessName:'',firstName:'',lastName:'',role:'',address:'',venue:'',venueAddress:'',vatNumber:'',siret:'',email:'',phone:'',website:''};}setProgrammerData(programmer);setShowComparisonTable(true);}catch(err){console.error('FormValidationList - Erreur lors de la récupération des données du programmateur:',err);setError('Erreur lors de la récupération des données du programmateur. Veuillez réessayer.');}};// Gérer l'intégration des données\nconst handleIntegrateData=async updatedData=>{try{setLoading(true);console.log('FormValidationList - Début de l\\'intégration des données');// Mettre à jour ou créer le programmateur\nlet programmerId=programmerData.id;// Préparer les données du programmateur\nconst programmerDataToUpdate={...updatedData,commonToken:selectedSubmission.commonToken,// Ajouter d'autres champs nécessaires\ncontact:updatedData.firstName&&updatedData.lastName?`${updatedData.firstName} ${updatedData.lastName}`:updatedData.firstName||updatedData.lastName||'Contact non spécifié'};console.log('FormValidationList - Données du programmateur à mettre à jour:',programmerDataToUpdate);if(programmerId){// Mettre à jour le programmateur existant\nconsole.log(`FormValidationList - Mise à jour du programmateur existant: ${programmerId}`);await updateProgrammer(programmerId,programmerDataToUpdate);}else{// Créer un nouveau programmateur avec le token commun comme ID\nprogrammerId=selectedSubmission.commonToken;console.log(`FormValidationList - Création d'un nouveau programmateur avec ID: ${programmerId}`);await updateProgrammer(programmerId,programmerDataToUpdate);}// Mettre à jour le concert si nécessaire\nif(selectedSubmission.concertId){try{console.log(`FormValidationList - Récupération du concert: ${selectedSubmission.concertId}`);const concert=await getConcertById(selectedSubmission.concertId);if(concert){// Mettre à jour le concert avec le token commun\nconsole.log(`FormValidationList - Mise à jour du concert: ${selectedSubmission.concertId}`);await updateConcert(selectedSubmission.concertId,{...concert,commonToken:selectedSubmission.commonToken,programmerId:programmerId});}else{console.log(`FormValidationList - Concert non trouvé: ${selectedSubmission.concertId}`);}}catch(concertErr){console.error('FormValidationList - Erreur lors de la mise à jour du concert:',concertErr);}}// Mettre à jour le statut de la soumission\nconsole.log(`FormValidationList - Mise à jour du statut de la soumission: ${selectedSubmission.id}`);await updateFormSubmission(selectedSubmission.id,{...selectedSubmission,status:'processed',processedAt:new Date()});// Mettre à jour la liste des soumissions\nconst updatedSubmissions=formSubmissions.filter(submission=>submission.id!==selectedSubmission.id);console.log(`FormValidationList - Mise à jour de la liste des soumissions: ${updatedSubmissions.length} restantes`);setFormSubmissions(updatedSubmissions);// Réinitialiser l'état\nsetSelectedSubmission(null);setProgrammerData(null);setShowComparisonTable(false);setUpdateStatus({status:'success',message:'Données intégrées avec succès!'});setLoading(false);// Forcer un rafraîchissement de la liste\nsetRefreshCount(prev=>prev+1);}catch(err){console.error('FormValidationList - Erreur lors de l\\'intégration des données:',err);setUpdateStatus({status:'error',message:`Erreur lors de l'intégration des données: ${err.message}`});setLoading(false);}};// Annuler l'intégration\nconst handleCancelIntegration=()=>{console.log('FormValidationList - Annulation de l\\'intégration');setSelectedSubmission(null);setProgrammerData(null);setShowComparisonTable(false);};// Rafraîchir manuellement la liste\nconst handleRefresh=()=>{console.log('FormValidationList - Rafraîchissement manuel de la liste');setRefreshCount(prev=>prev+1);};if(loading&&!showComparisonTable){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Chargement des soumissions...\"});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error});}if(showComparisonTable&&selectedSubmission&&programmerData){return/*#__PURE__*/_jsxs(\"div\",{className:\"form-validation-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Int\\xE9gration des donn\\xE9es\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"submission-details\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"D\\xE9tails de la soumission\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"ID:\"}),\" \",selectedSubmission.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Date de soumission:\"}),\" \",selectedSubmission.submittedAt instanceof Date?selectedSubmission.submittedAt.toLocaleString():new Date(selectedSubmission.submittedAt.seconds*1000).toLocaleString()]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Token commun:\"}),\" \",selectedSubmission.commonToken]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Concert ID:\"}),\" \",selectedSubmission.concertId]})]}),/*#__PURE__*/_jsx(ComparisonTable,{formData:selectedSubmission,programmerData:programmerData,onSave:handleIntegrateData,onCancel:handleCancelIntegration})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"form-validation-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Validation des formulaires\"}),updateStatus.message&&/*#__PURE__*/_jsx(\"div\",{className:`status-message ${updateStatus.status}`,children:updateStatus.message}),/*#__PURE__*/_jsx(\"div\",{className:\"refresh-button-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"refresh-button\",onClick:handleRefresh,children:\"Rafra\\xEEchir la liste\"})}),debugInfo&&/*#__PURE__*/_jsxs(\"div\",{className:\"debug-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Informations de d\\xE9bogage\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Total des soumissions: \",debugInfo.totalCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Soumissions en attente: \",debugInfo.pendingCount]}),/*#__PURE__*/_jsx(\"p\",{children:\"Distribution des statuts:\"}),/*#__PURE__*/_jsx(\"ul\",{children:Object.entries(debugInfo.statusDistribution).map(_ref=>{let[status,count]=_ref;return/*#__PURE__*/_jsxs(\"li\",{children:[status,\": \",count]},status);})}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Avec token commun: \",debugInfo.hasCommonToken]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Sans token commun: \",debugInfo.missingCommonToken]})]}),formSubmissions.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"Aucune soumission en attente de validation.\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"submissions-list\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Soumissions en attente (\",formSubmissions.length,\")\"]}),/*#__PURE__*/_jsxs(\"table\",{className:\"submissions-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Raison sociale\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Contact\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Token\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:formSubmissions.map(submission=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:submission.submittedAt instanceof Date?submission.submittedAt.toLocaleString():new Date(submission.submittedAt.seconds*1000).toLocaleString()}),/*#__PURE__*/_jsx(\"td\",{children:submission.businessName||'Non spécifié'}),/*#__PURE__*/_jsx(\"td\",{children:submission.contact||'Non spécifié'}),/*#__PURE__*/_jsx(\"td\",{children:submission.commonToken?submission.commonToken.substring(0,10)+'...':'Non spécifié'}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"action-button\",onClick:()=>handleSelectSubmission(submission),children:\"Comparer et int\\xE9grer\"})})]},submission.id))})]})]})]});};export default FormValidationList;","map":{"version":3,"names":["React","useState","useEffect","getFormSubmissions","updateFormSubmission","updateSubmissionsWithoutStatus","getProgrammerById","updateProgrammer","getConcertById","updateConcert","ComparisonTable","jsx","_jsx","jsxs","_jsxs","FormValidationList","formSubmissions","setFormSubmissions","loading","setLoading","error","setError","selectedSubmission","setSelectedSubmission","programmerData","setProgrammerData","showComparisonTable","setShowComparisonTable","updateStatus","setUpdateStatus","status","message","refreshCount","setRefreshCount","debugInfo","setDebugInfo","fetchFormSubmissions","console","log","updatedCount","allSubmissions","length","pendingSubmissions","debug","totalCount","pendingCount","statusDistribution","hasCommonToken","missingCommonToken","forEach","submission","commonToken","err","refreshInterval","setInterval","prev","clearInterval","handleSelectSubmission","programmer","programmers","id","businessName","firstName","lastName","role","address","venue","venueAddress","vatNumber","siret","email","phone","website","handleIntegrateData","updatedData","programmerId","programmerDataToUpdate","contact","concertId","concert","concertErr","processedAt","Date","updatedSubmissions","filter","handleCancelIntegration","handleRefresh","className","children","submittedAt","toLocaleString","seconds","formData","onSave","onCancel","onClick","Object","entries","map","_ref","count","substring"],"sources":["/workspaces/app-booking/client/src/components/formValidation/FormValidationList.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getFormSubmissions, updateFormSubmission, updateSubmissionsWithoutStatus } from '../../services/formSubmissionsService';\nimport { getProgrammerById, updateProgrammer } from '../../services/programmersService';\nimport { getConcertById, updateConcert } from '../../services/concertsService';\nimport ComparisonTable from './ComparisonTable';\nimport './FormValidationList.css';\n\nconst FormValidationList = () => {\n  const [formSubmissions, setFormSubmissions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedSubmission, setSelectedSubmission] = useState(null);\n  const [programmerData, setProgrammerData] = useState(null);\n  const [showComparisonTable, setShowComparisonTable] = useState(false);\n  const [updateStatus, setUpdateStatus] = useState({ status: '', message: '' });\n  const [refreshCount, setRefreshCount] = useState(0);\n  const [debugInfo, setDebugInfo] = useState(null);\n\n  // Charger les soumissions de formulaire\n  useEffect(() => {\n    const fetchFormSubmissions = async () => {\n      try {\n        setLoading(true);\n        console.log('FormValidationList - Chargement des soumissions en attente...');\n        \n        // Mettre à jour les soumissions sans statut\n        const updatedCount = await updateSubmissionsWithoutStatus();\n        if (updatedCount > 0) {\n          console.log(`FormValidationList - ${updatedCount} soumissions mises à jour avec statut 'pending'`);\n        }\n        \n        // Récupérer toutes les soumissions pour le débogage\n        const allSubmissions = await getFormSubmissions({});\n        console.log(`FormValidationList - ${allSubmissions.length} soumissions totales récupérées`);\n        \n        // Filtrer pour n'obtenir que les soumissions en attente\n        const pendingSubmissions = await getFormSubmissions({ status: 'pending' });\n        console.log(`FormValidationList - ${pendingSubmissions.length} soumissions en attente récupérées`);\n        \n        // Collecter des informations de débogage\n        const debug = {\n          totalCount: allSubmissions.length,\n          pendingCount: pendingSubmissions.length,\n          statusDistribution: {},\n          hasCommonToken: 0,\n          missingCommonToken: 0\n        };\n        \n        // Analyser la distribution des statuts\n        allSubmissions.forEach(submission => {\n          const status = submission.status || 'non défini';\n          debug.statusDistribution[status] = (debug.statusDistribution[status] || 0) + 1;\n          \n          if (submission.commonToken) {\n            debug.hasCommonToken++;\n          } else {\n            debug.missingCommonToken++;\n          }\n        });\n        \n        setDebugInfo(debug);\n        setFormSubmissions(pendingSubmissions);\n        setLoading(false);\n      } catch (err) {\n        console.error('FormValidationList - Erreur lors du chargement des soumissions:', err);\n        setError('Erreur lors du chargement des soumissions. Veuillez réessayer.');\n        setLoading(false);\n      }\n    };\n\n    fetchFormSubmissions();\n    \n    // Mettre en place un intervalle pour rafraîchir les soumissions toutes les 30 secondes\n    const refreshInterval = setInterval(() => {\n      console.log('FormValidationList - Rafraîchissement automatique des soumissions');\n      setRefreshCount(prev => prev + 1);\n    }, 30000);\n    \n    // Nettoyer l'intervalle lors du démontage du composant\n    return () => clearInterval(refreshInterval);\n  }, [refreshCount]);\n\n  // Gérer la sélection d'une soumission\n  const handleSelectSubmission = async (submission) => {\n    console.log('FormValidationList - Sélection de la soumission:', submission);\n    setSelectedSubmission(submission);\n    setUpdateStatus({ status: '', message: '' });\n    \n    try {\n      // Rechercher le programmateur associé par token commun\n      let programmer = null;\n      \n      if (submission.commonToken) {\n        console.log(`FormValidationList - Recherche du programmateur avec token: ${submission.commonToken}`);\n        // Rechercher par token commun\n        const programmers = await getProgrammerById(submission.commonToken);\n        if (programmers) {\n          programmer = programmers;\n          console.log('FormValidationList - Programmateur trouvé:', programmer);\n        } else {\n          console.log('FormValidationList - Aucun programmateur trouvé avec ce token');\n        }\n      } else {\n        console.log('FormValidationList - Pas de token commun dans la soumission');\n      }\n      \n      // Si aucun programmateur n'est trouvé, créer un objet vide\n      if (!programmer) {\n        console.log('FormValidationList - Création d\\'un objet programmateur vide');\n        programmer = {\n          id: null,\n          businessName: '',\n          firstName: '',\n          lastName: '',\n          role: '',\n          address: '',\n          venue: '',\n          venueAddress: '',\n          vatNumber: '',\n          siret: '',\n          email: '',\n          phone: '',\n          website: ''\n        };\n      }\n      \n      setProgrammerData(programmer);\n      setShowComparisonTable(true);\n    } catch (err) {\n      console.error('FormValidationList - Erreur lors de la récupération des données du programmateur:', err);\n      setError('Erreur lors de la récupération des données du programmateur. Veuillez réessayer.');\n    }\n  };\n\n  // Gérer l'intégration des données\n  const handleIntegrateData = async (updatedData) => {\n    try {\n      setLoading(true);\n      console.log('FormValidationList - Début de l\\'intégration des données');\n      \n      // Mettre à jour ou créer le programmateur\n      let programmerId = programmerData.id;\n      \n      // Préparer les données du programmateur\n      const programmerDataToUpdate = {\n        ...updatedData,\n        commonToken: selectedSubmission.commonToken,\n        // Ajouter d'autres champs nécessaires\n        contact: updatedData.firstName && updatedData.lastName \n          ? `${updatedData.firstName} ${updatedData.lastName}` \n          : updatedData.firstName || updatedData.lastName || 'Contact non spécifié'\n      };\n      \n      console.log('FormValidationList - Données du programmateur à mettre à jour:', programmerDataToUpdate);\n      \n      if (programmerId) {\n        // Mettre à jour le programmateur existant\n        console.log(`FormValidationList - Mise à jour du programmateur existant: ${programmerId}`);\n        await updateProgrammer(programmerId, programmerDataToUpdate);\n      } else {\n        // Créer un nouveau programmateur avec le token commun comme ID\n        programmerId = selectedSubmission.commonToken;\n        console.log(`FormValidationList - Création d'un nouveau programmateur avec ID: ${programmerId}`);\n        await updateProgrammer(programmerId, programmerDataToUpdate);\n      }\n      \n      // Mettre à jour le concert si nécessaire\n      if (selectedSubmission.concertId) {\n        try {\n          console.log(`FormValidationList - Récupération du concert: ${selectedSubmission.concertId}`);\n          const concert = await getConcertById(selectedSubmission.concertId);\n          if (concert) {\n            // Mettre à jour le concert avec le token commun\n            console.log(`FormValidationList - Mise à jour du concert: ${selectedSubmission.concertId}`);\n            await updateConcert(selectedSubmission.concertId, {\n              ...concert,\n              commonToken: selectedSubmission.commonToken,\n              programmerId: programmerId\n            });\n          } else {\n            console.log(`FormValidationList - Concert non trouvé: ${selectedSubmission.concertId}`);\n          }\n        } catch (concertErr) {\n          console.error('FormValidationList - Erreur lors de la mise à jour du concert:', concertErr);\n        }\n      }\n      \n      // Mettre à jour le statut de la soumission\n      console.log(`FormValidationList - Mise à jour du statut de la soumission: ${selectedSubmission.id}`);\n      await updateFormSubmission(selectedSubmission.id, {\n        ...selectedSubmission,\n        status: 'processed',\n        processedAt: new Date()\n      });\n      \n      // Mettre à jour la liste des soumissions\n      const updatedSubmissions = formSubmissions.filter(\n        submission => submission.id !== selectedSubmission.id\n      );\n      console.log(`FormValidationList - Mise à jour de la liste des soumissions: ${updatedSubmissions.length} restantes`);\n      setFormSubmissions(updatedSubmissions);\n      \n      // Réinitialiser l'état\n      setSelectedSubmission(null);\n      setProgrammerData(null);\n      setShowComparisonTable(false);\n      setUpdateStatus({\n        status: 'success',\n        message: 'Données intégrées avec succès!'\n      });\n      setLoading(false);\n      \n      // Forcer un rafraîchissement de la liste\n      setRefreshCount(prev => prev + 1);\n    } catch (err) {\n      console.error('FormValidationList - Erreur lors de l\\'intégration des données:', err);\n      setUpdateStatus({\n        status: 'error',\n        message: `Erreur lors de l'intégration des données: ${err.message}`\n      });\n      setLoading(false);\n    }\n  };\n\n  // Annuler l'intégration\n  const handleCancelIntegration = () => {\n    console.log('FormValidationList - Annulation de l\\'intégration');\n    setSelectedSubmission(null);\n    setProgrammerData(null);\n    setShowComparisonTable(false);\n  };\n\n  // Rafraîchir manuellement la liste\n  const handleRefresh = () => {\n    console.log('FormValidationList - Rafraîchissement manuel de la liste');\n    setRefreshCount(prev => prev + 1);\n  };\n\n  if (loading && !showComparisonTable) {\n    return <div className=\"loading\">Chargement des soumissions...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  if (showComparisonTable && selectedSubmission && programmerData) {\n    return (\n      <div className=\"form-validation-container\">\n        <h2>Intégration des données</h2>\n        <div className=\"submission-details\">\n          <h3>Détails de la soumission</h3>\n          <p><strong>ID:</strong> {selectedSubmission.id}</p>\n          <p><strong>Date de soumission:</strong> {selectedSubmission.submittedAt instanceof Date \n            ? selectedSubmission.submittedAt.toLocaleString() \n            : new Date(selectedSubmission.submittedAt.seconds * 1000).toLocaleString()}</p>\n          <p><strong>Token commun:</strong> {selectedSubmission.commonToken}</p>\n          <p><strong>Concert ID:</strong> {selectedSubmission.concertId}</p>\n        </div>\n        \n        <ComparisonTable \n          formData={selectedSubmission} \n          programmerData={programmerData}\n          onSave={handleIntegrateData}\n          onCancel={handleCancelIntegration}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"form-validation-container\">\n      <h2>Validation des formulaires</h2>\n      \n      {updateStatus.message && (\n        <div className={`status-message ${updateStatus.status}`}>\n          {updateStatus.message}\n        </div>\n      )}\n      \n      <div className=\"refresh-button-container\">\n        <button className=\"refresh-button\" onClick={handleRefresh}>\n          Rafraîchir la liste\n        </button>\n      </div>\n      \n      {debugInfo && (\n        <div className=\"debug-info\">\n          <h3>Informations de débogage</h3>\n          <p>Total des soumissions: {debugInfo.totalCount}</p>\n          <p>Soumissions en attente: {debugInfo.pendingCount}</p>\n          <p>Distribution des statuts:</p>\n          <ul>\n            {Object.entries(debugInfo.statusDistribution).map(([status, count]) => (\n              <li key={status}>{status}: {count}</li>\n            ))}\n          </ul>\n          <p>Avec token commun: {debugInfo.hasCommonToken}</p>\n          <p>Sans token commun: {debugInfo.missingCommonToken}</p>\n        </div>\n      )}\n      \n      {formSubmissions.length === 0 ? (\n        <p>Aucune soumission en attente de validation.</p>\n      ) : (\n        <div className=\"submissions-list\">\n          <h3>Soumissions en attente ({formSubmissions.length})</h3>\n          <table className=\"submissions-table\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Raison sociale</th>\n                <th>Contact</th>\n                <th>Token</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {formSubmissions.map(submission => (\n                <tr key={submission.id}>\n                  <td>\n                    {submission.submittedAt instanceof Date \n                      ? submission.submittedAt.toLocaleString() \n                      : new Date(submission.submittedAt.seconds * 1000).toLocaleString()}\n                  </td>\n                  <td>{submission.businessName || 'Non spécifié'}</td>\n                  <td>{submission.contact || 'Non spécifié'}</td>\n                  <td>{submission.commonToken ? submission.commonToken.substring(0, 10) + '...' : 'Non spécifié'}</td>\n                  <td>\n                    <button \n                      className=\"action-button\"\n                      onClick={() => handleSelectSubmission(submission)}\n                    >\n                      Comparer et intégrer\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormValidationList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}