{"ast":null,"code":"import{collection,getDocs,getDoc,doc,addDoc,updateDoc,deleteDoc,query,orderBy,where,setDoc,Timestamp}from'firebase/firestore';import{db}from'../firebase';import{v4 as uuidv4}from'uuid';// Collection de référence\nconst FORM_LINKS_COLLECTION='formLinks';// Assurez-vous que la collection existe\nconst ensureCollection=async collectionName=>{try{// Vérifier si la collection existe en essayant de récupérer des documents\nconst collectionRef=collection(db,collectionName);const snapshot=await getDocs(query(collectionRef,orderBy('createdAt','desc')));// Si la collection n'existe pas ou est vide, c'est normal pour les liens de formulaire\nif(snapshot.empty){console.log(`Collection ${collectionName} vide, prête à recevoir des liens de formulaire.`);}return true;}catch(error){console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`,error);return false;}};// Assurez-vous que la collection formLinks existe\nconst formLinksCollection=collection(db,FORM_LINKS_COLLECTION);/**\n * Génère un lien unique pour un formulaire\n * @param {string} concertId - ID du concert associé\n * @param {Object} concertData - Données du concert\n * @param {string} programmerId - ID du programmateur\n * @param {string} programmerName - Nom du programmateur\n * @returns {Promise<Object>} Lien généré avec ID\n */export const generateFormLink=async(concertId,concertData,programmerId,programmerName)=>{try{var _concertData$artist;// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);// Vérifier si un lien existe déjà pour ce concert\nconst existingLink=await getFormLinkByConcertId(concertId);if(existingLink){console.log(`Un lien existe déjà pour le concert ${concertId}:`,existingLink);return existingLink;}// Générer un token unique\nconst token=uuidv4();// Créer les données du lien\nconst linkData={concertId,concertName:(_concertData$artist=concertData.artist)!==null&&_concertData$artist!==void 0&&_concertData$artist.name?`${concertData.artist.name} à ${concertData.venue}`:`Concert à ${concertData.venue}`,concertDate:concertData.date||null,programmerId,programmerName,token,url:`/form/${token}`,createdAt:Timestamp.fromDate(new Date()),expiresAt:null,// Pas d'expiration pour l'instant\nisSubmitted:false,submissionId:null};console.log(\"Tentative de création d'un lien de formulaire:\",linkData);const docRef=await addDoc(formLinksCollection,linkData);console.log(`Lien de formulaire créé avec succès, ID: ${docRef.id}`);return{id:docRef.id,...linkData};}catch(error){console.error(\"Erreur lors de la création du lien de formulaire:\",error);// Essayer de créer le lien avec un ID généré manuellement en cas d'erreur\ntry{var _concertData$artist2;const mockId='mock-link-'+Date.now();const token=uuidv4();const linkData={concertId,concertName:(_concertData$artist2=concertData.artist)!==null&&_concertData$artist2!==void 0&&_concertData$artist2.name?`${concertData.artist.name} à ${concertData.venue}`:`Concert à ${concertData.venue}`,concertDate:concertData.date||null,programmerId,programmerName,token,url:`/form/${token}`,createdAt:Timestamp.fromDate(new Date()),expiresAt:null,isSubmitted:false,submissionId:null};await setDoc(doc(db,FORM_LINKS_COLLECTION,mockId),linkData);console.log(`Lien de formulaire créé avec un ID manuel: ${mockId}`);return{id:mockId,...linkData};}catch(setError){var _concertData$artist3;console.error(\"Erreur lors de la création manuelle du lien de formulaire:\",setError);// Simuler la création d'un lien en cas d'erreur\nconst token=uuidv4();const mockId='mock-link-'+Date.now();return{id:mockId,concertId,concertName:(_concertData$artist3=concertData.artist)!==null&&_concertData$artist3!==void 0&&_concertData$artist3.name?`${concertData.artist.name} à ${concertData.venue}`:`Concert à ${concertData.venue}`,concertDate:concertData.date||null,programmerId,programmerName,token,url:`/form/${token}`,createdAt:new Date(),expiresAt:null,isSubmitted:false,submissionId:null};}}};/**\n * Récupère un lien de formulaire par son ID\n * @param {string} id - ID du lien\n * @returns {Promise<Object>} Données du lien\n */export const getFormLinkById=async id=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(`Tentative de récupération du lien ${id} depuis Firebase...`);const docRef=doc(db,FORM_LINKS_COLLECTION,id);const snapshot=await getDoc(docRef);if(snapshot.exists()){const linkData={id:snapshot.id,...snapshot.data()};console.log(`Lien ${id} récupéré depuis Firebase:`,linkData);return linkData;}console.log(`Lien ${id} non trouvé dans Firebase`);return null;}catch(error){console.error(`Erreur lors de la récupération du lien ${id}:`,error);return null;}};/**\n * Récupère un lien de formulaire par son token\n * @param {string} token - Token unique du lien\n * @returns {Promise<Object>} Données du lien\n */export const getFormLinkByToken=async token=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(`Tentative de récupération du lien avec le token ${token}...`);const linkQuery=query(formLinksCollection,where('token','==',token));const snapshot=await getDocs(linkQuery);if(snapshot.empty){console.log(`Aucun lien trouvé avec le token ${token}`);return null;}const linkData={id:snapshot.docs[0].id,...snapshot.docs[0].data()};console.log(`Lien avec le token ${token} récupéré:`,linkData);return linkData;}catch(error){console.error(`Erreur lors de la récupération du lien avec le token ${token}:`,error);return null;}};/**\n * Récupère un lien de formulaire par l'ID du concert associé\n * @param {string} concertId - ID du concert\n * @returns {Promise<Object>} Données du lien\n */export const getFormLinkByConcertId=async concertId=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(`Tentative de récupération du lien pour le concert ${concertId}...`);const linkQuery=query(formLinksCollection,where('concertId','==',concertId));const snapshot=await getDocs(linkQuery);if(snapshot.empty){console.log(`Aucun lien trouvé pour le concert ${concertId}`);return null;}const linkData={id:snapshot.docs[0].id,...snapshot.docs[0].data()};console.log(`Lien pour le concert ${concertId} récupéré:`,linkData);return linkData;}catch(error){console.error(`Erreur lors de la récupération du lien pour le concert ${concertId}:`,error);return null;}};/**\n * Met à jour un lien de formulaire existant\n * @param {string} id - ID du lien\n * @param {Object} linkData - Nouvelles données du lien\n * @returns {Promise<Object>} Lien mis à jour\n */export const updateFormLink=async(id,linkData)=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(`Tentative de mise à jour du lien ${id}:`,linkData);const docRef=doc(db,FORM_LINKS_COLLECTION,id);await updateDoc(docRef,linkData);console.log(`Lien ${id} mis à jour avec succès`);return{id,...linkData};}catch(error){console.error(`Erreur lors de la mise à jour du lien ${id}:`,error);// Essayer de créer/remplacer le document\ntry{await setDoc(doc(db,FORM_LINKS_COLLECTION,id),linkData,{merge:true});console.log(`Lien ${id} créé/remplacé avec succès`);return{id,...linkData};}catch(setError){console.error(`Erreur lors de la création/remplacement du lien ${id}:`,setError);return null;}}};/**\n * Marque un lien comme soumis et l'associe à un ID de soumission\n * @param {string} id - ID du lien\n * @param {string} submissionId - ID de la soumission de formulaire\n * @returns {Promise<Object>} Lien mis à jour\n */export const markFormLinkAsSubmitted=async(id,submissionId)=>{try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(`Tentative de marquer le lien ${id} comme soumis avec la soumission ${submissionId}`);const docRef=doc(db,FORM_LINKS_COLLECTION,id);const updateData={isSubmitted:true,submissionId,submittedAt:Timestamp.fromDate(new Date())};await updateDoc(docRef,updateData);console.log(`Lien ${id} marqué comme soumis avec succès`);return{id,...updateData};}catch(error){console.error(`Erreur lors du marquage du lien ${id} comme soumis:`,error);// Essayer de créer/remplacer le document\ntry{const updateData={isSubmitted:true,submissionId,submittedAt:Timestamp.fromDate(new Date())};await setDoc(doc(db,FORM_LINKS_COLLECTION,id),updateData,{merge:true});console.log(`Lien ${id} marqué comme soumis (via setDoc) avec succès`);return{id,...updateData};}catch(setError){console.error(`Erreur lors du marquage du lien ${id} comme soumis (via setDoc):`,setError);return null;}}};/**\n * Supprime un lien de formulaire\n * @param {string} id - ID du lien\n * @returns {Promise<string>} ID du lien supprimé\n */export const deleteFormLink=async id=>{try{console.log(`Tentative de suppression du lien ${id}`);const docRef=doc(db,FORM_LINKS_COLLECTION,id);await deleteDoc(docRef);console.log(`Lien ${id} supprimé avec succès`);return id;}catch(error){console.error(`Erreur lors de la suppression du lien ${id}:`,error);return null;}};/**\n * Récupère tous les liens de formulaire\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des liens de formulaire\n */export const getFormLinks=async function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{// S'assurer que la collection existe\nawait ensureCollection(FORM_LINKS_COLLECTION);console.log(\"Tentative de récupération des liens de formulaire depuis Firebase...\");// Création d'une requête de base\nlet linkQuery=formLinksCollection;// Application des filtres si nécessaire\nif(filters){// Filtrer par statut de soumission\nif(filters.isSubmitted!==undefined){linkQuery=query(linkQuery,where('isSubmitted','==',filters.isSubmitted));}// Filtrer par programmateur\nif(filters.programmerId){linkQuery=query(linkQuery,where('programmerId','==',filters.programmerId));}// Filtrer par concert\nif(filters.concertId){linkQuery=query(linkQuery,where('concertId','==',filters.concertId));}}// Ajout d'un tri par date de création (du plus récent au plus ancien)\nlinkQuery=query(linkQuery,orderBy('createdAt','desc'));// Exécution de la requête\nconst snapshot=await getDocs(linkQuery);if(snapshot.empty){console.log(\"Aucun lien de formulaire trouvé dans Firebase\");return[];}const formLinks=snapshot.docs.map(doc=>({id:doc.id,...doc.data()}));console.log(`${formLinks.length} liens de formulaire récupérés depuis Firebase`);return formLinks;}catch(error){console.error(\"Erreur lors de la récupération des liens de formulaire:\",error);return[];}};","map":{"version":3,"names":["collection","getDocs","getDoc","doc","addDoc","updateDoc","deleteDoc","query","orderBy","where","setDoc","Timestamp","db","v4","uuidv4","FORM_LINKS_COLLECTION","ensureCollection","collectionName","collectionRef","snapshot","empty","console","log","error","formLinksCollection","generateFormLink","concertId","concertData","programmerId","programmerName","_concertData$artist","existingLink","getFormLinkByConcertId","token","linkData","concertName","artist","name","venue","concertDate","date","url","createdAt","fromDate","Date","expiresAt","isSubmitted","submissionId","docRef","id","_concertData$artist2","mockId","now","setError","_concertData$artist3","getFormLinkById","exists","data","getFormLinkByToken","linkQuery","docs","updateFormLink","merge","markFormLinkAsSubmitted","updateData","submittedAt","deleteFormLink","getFormLinks","filters","arguments","length","undefined","formLinks","map"],"sources":["/workspaces/app-booking/client/src/services/formLinkService.js"],"sourcesContent":["import { \n  collection, \n  getDocs, \n  getDoc, \n  doc, \n  addDoc, \n  updateDoc, \n  deleteDoc,\n  query,\n  orderBy,\n  where,\n  setDoc,\n  Timestamp\n} from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Collection de référence\nconst FORM_LINKS_COLLECTION = 'formLinks';\n\n// Assurez-vous que la collection existe\nconst ensureCollection = async (collectionName) => {\n  try {\n    // Vérifier si la collection existe en essayant de récupérer des documents\n    const collectionRef = collection(db, collectionName);\n    const snapshot = await getDocs(query(collectionRef, orderBy('createdAt', 'desc')));\n    \n    // Si la collection n'existe pas ou est vide, c'est normal pour les liens de formulaire\n    if (snapshot.empty) {\n      console.log(`Collection ${collectionName} vide, prête à recevoir des liens de formulaire.`);\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Erreur lors de la vérification/création de la collection ${collectionName}:`, error);\n    return false;\n  }\n};\n\n// Assurez-vous que la collection formLinks existe\nconst formLinksCollection = collection(db, FORM_LINKS_COLLECTION);\n\n/**\n * Génère un lien unique pour un formulaire\n * @param {string} concertId - ID du concert associé\n * @param {Object} concertData - Données du concert\n * @param {string} programmerId - ID du programmateur\n * @param {string} programmerName - Nom du programmateur\n * @returns {Promise<Object>} Lien généré avec ID\n */\nexport const generateFormLink = async (concertId, concertData, programmerId, programmerName) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    // Vérifier si un lien existe déjà pour ce concert\n    const existingLink = await getFormLinkByConcertId(concertId);\n    if (existingLink) {\n      console.log(`Un lien existe déjà pour le concert ${concertId}:`, existingLink);\n      return existingLink;\n    }\n    \n    // Générer un token unique\n    const token = uuidv4();\n    \n    // Créer les données du lien\n    const linkData = {\n      concertId,\n      concertName: concertData.artist?.name ? `${concertData.artist.name} à ${concertData.venue}` : `Concert à ${concertData.venue}`,\n      concertDate: concertData.date || null,\n      programmerId,\n      programmerName,\n      token,\n      url: `/form/${token}`,\n      createdAt: Timestamp.fromDate(new Date()),\n      expiresAt: null, // Pas d'expiration pour l'instant\n      isSubmitted: false,\n      submissionId: null\n    };\n    \n    console.log(\"Tentative de création d'un lien de formulaire:\", linkData);\n    const docRef = await addDoc(formLinksCollection, linkData);\n    \n    console.log(`Lien de formulaire créé avec succès, ID: ${docRef.id}`);\n    return {\n      id: docRef.id,\n      ...linkData\n    };\n  } catch (error) {\n    console.error(\"Erreur lors de la création du lien de formulaire:\", error);\n    \n    // Essayer de créer le lien avec un ID généré manuellement en cas d'erreur\n    try {\n      const mockId = 'mock-link-' + Date.now();\n      const token = uuidv4();\n      \n      const linkData = {\n        concertId,\n        concertName: concertData.artist?.name ? `${concertData.artist.name} à ${concertData.venue}` : `Concert à ${concertData.venue}`,\n        concertDate: concertData.date || null,\n        programmerId,\n        programmerName,\n        token,\n        url: `/form/${token}`,\n        createdAt: Timestamp.fromDate(new Date()),\n        expiresAt: null,\n        isSubmitted: false,\n        submissionId: null\n      };\n      \n      await setDoc(doc(db, FORM_LINKS_COLLECTION, mockId), linkData);\n      \n      console.log(`Lien de formulaire créé avec un ID manuel: ${mockId}`);\n      return {\n        id: mockId,\n        ...linkData\n      };\n    } catch (setError) {\n      console.error(\"Erreur lors de la création manuelle du lien de formulaire:\", setError);\n      \n      // Simuler la création d'un lien en cas d'erreur\n      const token = uuidv4();\n      const mockId = 'mock-link-' + Date.now();\n      \n      return {\n        id: mockId,\n        concertId,\n        concertName: concertData.artist?.name ? `${concertData.artist.name} à ${concertData.venue}` : `Concert à ${concertData.venue}`,\n        concertDate: concertData.date || null,\n        programmerId,\n        programmerName,\n        token,\n        url: `/form/${token}`,\n        createdAt: new Date(),\n        expiresAt: null,\n        isSubmitted: false,\n        submissionId: null\n      };\n    }\n  }\n};\n\n/**\n * Récupère un lien de formulaire par son ID\n * @param {string} id - ID du lien\n * @returns {Promise<Object>} Données du lien\n */\nexport const getFormLinkById = async (id) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(`Tentative de récupération du lien ${id} depuis Firebase...`);\n    const docRef = doc(db, FORM_LINKS_COLLECTION, id);\n    const snapshot = await getDoc(docRef);\n    \n    if (snapshot.exists()) {\n      const linkData = {\n        id: snapshot.id,\n        ...snapshot.data()\n      };\n      console.log(`Lien ${id} récupéré depuis Firebase:`, linkData);\n      return linkData;\n    }\n    \n    console.log(`Lien ${id} non trouvé dans Firebase`);\n    return null;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du lien ${id}:`, error);\n    return null;\n  }\n};\n\n/**\n * Récupère un lien de formulaire par son token\n * @param {string} token - Token unique du lien\n * @returns {Promise<Object>} Données du lien\n */\nexport const getFormLinkByToken = async (token) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(`Tentative de récupération du lien avec le token ${token}...`);\n    const linkQuery = query(\n      formLinksCollection, \n      where('token', '==', token)\n    );\n    \n    const snapshot = await getDocs(linkQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun lien trouvé avec le token ${token}`);\n      return null;\n    }\n    \n    const linkData = {\n      id: snapshot.docs[0].id,\n      ...snapshot.docs[0].data()\n    };\n    \n    console.log(`Lien avec le token ${token} récupéré:`, linkData);\n    return linkData;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du lien avec le token ${token}:`, error);\n    return null;\n  }\n};\n\n/**\n * Récupère un lien de formulaire par l'ID du concert associé\n * @param {string} concertId - ID du concert\n * @returns {Promise<Object>} Données du lien\n */\nexport const getFormLinkByConcertId = async (concertId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(`Tentative de récupération du lien pour le concert ${concertId}...`);\n    const linkQuery = query(\n      formLinksCollection, \n      where('concertId', '==', concertId)\n    );\n    \n    const snapshot = await getDocs(linkQuery);\n    \n    if (snapshot.empty) {\n      console.log(`Aucun lien trouvé pour le concert ${concertId}`);\n      return null;\n    }\n    \n    const linkData = {\n      id: snapshot.docs[0].id,\n      ...snapshot.docs[0].data()\n    };\n    \n    console.log(`Lien pour le concert ${concertId} récupéré:`, linkData);\n    return linkData;\n  } catch (error) {\n    console.error(`Erreur lors de la récupération du lien pour le concert ${concertId}:`, error);\n    return null;\n  }\n};\n\n/**\n * Met à jour un lien de formulaire existant\n * @param {string} id - ID du lien\n * @param {Object} linkData - Nouvelles données du lien\n * @returns {Promise<Object>} Lien mis à jour\n */\nexport const updateFormLink = async (id, linkData) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(`Tentative de mise à jour du lien ${id}:`, linkData);\n    const docRef = doc(db, FORM_LINKS_COLLECTION, id);\n    \n    await updateDoc(docRef, linkData);\n    \n    console.log(`Lien ${id} mis à jour avec succès`);\n    return {\n      id,\n      ...linkData\n    };\n  } catch (error) {\n    console.error(`Erreur lors de la mise à jour du lien ${id}:`, error);\n    \n    // Essayer de créer/remplacer le document\n    try {\n      await setDoc(doc(db, FORM_LINKS_COLLECTION, id), linkData, { merge: true });\n      \n      console.log(`Lien ${id} créé/remplacé avec succès`);\n      return {\n        id,\n        ...linkData\n      };\n    } catch (setError) {\n      console.error(`Erreur lors de la création/remplacement du lien ${id}:`, setError);\n      return null;\n    }\n  }\n};\n\n/**\n * Marque un lien comme soumis et l'associe à un ID de soumission\n * @param {string} id - ID du lien\n * @param {string} submissionId - ID de la soumission de formulaire\n * @returns {Promise<Object>} Lien mis à jour\n */\nexport const markFormLinkAsSubmitted = async (id, submissionId) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(`Tentative de marquer le lien ${id} comme soumis avec la soumission ${submissionId}`);\n    const docRef = doc(db, FORM_LINKS_COLLECTION, id);\n    \n    const updateData = {\n      isSubmitted: true,\n      submissionId,\n      submittedAt: Timestamp.fromDate(new Date())\n    };\n    \n    await updateDoc(docRef, updateData);\n    \n    console.log(`Lien ${id} marqué comme soumis avec succès`);\n    return {\n      id,\n      ...updateData\n    };\n  } catch (error) {\n    console.error(`Erreur lors du marquage du lien ${id} comme soumis:`, error);\n    \n    // Essayer de créer/remplacer le document\n    try {\n      const updateData = {\n        isSubmitted: true,\n        submissionId,\n        submittedAt: Timestamp.fromDate(new Date())\n      };\n      \n      await setDoc(doc(db, FORM_LINKS_COLLECTION, id), updateData, { merge: true });\n      \n      console.log(`Lien ${id} marqué comme soumis (via setDoc) avec succès`);\n      return {\n        id,\n        ...updateData\n      };\n    } catch (setError) {\n      console.error(`Erreur lors du marquage du lien ${id} comme soumis (via setDoc):`, setError);\n      return null;\n    }\n  }\n};\n\n/**\n * Supprime un lien de formulaire\n * @param {string} id - ID du lien\n * @returns {Promise<string>} ID du lien supprimé\n */\nexport const deleteFormLink = async (id) => {\n  try {\n    console.log(`Tentative de suppression du lien ${id}`);\n    const docRef = doc(db, FORM_LINKS_COLLECTION, id);\n    await deleteDoc(docRef);\n    \n    console.log(`Lien ${id} supprimé avec succès`);\n    return id;\n  } catch (error) {\n    console.error(`Erreur lors de la suppression du lien ${id}:`, error);\n    return null;\n  }\n};\n\n/**\n * Récupère tous les liens de formulaire\n * @param {Object} filters - Filtres à appliquer (optionnel)\n * @returns {Promise<Array>} Liste des liens de formulaire\n */\nexport const getFormLinks = async (filters = {}) => {\n  try {\n    // S'assurer que la collection existe\n    await ensureCollection(FORM_LINKS_COLLECTION);\n    \n    console.log(\"Tentative de récupération des liens de formulaire depuis Firebase...\");\n    \n    // Création d'une requête de base\n    let linkQuery = formLinksCollection;\n    \n    // Application des filtres si nécessaire\n    if (filters) {\n      // Filtrer par statut de soumission\n      if (filters.isSubmitted !== undefined) {\n        linkQuery = query(linkQuery, where('isSubmitted', '==', filters.isSubmitted));\n      }\n      \n      // Filtrer par programmateur\n      if (filters.programmerId) {\n        linkQuery = query(linkQuery, where('programmerId', '==', filters.programmerId));\n      }\n      \n      // Filtrer par concert\n      if (filters.concertId) {\n        linkQuery = query(linkQuery, where('concertId', '==', filters.concertId));\n      }\n    }\n    \n    // Ajout d'un tri par date de création (du plus récent au plus ancien)\n    linkQuery = query(linkQuery, orderBy('createdAt', 'desc'));\n    \n    // Exécution de la requête\n    const snapshot = await getDocs(linkQuery);\n    \n    if (snapshot.empty) {\n      console.log(\"Aucun lien de formulaire trouvé dans Firebase\");\n      return [];\n    }\n    \n    const formLinks = snapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n    \n    console.log(`${formLinks.length} liens de formulaire récupérés depuis Firebase`);\n    return formLinks;\n  } catch (error) {\n    console.error(\"Erreur lors de la récupération des liens de formulaire:\", error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}